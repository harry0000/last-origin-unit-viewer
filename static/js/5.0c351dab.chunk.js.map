{"version":3,"sources":["component/skill/AreaOfEffectGrid.tsx","component/skill/AttributeColorStyle.ts","component/skill/DamageDealView.tsx","component/skill/EffectsAsEquipmentDescriptionView.tsx","domain/UnitAlias.ts","component/skill/UnitAliasView.tsx","component/skill/SkillEffectTargetView.tsx","domain/skill/UnitSkills.ts","component/skill/SkillEffectConditionViewModel.ts","component/skill/SkillEffectConditionView.tsx","component/skill/SkillEffectsTranslator.ts","component/skill/SkillEffectDetailsView.tsx","component/skill/SkillEffectsView.tsx","component/skill/SkillPane.tsx"],"names":["cellColorStyle","AreaOfEffectCellType","Effective","High","Middle","Weak","None","overlayStyle","type","borderRadius","position","top","bottom","left","right","opacity","backgroundColor","AreaOfEffectCell","selected","rest","t","useTranslation","css","border","width","content","display","marginTop","inset","OverlayTrigger","placement","overlay","Tooltip","id","AreaOfEffectGrid","skillType","unit","cellType","useSkillArea","ifNonNullable","cell","borderCollapse","transform","select","area","color","AttributeColorStyle","DamageAttribute","Fire","Ice","Electric","DamageDealView","props","useDamageDeal","damage_deal","SkillAreaType","Single","effective","margin","fontWeight","calcValue","attribute","EffectsAsEquipmentDescriptionView","show","useEffectsAsEquipmentDescription","ifTruthy","fontSize","cursor","textDecoration","UnitAlias","unitNumbersForAlias","Set","isUnitAlias","arg","Object","keys","some","alias","UnitAliasView","unitAlias","exceptUnit","popover","Popover","Content","filter","n","map","key","textAlign","number","SkillEffectTargetView","target","selfUnitNumber","Fragment","kind","conditions","cond","i","arr","separator","length","value","role","except","undefined","v","not_alias","isTargetSkillEffect","SkillEffectConditionViewModel","effect","this","details","isTargetSkillEffectData","SkillEffectTargetKind","Enemy","enemyTargetConditions","scale_factor","hasSelfEffect","needNotDetails","state","assign","self","around","needSeparator","array","index","unitStateView","unitName","isReadonlyArray","units","u","join","EffectActivationState","InSquad","SelfAndTargetStateView","unitNumber","JSON","stringify","typedEntries","entry","entries","HpGreaterOrEqual","HpLessOrEqual","HpGreaterThan","HpLessThan","Affected","Tagged","NotTagged","tag","StackGe","Form","form","Unit","AffectedBy","Equipped","equipment","NotEquipped","equipments","e","Grid","grid","stateValuesView","SquadStateView","s","in_squad","num_of_units","EnemyStateView","TriggerView","condition","trigger","round","at","from","until","ConditionStateView","Separator","NotTargetStateView","ConditionRow","EnemyConditionRow","EffectiveView","EffectScaleFactorView","scaleFactor","per_stack","num_of_enemies","exceptSelf","EffectTargetsView","targets","SkillEffectConditionView","model","OrConjunction","conds","children","onlyAdditional","hasMultipleConditions","effectTargets","getDetail","body","rate","additions","times","count","max_stack","cannot_be_dispelled","notFalsy","getTerm","term","for_rounds","getTag","translateMilliPercentageDetail","detail","translateTagStackDetail","EffectDetailRow","padding","marginLeft","flexShrink","EffectDetail","Effect","MinimizeDamage","NullifyDamage","AllBuffRemoval","AllDebuffRemoval","ColumnProtect","RowProtect","TargetProtect","ReAttack","FollowUpAttack","IgnoreBarrierDr","IgnoreProtect","Reconnaissance","Marked","Provoked","Immovable","Silenced","Stunned","RefundAp","AttackCritical","CounterattackCritical","DeployDefensiveWall","AMG11Construction","DeployRabbitDField","SummonHologramTiger","GoldenFactoryConstruction","CooperativeAttack","active","isFormChangeUnitNumber","no","UnitForms","default","Push","Pull","RangeUp","RangeDown","FixedDamageOverTime","FixedFireDamageOverTime","FixedIceDamageOverTime","FixedElectricDamageOverTime","Barrier","BattleContinuation","ApUp","ApDown","SetAp","EffectRemoval","effects","PreventsEffect","ActivationRatePercentageUp","FormChange","FormRelease","TagStack","TagRelease","TagUnstack","DefDown","AccDown","CriDown","EvaUp","StatusResistUp","translateSkillEffectDetails","SkillEffectDetailsView","className","targetKey","Badge","variant","SkillEffectView","SkillEffectsView","values","useSkillEffects","skillValueFontSizeStyle","skillLabelStyle","skillBadgeStyle","NestedContainer","Container","fluid","SkillNameView","name","useSkillName","textOverflow","overflow","whiteSpace","title","SkillCostView","cost","useSkillCost","SkillRangeView","range","useSkillRange","RankUpSkillBadge","isRankUpSkill","useRankUpSkillBadge","FormChangeSkillBadge","useFormChangeSkillBadge","skillLvItems","Array","SkillLvDropdown","useSkillLvState","skillLv","setSkillLv","userSelect","marginRight","NumberValueDropdown","items","onChange","SkillPane","eventKey","selectedUnit","useSelectedUnit","Tab","Pane","paddingTop","Row","Col","xs","sm","order","span"],"mappings":"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","file":"static/js/5.0c351dab.chunk.js","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { CSSObject, Theme, jsx } from '@emotion/react';\nimport React from 'react';\nimport { Interpolation } from '@emotion/serialize';\nimport { useTranslation } from 'react-i18next';\n\nimport { AreaOfEffectCellType } from './AreaOfEffectCellType';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\nimport { useSkillArea } from '../../state/skill/unitSkillState';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst cellColorStyle: { [key in AreaOfEffectCellType]: string } = {\n  [AreaOfEffectCellType.Effective]: '#d0191d',\n  [AreaOfEffectCellType.High]:      '#ff8f03',\n  [AreaOfEffectCellType.Middle]:    '#ba5a03',\n  [AreaOfEffectCellType.Weak]:      '#763316',\n  [AreaOfEffectCellType.None]:      '#4b4b4d'\n} as const;\n\nconst overlayStyle: (type: AreaOfEffectCellType) => CSSObject = (type) =>\n  type !== AreaOfEffectCellType.None ?\n    {\n      borderRadius: 2,\n      position: 'absolute',\n      top: -3,\n      bottom: 4,\n      left: -3,\n      right: 4,\n      opacity: 0.8,\n      backgroundColor: cellColorStyle[type]\n    } :\n    {};\n\nconst AreaOfEffectCell: React.FC<{ selected: boolean, type: AreaOfEffectCellType }> = ({ selected, type, ...rest }) => {\n  const { t } = useTranslation();\n\n  return (\n    <td\n      css={{\n        border: '5px solid transparent',\n        width: '33%',\n        position: 'relative',\n        '&::after': {\n          content: '\" \"',\n          display: 'block',\n          marginTop: '100%'\n        }\n      }}\n    >\n      <div\n        css={{\n          borderRadius: 2,\n          position: 'absolute',\n          inset: 0,\n          backgroundColor: selected ? '#16d4d4' : cellColorStyle[AreaOfEffectCellType.None]\n        }}\n      />\n      {\n        type === AreaOfEffectCellType.High ||\n        type === AreaOfEffectCellType.Middle ||\n        type === AreaOfEffectCellType.Weak ?\n          (<OverlayTrigger\n            {...rest}\n            placement='auto'\n            overlay={<Tooltip id='tooltip-aoe-cell'>{t(`skill.effective_rate.${type}`)}</Tooltip>}\n          >\n            <div css={overlayStyle(type)} />\n          </OverlayTrigger>) :\n          <div css={overlayStyle(type)} />\n      }\n    </td>\n  );\n};\n\nconst AreaOfEffectGrid: React.FC<{\n  css?: Interpolation<Theme>,\n  skillType: SkillType,\n  unit: UnitBasicInfo\n}> = ({ skillType, unit, ...rest }) => {\n  const { t } = useTranslation();\n  const cellType = useSkillArea(skillType, unit);\n\n  return (\n    ifNonNullable(\n      cellType,\n      cell => (\n        <div {...rest}>\n          <table\n            css={{\n              borderCollapse: 'collapse',\n              width: '100%',\n              transform: 'skewX(-9deg)'\n            }}>\n            <tbody>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 7} type={cell.area[0]} />\n                <AreaOfEffectCell selected={cell.select === 8} type={cell.area[1]} />\n                <AreaOfEffectCell selected={cell.select === 9} type={cell.area[2]} />\n              </tr>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 4} type={cell.area[3]} />\n                <AreaOfEffectCell selected={cell.select === 5} type={cell.area[4]} />\n                <AreaOfEffectCell selected={cell.select === 6} type={cell.area[5]} />\n              </tr>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 1} type={cell.area[6]} />\n                <AreaOfEffectCell selected={cell.select === 2} type={cell.area[7]} />\n                <AreaOfEffectCell selected={cell.select === 3} type={cell.area[8]} />\n              </tr>\n            </tbody>\n          </table>\n          {(<span css={{ color: '#16d4d4' }}>{!cell.select ? t('skill.fixed_area') : '\\u00A0'}</span>)}\n        </div>\n      )\n    )\n  );\n};\n\nexport default AreaOfEffectGrid;\n","import { DamageAttribute } from '../../domain/skill/UnitSkillData';\n\nexport const AttributeColorStyle: { [key in DamageAttribute]: string } = {\n  [DamageAttribute.Fire]: '#c33',\n  [DamageAttribute.Ice]: '#0cf',\n  [DamageAttribute.Electric]: '#fc0'\n};\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\nimport { calcValue } from '../../domain/ValueUnit';\n\nimport { AttributeColorStyle } from './AttributeColorStyle';\n\nimport { useDamageDeal } from '../../state/skill/unitSkillState';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst DamageDealView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const props = useDamageDeal(skillType, unit);\n  if (!props[0]) {\n    return null;\n  }\n\n  const [damage_deal, area] = props;\n\n  return (\n    <div css={{ color: '#ccc', marginTop: 10 }}>\n      <span>\n        {area === SkillAreaType.Single ?\n          t('effect:damage_deal.target.single') :\n          t('effect:damage_deal.target.area')}\n      </span>\n      {ifNonNullable(\n        damage_deal.effective,\n        effective => (<span>{t(`effect:effective.${effective}`)}{t('effect:separator')}</span>)\n      )}\n      <span>{t('status.atk')}</span>\n      <span css={{ margin: '0 5px', color: '#fc0', fontWeight: 'bold' }}>\n        {calcValue(damage_deal)}%\n      </span>\n      <span>{t('effect:as_preposition')}</span>\n      {ifNonNullable(\n        damage_deal.attribute,\n        attribute => (\n          <span css={{ margin: '0 5px', color: AttributeColorStyle[attribute], fontWeight: 600 }}>\n            {t(`effect:attribute.${attribute}`)}\n          </span>\n        )\n      )}\n      <span>{t('effect:damage')}</span>\n    </div>\n  );\n};\n\nexport default DamageDealView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\n\nimport { useEffectsAsEquipmentDescription } from '../../state/skill/unitSkillState';\n\nimport { ifTruthy } from '../../util/react';\n\nconst EffectsAsEquipmentDescriptionView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const show = useEffectsAsEquipmentDescription(skillType, unit);\n\n  return (\n    ifTruthy(\n      show,\n      (<div css={{\n        color: '#ccc',\n        fontSize: '0.9em',\n        marginTop: 10\n      }}>\n        <span>{t('effect:effects_as_equipment.description.prefix')}</span>\n        <OverlayTrigger\n          placement='auto'\n          overlay={<Tooltip id='tooltip-effects-as-equipment'>{t('effect:effects_as_equipment.annotation')}</Tooltip>}\n        >\n          <span css={{ cursor: 'help', textDecoration: 'underline' }}>\n            {t('effect:effects_as_equipment.description.as_equipment')}\n          </span>\n        </OverlayTrigger>\n        <span>{t('effect:effects_as_equipment.description.suffix')}</span>\n      </div>)\n    )\n  );\n};\n\nexport default EffectsAsEquipmentDescriptionView;\n","import { UnitNumber } from './UnitBasicInfo';\n\nexport const UnitAlias = {\n  ElectricActive: 'electric_active',\n  ArtilleryTypeActive: 'artillery_type_active',\n  Squad21: 'squad_21',\n  CompanionSeries: 'companion_series',\n  SteelLine: 'steel_line',\n  SistersOfValhalla: 'sisters_of_valhalla',\n  AngerOfHorde: 'anger_of_horde',\n  DoomBringer: 'doom_bringer',\n  AACannonier: 'aa_cannonier',\n  ArmoredMaiden: 'armored_maiden',\n  MongooseTeam: 'mongoose_team',\n  Horizon: 'horizon',\n  TomosFriends: 'tomos_friends',\n  CityGuard: 'city_guard',\n  MagicalGirl: 'magical_girl',\n  KouheiChurch: 'kouhei_church',\n  SpartanSeries: 'spartan_series'\n} as const;\nexport type UnitAlias = typeof UnitAlias[keyof typeof UnitAlias]\n\nexport const unitNumbersForAlias: { [key in UnitAlias]: ReadonlySet<UnitNumber> } = {\n  [UnitAlias.ElectricActive]: new Set([6, 11, 75, 84, 113, 115, 132, 139, 174, 179, 201, 221, 231, 235]),\n  [UnitAlias.ArtilleryTypeActive]: new Set([22, 51, 202]),\n  [UnitAlias.Squad21]: new Set([2, 3, 85, 92, 118, 121, 187]),\n  [UnitAlias.CompanionSeries]: new Set([16, 17, 18, 19, 183]),\n  [UnitAlias.SteelLine]: new Set([21, 22, 23, 24, 25, 26, 27, 28, 29]),\n  [UnitAlias.SistersOfValhalla]: new Set([31, 32, 33, 34, 35, 36, 37, 177]),\n  [UnitAlias.AngerOfHorde]: new Set([41, 42, 43, 44, 192, 194]),\n  [UnitAlias.DoomBringer]: new Set([51, 52, 53, 54, 55, 56, 182]),\n  [UnitAlias.AACannonier]: new Set([60, 67, 68, 69, 70]),\n  [UnitAlias.ArmoredMaiden]: new Set([61, 62, 65, 66]),\n  [UnitAlias.MongooseTeam]: new Set([80, 81, 82, 83, 84]),\n  [UnitAlias.Horizon]: new Set([85, 87, 88, 89, 90]),\n  [UnitAlias.TomosFriends]: new Set([25, 43, 81, 125]),\n  [UnitAlias.CityGuard]: new Set([111, 112, 113, 114, 115, 179, 184]),\n  [UnitAlias.MagicalGirl]: new Set([123, 127]),\n  [UnitAlias.KouheiChurch]: new Set([126, 138, 139]),\n  [UnitAlias.SpartanSeries]: new Set([215, 216, 217])\n} as const;\n\nexport function isUnitAlias(arg: string): arg is UnitAlias {\n  return Object.keys(unitNumbersForAlias).some(alias => alias === arg);\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\n\nimport { UnitAlias, unitNumbersForAlias } from '../../domain/UnitAlias';\nimport { UnitNumber } from '../../domain/UnitBasicInfo';\n\nconst UnitAliasView: React.FC<{\n  unitAlias: UnitAlias,\n  exceptUnit?: UnitNumber\n}> = ({ unitAlias, exceptUnit }) => {\n  const { t } = useTranslation();\n  const popover = (\n    <Popover id=\"popover-unit-alias\" css={{ opacity: '0.9' }}>\n      <Popover.Content>\n        {[...unitNumbersForAlias[unitAlias]]\n          .filter(n => n !== exceptUnit)\n          .map(n => (<div key={n} css={{ textAlign: 'left' }}>{t('unit:display', { number: n })}</div>))}\n      </Popover.Content>\n    </Popover>\n  );\n\n  return (\n    <OverlayTrigger\n      placement='auto'\n      overlay={popover}\n    >\n      <span css={{\n        display: 'inline-block',\n        cursor: 'help',\n        textDecoration: 'underline'\n      }}>\n        {t(`effect:unit.${unitAlias}`)}\n      </span>\n    </OverlayTrigger>\n  );\n};\n\nexport default UnitAliasView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport UnitAliasView from './UnitAliasView';\n\nimport { SkillEffectTarget } from '../../domain/skill/SkillEffectData';\nimport { UnitNumber } from '../../domain/UnitBasicInfo';\nimport { isUnitAlias } from '../../domain/UnitAlias';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst SkillEffectTargetView: React.FC<{\n  target: SkillEffectTarget,\n  selfUnitNumber: UnitNumber\n}> = ({ target, selfUnitNumber }) => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      {t(`effect:effect.target.kind.${target.kind}`)}\n      {'conditions' in target ? t('effect:of_preposition') : null}\n      {\n        'conditions' in target && target.conditions ?\n          target.conditions.map((cond, i, arr ) => {\n            const separator: string = ++i < arr.length ? t('effect:unit_separator') : '';\n\n            if (typeof cond === 'number') {\n              return t('effect:with_quotes', { value: t('unit:display', { number: cond }) }) + separator;\n            } else if (typeof cond === 'string') {\n              return isUnitAlias(cond) ?\n                (<React.Fragment key={cond}><UnitAliasView unitAlias={cond} />{separator}</React.Fragment>) :\n                t(`effect:unit.${cond}`) + separator;\n            } else if ('alias' in cond) {\n              const unit: string | null =\n                'type' in cond ?\n                  t(`effect:unit.${cond.type}`) :\n                  'role' in cond ?\n                    t(`effect:unit.${cond.role}`) :\n                    null;\n              const except = 'except' in cond ? cond.except : undefined;\n\n              return (\n                <React.Fragment key={cond.alias}>\n                  {ifNonNullable(\n                    except,\n                    v => (\n                      <React.Fragment>\n                        {\n                          v === selfUnitNumber ?\n                            t('effect:unit.self') :\n                            t('effect:with_quotes', { value: t('unit:display', { number: v }) })\n                        }\n                        {t('effect:except_preposition')}\n                      </React.Fragment>\n                    )\n                  )}\n                  <UnitAliasView unitAlias={cond.alias} exceptUnit={except} />\n                  {unit ? t('effect:of_preposition') : null}\n                  {unit}\n                  {separator}\n                </React.Fragment>\n              );\n            } else if ('not_alias' in cond) {\n              return (\n                <React.Fragment key={cond.not_alias}>\n                  <UnitAliasView unitAlias={cond.not_alias} />\n                  {t('effect:negative_form')}\n                  {'type' in cond ? t(`effect:unit.${cond.type}`) : t('effect:unit.unit')}\n                  {separator}\n                </React.Fragment>\n              );\n            } else {\n              return t(`effect:unit.${cond.type}`) + t(`effect:unit.${cond.role}`) + separator;\n            }\n          }) :\n          null\n      }\n    </React.Fragment>\n  );\n};\n\nexport default SkillEffectTargetView;\n","import { ActiveSkillEffective, PassiveSkillEffective } from './SkillEffective';\nimport {\n  DamageAttribute,\n  SkillApCostValue,\n  SkillRangeValue\n} from './UnitSkillData';\nimport { Effect } from '../Effect';\nimport {\n  EquipmentEffectOnly,\n  IntegerValueEffectKey,\n  MicroValueEffectKey,\n  MilliPercentageEffectKey,\n  MultipleMilliPercentageEffectKey,\n  NoValueEffectKey,\n  PushPullEffectKey,\n  RangeUpDownEffectKey\n} from './SkillEffect';\nimport {\n  IntegerValue,\n  MilliPercentageValue,\n  ValueUnit\n} from '../ValueUnit';\nimport {\n  SelfSkillEffectActivationCondition,\n  SkillEffectActivationTrigger,\n  TargetSkillEffectActivationCondition\n} from './SkillEffectActivationCondition';\nimport { SkillAreaType } from './SkillAreaOfEffect';\nimport { SkillEffectActivationRate } from './SkillEffectActivationRate';\nimport { SkillEffectScaleFactor } from './SkillEffectScaleFactor';\nimport { SkillEffectTag, SkillEffectTagStackValue } from './SkillEffectTag';\nimport { SkillEffectTarget } from './SkillEffectData';\nimport { SkillEffectTerm, SkillEffectTermRoundsValue } from './SkillEffectTerm';\nimport { SkillEffectTimesValue } from './SkillEffectTimesValue';\nimport { UnitForms } from '../UnitFormValue';\nimport { UnitNumber } from '../UnitBasicInfo';\n\ntype SkillEffectAddition = Readonly<{\n  tag?: SkillEffectTag,\n  max_stack?: SkillEffectTagStackValue,\n  term?:\n    typeof SkillEffectTerm['Immediate' | 'Infinite'] |\n    {\n      readonly [SkillEffectTerm.ForRounds]: SkillEffectTermRoundsValue\n    },\n  rate?: SkillEffectActivationRate | MilliPercentageValue,\n  times?: SkillEffectTimesValue,\n  cannot_be_dispelled?: true\n}>\n\ntype ValueWithAddition<T extends ValueUnit> =\n  { readonly [key in T]: number } & SkillEffectAddition\n\ntype TagStackEffectValue = { tag: SkillEffectTag } & Omit<SkillEffectAddition, 'tag'>\n\nexport type SkillEffectValue = Readonly<{\n  [E in Exclude<Effect, EquipmentEffectOnly>]?:\n    E extends NoValueEffectKey ?\n      SkillEffectAddition :\n    E extends typeof Effect.CooperativeAttack ?\n      { unit: UnitNumber, active: 1 | 2 } & SkillEffectAddition :\n    E extends PushPullEffectKey ?\n      IntegerValue<1 | 2> & SkillEffectAddition :\n    E extends RangeUpDownEffectKey ?\n      IntegerValue<1 | 2 | 3> & SkillEffectAddition :\n    E extends IntegerValueEffectKey ?\n      ValueWithAddition<'value'> :\n    E extends MicroValueEffectKey ?\n      ValueWithAddition<'microValue'> :\n    E extends typeof Effect.EffectRemoval ?\n      ({\n        effect: Effect\n      } | {\n        effects: ReadonlyArray<Effect>\n      }) & SkillEffectAddition :\n    E extends typeof Effect.PreventsEffect ?\n      { effect: Effect } & SkillEffectAddition :\n    E extends typeof Effect.ActivationRatePercentageUp ?\n      { effect: Effect } & ValueWithAddition<'milliPercentage'> :\n    E extends typeof Effect.TagStack ?\n      TagStackEffectValue :\n    E extends typeof Effect.TagRelease ?\n      TagStackEffectValue |\n      ReadonlyArray<TagStackEffectValue> :\n    E extends typeof Effect.TagUnstack ?\n      {\n        tag: SkillEffectTag,\n        effect?: Effect,\n        value: number\n      } & Omit<SkillEffectAddition, 'tag'> :\n    E extends typeof Effect['FormChange' | 'FormRelease'] ?\n      { form: UnitForms } & SkillEffectAddition :\n    E extends MultipleMilliPercentageEffectKey ?\n      ValueWithAddition<'milliPercentage'> |\n      ReadonlyArray<ValueWithAddition<'milliPercentage'>> :\n    E extends Exclude<MilliPercentageEffectKey, MultipleMilliPercentageEffectKey> ?\n      ValueWithAddition<'milliPercentage'> :\n      never\n}>\n\nexport type AroundSkillEffectValue = Readonly<{\n  [Effect.FixedDamage]?: ValueWithAddition<'milliPercentage'>\n}>\n\nexport type SelfSkillEffect = Readonly<{\n  conditions?:\n    readonly [SelfSkillEffectActivationCondition] |\n    readonly [SelfSkillEffectActivationCondition, SelfSkillEffectActivationCondition],\n  effective?: PassiveSkillEffective,\n  scale_factor?: SkillEffectScaleFactor,\n  details: { readonly self: SkillEffectValue }\n}>\n\ntype TargetSkillEffect = Readonly<{\n  conditions?:\n    readonly [TargetSkillEffectActivationCondition] |\n    readonly [TargetSkillEffectActivationCondition, TargetSkillEffectActivationCondition],\n  effective?: PassiveSkillEffective,\n  scale_factor?: SkillEffectScaleFactor,\n  target: SkillEffectTarget,\n  details: {\n    readonly self?: SkillEffectValue,\n    readonly target?: SkillEffectValue\n  }\n}>\n\ntype AroundSkillEffect = Readonly<{\n  conditions: readonly [SkillEffectActivationTrigger],\n  details: { readonly around: AroundSkillEffectValue }\n}>\n\nexport function isSelfSkillEffect(arg: SkillEffect): arg is SelfSkillEffect {\n  return !isTargetSkillEffect(arg) && !isAroundSkillEffect(arg);\n}\n\nexport function isTargetSkillEffect(arg: SkillEffect): arg is TargetSkillEffect {\n  return 'target' in arg;\n}\n\nexport function isAroundSkillEffect(arg: SkillEffect): arg is AroundSkillEffect {\n  return 'around' in arg.details;\n}\n\nexport type SkillEffect = SelfSkillEffect | TargetSkillEffect | AroundSkillEffect\n\nexport type DamageDeal = {\n  milliPercentage: number,\n  attribute?: DamageAttribute,\n  effective?: ActiveSkillEffective\n}\n\nexport type ActiveSkill = Readonly<{\n  damage_deal?: DamageDeal,\n  cost: SkillApCostValue,\n  range: SkillRangeValue,\n  area: SkillAreaType,\n  effects: ReadonlyArray<SkillEffect>\n}>\n\nexport type PassiveSkill = Readonly<{\n  area: SkillAreaType,\n  effects: ReadonlyArray<SkillEffect>\n}>\n\nexport type PassiveSkillAsEquipmentEffect = Readonly<{\n  area: SkillAreaType,\n  equipment_effects: ReadonlyArray<SkillEffect>\n}>\n","import { PassiveSkillEffective } from '../../domain/skill/SkillEffective';\nimport { SkillEffect } from '../../domain/skill/UnitSkills';\nimport { SkillEffectScaleFactor } from '../../domain/skill/SkillEffectScaleFactor';\nimport { isTargetSkillEffectData, SkillEffectTarget, SkillEffectTargetKind } from '../../domain/skill/SkillEffectData';\n\ntype SkillEffectTargets =\n  { self?: true } |\n  { self?: true, target: true } |\n  { self?: true, target: true } & SkillEffectTarget |\n  { around?: true }\n\ntype EnemyTargetConditions<T extends SkillEffectTarget = SkillEffectTarget> =\n  Required<Extract<T, { kind: typeof SkillEffectTargetKind.Enemy }>>\n\nclass SkillEffectConditionViewModel {\n\n  readonly #effect: SkillEffect;\n\n  constructor(effect: SkillEffect) {\n    this.#effect = effect;\n  }\n\n  get enemyTargetConditions(): EnemyTargetConditions | undefined {\n    const needEnemyConditions = !this.#effect.conditions && !('target' in this.#effect.details);\n\n    return (\n      needEnemyConditions &&\n      isTargetSkillEffectData(this.#effect) &&\n      this.#effect.target.kind === SkillEffectTargetKind.Enemy &&\n      'conditions' in this.#effect.target &&\n      this.#effect.target.conditions ?\n        { kind: this.#effect.target.kind, conditions: this.#effect.target.conditions } :\n        undefined\n    );\n  }\n\n  get onlyAdditional(): boolean {\n    return !this.#effect.conditions && !this.enemyTargetConditions;\n  }\n\n  get hasMultipleConditions(): boolean {\n    return (this.#effect.conditions?.length ?? 0) > 1;\n  }\n\n  get effective(): PassiveSkillEffective | undefined {\n    return 'effective' in this.#effect ? this.#effect.effective : undefined;\n  }\n\n  get scaleFactor(): SkillEffectScaleFactor | undefined {\n    return 'scale_factor' in this.#effect ? this.#effect.scale_factor : undefined;\n  }\n\n  get effectTargets(): SkillEffectTargets {\n    const hasSelfEffect   = 'self' in this.#effect.details;\n    const hasTargetEffect = 'target' in this.#effect.details;\n\n    if (hasTargetEffect && isTargetSkillEffectData(this.#effect)) {\n      // target details already shown by condition state\n      const needNotDetails = this.#effect.conditions?.some(cond => 'state' in cond && 'target' in cond.state);\n\n      return Object.assign(\n        hasSelfEffect ? { self: true } as const : {},\n        {\n          target: true,\n          ...(needNotDetails ? {} : this.#effect.target)\n        }\n      );\n    } else {\n      return hasSelfEffect ? { self: true } : { around: true };\n    }\n  }\n\n}\n\nexport default SkillEffectConditionViewModel;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { ReactNode } from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\n\nimport SkillEffectTargetView from './SkillEffectTargetView';\nimport UnitAliasView from './UnitAliasView';\n\nimport {\n  ActivationEnemyState,\n  ActivationSelfState,\n  ActivationTargetState,\n  SelfSkillEffectActivationCondition,\n  SelfSkillEffectActivationState,\n  SkillEffectActivationCondition,\n  TargetSkillEffectActivationCondition,\n  UnitAliasExceptUnit\n} from '../../domain/skill/SkillEffectActivationCondition';\nimport { EffectActivationState } from '../../domain/EffectActivationState';\nimport { PassiveSkillEffective } from '../../domain/skill/SkillEffective';\nimport { SkillEffectScaleFactor } from '../../domain/skill/SkillEffectScaleFactor';\nimport { SkillEffectTarget } from '../../domain/skill/SkillEffectData';\nimport { UnitNumber } from '../../domain/UnitBasicInfo';\nimport { isTargetSkillEffect, SkillEffect } from '../../domain/skill/UnitSkills';\nimport { isUnitAlias, UnitAlias } from '../../domain/UnitAlias';\n\nimport SkillEffectConditionViewModel from './SkillEffectConditionViewModel';\n\nimport { Entry, typedEntries } from '../../util/object';\nimport { ifNonNullable, ifTruthy } from '../../util/react';\nimport { isReadonlyArray, ValueOf } from '../../util/type';\n\nfunction needSeparator(array: ReadonlyArray<unknown>, index: number): boolean {\n  return ++index < array.length;\n}\n\nfunction stateValuesView(\n  entry: Entry<ActivationSelfState> | Entry<ActivationTargetState>,\n  unitNumber: UnitNumber,\n  t: TFunction\n): ReactNode {\n  switch (entry[0]) {\n  case EffectActivationState.HpGreaterOrEqual:\n  case EffectActivationState.HpLessOrEqual:\n  case EffectActivationState.HpGreaterThan:\n  case EffectActivationState.HpLessThan:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { value: entry[1] })}</span>);\n  case EffectActivationState.Affected:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { effect: entry[1] })}</span>);\n  case EffectActivationState.Tagged:\n  case EffectActivationState.NotTagged:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { tag: entry[1] })}</span>);\n  case EffectActivationState.StackGe:\n    if ('effect' in entry[1]) {\n      return t(\n        'effect:condition.state.tag_effect_stack_ge',\n        {\n          tag: entry[1].tag,\n          effect: entry[1].effect,\n          value: entry[1].value\n        }\n      );\n    } else {\n      return t(\n        'effect:condition.state.tag_stack_ge',\n        { tag: entry[1].tag, value: entry[1].value }\n      );\n    }\n  case EffectActivationState.Form:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { form: entry[1] })}</span>);\n  case EffectActivationState.Unit:\n    return unitStateView(entry[0], entry[1], unitNumber, t);\n  case EffectActivationState.AffectedBy:\n    return unitStateView(entry[0], entry[1], unitNumber, t);\n  case EffectActivationState.Equipped: {\n    const equipment = t(`equipment:${entry[1]}`);\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { equipment })}</span>);\n  }\n  case EffectActivationState.NotEquipped: {\n    const equipments = entry[1]\n      .map(e => `${t('effect:with_quotes', { value: t(`equipment:${e}`) })}`)\n      .join(t('effect:unit_separator'));\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { equipments })}</span>);\n  }\n  case EffectActivationState.Grid:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { grid: entry[1] })}</span>);\n  default: {\n    const _exhaustiveCheck: never = entry;\n    return _exhaustiveCheck;\n  }\n  }\n}\n\nfunction unitStateView(key: typeof EffectActivationState.Unit, unit: UnitAliasExceptUnit<typeof UnitAlias.AngerOfHorde, 41>, selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(key: typeof EffectActivationState.AffectedBy, unit: UnitNumber | UnitAliasExceptUnit<typeof UnitAlias.MongooseTeam, 80>, selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(key: typeof EffectActivationState.InSquad, unit: UnitNumber | ReadonlyArray<UnitNumber> | typeof UnitAlias.ElectricActive | typeof UnitAlias.Horizon | typeof UnitAlias.KouheiChurch | 'golden_factory', selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(\n  key: typeof EffectActivationState['InSquad' | 'Unit' | 'AffectedBy'],\n  unit:\n    UnitNumber |\n    ReadonlyArray<UnitNumber> |\n    UnitAliasExceptUnit<typeof UnitAlias.AngerOfHorde, 41> |\n    UnitAliasExceptUnit<typeof UnitAlias.MongooseTeam, 80> |\n    typeof UnitAlias.ElectricActive |\n    typeof UnitAlias.Horizon |\n    typeof UnitAlias.KouheiChurch |\n    'golden_factory',\n  selfUnitNumber: UnitNumber,\n  t: TFunction\n): Exclude<ReactNode, undefined> {\n  function unitName(unit: UnitNumber): string {\n    return t('effect:with_quotes', { value: t('unit:display', { number: unit }) });\n  }\n\n  if (typeof unit === 'number') {\n    return (\n      <span>{t(`effect:condition.state.${key}`, { unit: unitName(unit) })}</span>\n    );\n  } else if (isReadonlyArray(unit)) {\n    const units = unit.map(u => unitName(u)).join(t('effect:unit_separator'));\n    return (\n      <span>{t(`effect:condition.state.${key}`, { unit: units })}</span>\n    );\n  } else if (typeof unit === 'string') {\n    if (isUnitAlias(unit)) {\n      // TODO: Move to excepting logic from view.\n      return (\n        <React.Fragment>\n          {ifTruthy(key === EffectActivationState.InSquad, (<span>{t('effect:unit.self')}{t('effect:except_preposition')}</span>))}\n          <UnitAliasView unitAlias={unit} exceptUnit={key === EffectActivationState.InSquad ? selfUnitNumber : undefined} />\n          <span>{t(`effect:condition.state.${key}`, { unit: '' })}</span>\n        </React.Fragment>\n      );\n    } else {\n      return (<span>{t(`effect:condition.state.${key}`, { unit: t(`effect:unit.${unit}`) })}</span>);\n    }\n  } else {\n    return (\n      <React.Fragment>\n        {t('effect:with_quotes', { value: t('unit:display', { number: unit.except }) })}\n        {t('effect:except_preposition')}\n        <UnitAliasView unitAlias={unit.alias} exceptUnit={unit.except} />\n        {t(`effect:condition.state.${key}`, { unit: '' })}\n      </React.Fragment>\n    );\n  }\n}\n\nconst SelfAndTargetStateView: React.FC<{\n  state: ReadonlyArray<ActivationSelfState>,\n  unitNumber: UnitNumber\n} | {\n  state: ReadonlyArray<ActivationTargetState>,\n  target: SkillEffectTarget,\n  unitNumber: UnitNumber\n}> = (props) => {\n  const { t } = useTranslation();\n  const { state, unitNumber } = props;\n\n  return (\n    <React.Fragment>\n      {\n        'target' in props ?\n          (<React.Fragment>\n            <SkillEffectTargetView target={props.target} selfUnitNumber={unitNumber} />\n            {t('effect:case_particle')}\n          </React.Fragment>) :\n          t('effect:condition.target.self')\n      }\n      {state.map((v, i: number) => {\n        return (\n          <React.Fragment key={JSON.stringify(v)}>\n            {typedEntries(v).map((entry, i, entries) => (\n              <React.Fragment key={entry[0]}>\n                {stateValuesView(entry, unitNumber, t)}\n                {ifTruthy(needSeparator(entries, i), (<span>{t('effect:and_symbolic_separator')}</span>))}\n              </React.Fragment>\n            ))}\n            {ifTruthy(needSeparator(state, i), (<span>{t('effect:or_symbolic_separator')}</span>))}\n          </React.Fragment>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst SquadStateView: React.FC<{\n  state: ValueOf<SelfSkillEffectActivationState, 'squad'>,\n  unitNumber: UnitNumber\n}> = ({ state, unitNumber }) => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      {t('effect:condition.target.squad')}\n      {\n        isReadonlyArray(state) ?\n          unitStateView(EffectActivationState.InSquad, state.map(s => s.in_squad), unitNumber, t) :\n          'num_of_units' in state ?\n            t('effect:condition.state.num_of_units', state.num_of_units as Record<string, unknown>) :\n            unitStateView(EffectActivationState.InSquad, state.in_squad, unitNumber, t)\n      }\n    </React.Fragment>\n  );\n};\n\nconst EnemyStateView: React.FC<{\n  state: ActivationEnemyState\n}> = ({ state }) => {\n  const { t } = useTranslation();\n  const { num_of_units } = state;\n\n  return (\n    <React.Fragment>\n      {t('effect:condition.target.enemy')}\n      {\n        'less_or_equal' in num_of_units ?\n          t('effect:condition.state.num_of_enemies', num_of_units as Record<string, unknown>) :\n          t('effect:condition.state.num_of_enemies_ge', num_of_units as Record<string, unknown>)\n      }\n    </React.Fragment>\n  );\n};\n\nconst TriggerView: React.FC<{\n  condition: SkillEffectActivationCondition\n}> = ({ condition }) => {\n  const { t } = useTranslation();\n\n  if (!('trigger' in condition)) {\n    return null;\n  }\n\n  return condition.trigger === 'start_round' ?\n    condition.round ?\n      'at' in condition.round ?\n        t('effect:condition.trigger.round.at', { round: condition.round.at }) :\n        'from' in condition.round ?\n          t('effect:condition.trigger.round.from', { round: condition.round.from }) :\n          t('effect:condition.trigger.round.until', { round: condition.round.until }) :\n      t('effect:condition.trigger.start_round') :\n    t(`effect:condition.trigger.${condition.trigger}`);\n};\n\nconst ConditionStateView: React.FC<{\n  condition: SelfSkillEffectActivationCondition,\n  unitNumber: UnitNumber\n} | {\n  condition: TargetSkillEffectActivationCondition,\n  target: SkillEffectTarget,\n  unitNumber: UnitNumber\n}> = (props) => {\n  const { t } = useTranslation();\n  const { unitNumber } = props;\n\n  if (!('state' in props.condition)) {\n    return null;\n  }\n\n  const Separator = ({ show }: { show: boolean }) => ifTruthy(show, t('effect:and_symbolic_separator'));\n  const NotTargetStateView = ({ entry, unitNumber, needSeparator }: {\n    entry: Entry<SelfSkillEffectActivationState>,\n    unitNumber: UnitNumber,\n    needSeparator: boolean\n  }) => {\n    const [key, value] = entry;\n    if (key === 'self') {\n      return (\n        <React.Fragment key={key}>\n          <SelfAndTargetStateView state={value} unitNumber={unitNumber} />\n          <Separator show={needSeparator} />\n        </React.Fragment>\n      );\n    } else if (key === 'squad') {\n      return (\n        <React.Fragment key={key}>\n          <SquadStateView key={key} state={value} unitNumber={unitNumber}/>\n          <Separator show={needSeparator} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment key={key}>\n          <EnemyStateView state={value}/>\n          <Separator show={needSeparator} />\n        </React.Fragment>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {'target' in props ?\n        typedEntries(props.condition.state).map((entry, i, array) =>\n          entry[0] === 'target' ?\n            (\n              <React.Fragment key={entry[0]}>\n                <SelfAndTargetStateView state={entry[1]} target={props.target} unitNumber={unitNumber} />\n                <Separator show={needSeparator(array, i)} />\n              </React.Fragment>\n            ) :\n            (<NotTargetStateView key={entry[0]} entry={entry} unitNumber={unitNumber} needSeparator={needSeparator(array, i)} />)\n        ) :\n        typedEntries(props.condition.state).map((entry, i, array) => (\n          <NotTargetStateView key={entry[0]} entry={entry} unitNumber={unitNumber} needSeparator={needSeparator(array, i)} />\n        ))\n      }\n      {t('effect:case')}\n    </React.Fragment>\n  );\n};\n\nconst ConditionRow: React.FC<{\n  condition: SelfSkillEffectActivationCondition,\n  unitNumber: UnitNumber\n} | {\n  condition: TargetSkillEffectActivationCondition,\n  target: SkillEffectTarget,\n  unitNumber: UnitNumber\n}> = (props) => {\n  const { t } = useTranslation();\n  const { condition, unitNumber } = props;\n  const needSeparator = 'trigger' in condition && 'state' in condition;\n\n  return (\n    <span>\n      <TriggerView condition={condition} />\n      {ifTruthy(needSeparator, t('effect:separator'))}\n      {'target' in props ?\n        <ConditionStateView condition={props.condition} target={props.target} unitNumber={unitNumber} /> :\n        <ConditionStateView condition={props.condition} unitNumber={unitNumber} />}\n    </span>\n  );\n};\n\nconst EnemyConditionRow: React.FC<{\n  target: NonNullable<SkillEffectConditionViewModel['enemyTargetConditions']>\n}> = ({ target }) => {\n  const { t } = useTranslation();\n  const unit = target.conditions.map(cond => t(`effect:unit.${cond}`)).join(t('effect:unit_separator'));\n\n  return (\n    <React.Fragment>\n      {t('effect:effect.target.kind.enemy')}\n      {t('effect:case_particle')}\n      {t('effect:condition.state.unit', { unit })}\n      {t('effect:case')}\n    </React.Fragment>\n  );\n};\n\nconst EffectiveView: React.FC<{ effective: PassiveSkillEffective | undefined }> = ({ effective }) => {\n  const { t } = useTranslation();\n\n  return ifNonNullable(effective, v => (<span>{t(`effect:effective.${v}`)}</span>));\n};\n\nconst EffectScaleFactorView: React.FC<{\n  scaleFactor: SkillEffectScaleFactor | undefined,\n  unitNumber: UnitNumber\n}> = ({ scaleFactor, unitNumber }) => {\n  const { t } = useTranslation();\n\n  return ifNonNullable(\n    scaleFactor,\n    v => {\n      if ('per_stack' in v) {\n        return (<span>{t('effect:scale_factor.per_stack', { tag: v.per_stack.tag })}</span>);\n      } else if ('num_of_enemies' in v) {\n        return (<span>{t('effect:unit.enemy')}{t(`effect:scale_factor.${v.num_of_enemies}`)}</span>);\n      } else {\n        const exceptSelf = !!v.except;\n        if (isUnitAlias(v.num_of_units)) {\n          return (\n            <React.Fragment>\n              {ifTruthy(exceptSelf, (<span>{t('effect:unit.self')}{t('effect:except_preposition')}</span>))}\n              <UnitAliasView unitAlias={v.num_of_units} exceptUnit={exceptSelf ? unitNumber : undefined} />\n              <span>{t('effect:scale_factor.num_of_allies')}</span>\n            </React.Fragment>\n          );\n        } else {\n          return (\n            <React.Fragment>\n              {ifTruthy(exceptSelf, (<span>{t('effect:unit.self')}{t('effect:except_preposition')}</span>))}\n              <span>{t(`effect:unit.${v.num_of_units}`)}{t('effect:scale_factor.num_of_allies')}</span>\n            </React.Fragment>\n          );\n        }\n      }\n    }\n  );\n};\n\nconst EffectTargetsView: React.FC<{\n  targets: SkillEffectConditionViewModel['effectTargets'],\n  unitNumber: UnitNumber\n}> = ({ targets, unitNumber }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span>\n      {ifTruthy('self' in targets, t('effect:effect.target.self'))}\n      {ifTruthy('self' in targets && 'target' in targets, t('effect:and_separator'))}\n      {\n        'target' in targets ?\n          'kind' in targets ?\n            <SkillEffectTargetView target={targets} selfUnitNumber={unitNumber} /> :\n            t('effect:effect.target.target') :\n          null\n      }\n      {ifTruthy('around' in targets, t('effect:effect.target.around'))}\n      {t('effect:to_preposition')}\n    </span>\n  );\n};\n\nconst SkillEffectConditionView: React.FC<{\n  effect: SkillEffect,\n  unitNumber: UnitNumber\n}> = ({ effect, unitNumber }) => {\n  const { t } = useTranslation();\n  const model = new SkillEffectConditionViewModel(effect);\n\n  const OrConjunction = () => (<div css={{ fontSize: '0.7em' }}>{t('effect:or_conjunction')}</div>);\n  const Conditions = () => {\n    if (isTargetSkillEffect(effect)) {\n      return effect.conditions ?\n        effect.conditions.length === 1 ?\n          (<ConditionRow condition={effect.conditions[0]} target={effect.target} unitNumber={unitNumber} />) :\n          (\n            <React.Fragment>\n              <ConditionRow condition={effect.conditions[0]} target={effect.target} unitNumber={unitNumber} />\n              <OrConjunction />\n              <ConditionRow condition={effect.conditions[1]} target={effect.target} unitNumber={unitNumber} />\n            </React.Fragment>\n          ) :\n        ifNonNullable(model.enemyTargetConditions, conditions => (<EnemyConditionRow target={conditions} />));\n    } else {\n      return ifNonNullable(\n        effect.conditions,\n        conds =>\n          conds.length === 1 ?\n            (<ConditionRow condition={conds[0]} unitNumber={unitNumber} />) :\n            (\n              <React.Fragment>\n                <ConditionRow condition={conds[0]} unitNumber={unitNumber} />\n                <OrConjunction />\n                <ConditionRow condition={conds[1]} unitNumber={unitNumber} />\n              </React.Fragment>\n            )\n      );\n    }\n  };\n  const Additional = ({ children }: { children: ReactNode }) => {\n    return (\n      model.onlyAdditional ?\n        (<span>{children}</span>) :\n        model.hasMultipleConditions ?\n          (<div css={{ marginTop: 5 }}>{children}</div>) :\n          (<span>{t('effect:separator')}{children}</span>)\n    );\n  };\n\n  return (\n    <div>\n      <Conditions />\n      <Additional>\n        <EffectiveView effective={model.effective} />\n        <EffectScaleFactorView scaleFactor={model.scaleFactor} unitNumber={unitNumber} />\n        <EffectTargetsView targets={model.effectTargets} unitNumber={unitNumber} />\n        {t('effect:below_effects')}\n      </Additional>\n    </div>\n  );\n};\n\nexport default SkillEffectConditionView;\n","import { TFunction } from 'i18next';\n\nimport { AroundSkillEffectValue, SkillEffectValue } from '../../domain/skill/UnitSkills';\nimport { Effect } from '../../domain/Effect';\nimport { calcValue, MilliPercentageValue } from '../../domain/ValueUnit';\nimport { isFormChangeUnitNumber, UnitForms } from '../../domain/UnitFormValue';\n\nimport { Entry } from '../../util/object';\nimport { notFalsy } from '../../util/type';\n\nexport type SkillEffectDetailsEntry =\n  Entry<SkillEffectValue> |\n  Entry<AroundSkillEffectValue>\n\ntype SkillEffectDetailsProps = { tag?: string, detail: string, term?: string }\n\nfunction getDetail(body: string, value: SkillEffectDetailsEntry[1], t: TFunction): string {\n  const rate = 'rate' in value && value.rate ?\n    typeof value.rate === 'string' ?\n      `${t(`effect:rate.${value.rate}`)}${t('effect:separator')}` :\n      `${t('effect:rate.percentage', { value: calcValue(value.rate) })}${t('effect:separator')}` :\n    '';\n  const additions = [\n    'times' in value && value.times ?\n      t('effect:times', { count: value.times }) : undefined,\n    'max_stack' in value && typeof value.max_stack === 'number' ?\n      value.max_stack === 1 ?\n        t('effect:does_not_stack') :\n        t('effect:max_stack', { count: value.max_stack }) :\n      undefined,\n    'cannot_be_dispelled' in value && value.cannot_be_dispelled ?\n      t('effect:cannot_be_dispelled') : undefined\n  ].filter(notFalsy)\n    .join(t('effect:separator'));\n\n  return `${rate}${body}${additions ? ` (${additions})` : '' }`;\n}\n\nfunction getTerm(value: SkillEffectDetailsEntry[1], t: TFunction): string | undefined {\n  return 'term' in value ?\n    typeof value.term === 'string' ?\n      t(`effect:term.${value.term}`) :\n      value.term && t('effect:term.for_rounds', { value: value.term.for_rounds }) :\n    undefined;\n}\n\nfunction getTag(value: SkillEffectDetailsEntry[1], t: TFunction): string | undefined {\n  return 'tag' in value ?\n    value.tag && t(`effect:tag.${value.tag}`) :\n    undefined;\n}\n\nfunction translateMilliPercentageDetail(\n  effect: string,\n  value: SkillEffectDetailsEntry[1] & MilliPercentageValue,\n  t: TFunction\n): SkillEffectDetailsProps {\n  return {\n    tag: getTag(value, t),\n    detail: getDetail(t(`effect:effect.description.${effect}`, { value: calcValue(value) }), value, t),\n    term: getTerm(value, t)\n  };\n}\n\ntype TagStackEffectValue = NonNullable<SkillEffectValue[typeof Effect.TagStack]>\n\nfunction translateTagStackDetail(\n  key: typeof Effect['TagStack' | 'TagRelease'],\n  value: TagStackEffectValue,\n  t: TFunction\n): SkillEffectDetailsProps {\n  return {\n    detail: getDetail(t(`effect:effect.description.${key}`, { tag: value.tag }), value, t),\n    term: getTerm(value, t)\n  };\n}\n\nexport function translateSkillEffectDetails(\n  entry: SkillEffectDetailsEntry,\n  t: TFunction\n): SkillEffectDetailsProps | ReadonlyArray<SkillEffectDetailsProps>{\n  const term = getTerm(entry[1], t);\n\n  switch (entry[0]) {\n  case Effect.MinimizeDamage:\n  case Effect.NullifyDamage:\n  case Effect.AllBuffRemoval:\n  case Effect.AllDebuffRemoval:\n  case Effect.ColumnProtect:\n  case Effect.RowProtect:\n  case Effect.TargetProtect:\n  case Effect.ReAttack:\n  case Effect.FollowUpAttack:\n  case Effect.IgnoreBarrierDr:\n  case Effect.IgnoreProtect:\n  case Effect.Reconnaissance:\n  case Effect.Marked:\n  case Effect.Provoked:\n  case Effect.Immovable:\n  case Effect.Silenced:\n  case Effect.Stunned:\n  case Effect.RefundAp:\n  case Effect.AttackCritical:\n  case Effect.CounterattackCritical:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`), entry[1], t),\n      term\n    };\n  case Effect.DeployDefensiveWall:\n  case Effect.AMG11Construction:\n  case Effect.DeployRabbitDField:\n  case Effect.SummonHologramTiger:\n  case Effect.GoldenFactoryConstruction:\n    return {\n      tag: getTag(entry[1], t),\n      detail: t(`effect:effect.description.${entry[0]}`, { times: entry[1].times }),\n      term\n    };\n  case Effect.CooperativeAttack: {\n    const { unit, active } = entry[1];\n    return {\n      tag: getTag(entry[1], t),\n      detail:\n        isFormChangeUnitNumber(unit) ?\n          t('effect:effect.description.cooperative_attack_form_active', { unit, no: active, form: UnitForms[unit].default }) :\n          t('effect:effect.description.cooperative_attack', { unit, no: active }),\n      term\n    };\n  }\n  case Effect.Push:\n  case Effect.Pull:\n  case Effect.RangeUp:\n  case Effect.RangeDown:\n  case Effect.FixedDamageOverTime:\n  case Effect.FixedFireDamageOverTime:\n  case Effect.FixedIceDamageOverTime:\n  case Effect.FixedElectricDamageOverTime:\n  case Effect.Barrier:\n  case Effect.BattleContinuation:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { value: entry[1].value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.ApUp:\n  case Effect.ApDown:\n  case Effect.SetAp:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { value: calcValue(entry[1]) }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.EffectRemoval: {\n    const effects =\n      'effect' in entry[1] ?\n        t(`effect:effect.name.${entry[1].effect}`) :\n        entry[1].effects.map(e => t(`effect:effect.name.${e}`)).join(t('effect:separator'));\n\n    return {\n      detail: getDetail(\n        entry[1].tag ?\n          t('effect:effect.description.tagged_effect_removal', { tag: entry[1].tag, effects }) :\n          t('effect:effect.description.effect_removal', { effects }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  }\n  case Effect.PreventsEffect: {\n    const effect = entry[1].effect;\n\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`, { effect }), entry[1], t),\n      term\n    };\n  }\n  case Effect.ActivationRatePercentageUp: {\n    const value  = calcValue(entry[1]);\n    const effect = entry[1].effect;\n\n    return {\n      detail: getDetail(\n        entry[1].tag ?\n          t('effect:effect.description.tagged_activation_rate_percentage_up', { tag: entry[1].tag, effect, value }) :\n          t('effect:effect.description.activation_rate_percentage_up', { effect, value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  }\n  case Effect.FormChange:\n  case Effect.FormRelease:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`, { form: entry[1].form }), entry[1], t),\n      term\n    };\n  case Effect.TagStack:\n  case Effect.TagRelease:\n    return 'length' in entry[1] ?\n      entry[1].map(v => translateTagStackDetail(entry[0], v, t)) :\n      translateTagStackDetail(entry[0], entry[1], t);\n  case Effect.TagUnstack:\n    return {\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { tag: entry[1].tag, value: entry[1].value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.DefDown:\n  case Effect.AccDown:\n  case Effect.CriDown:\n  case Effect.EvaUp:\n  case Effect.StatusResistUp:\n    return 'length' in entry[1] ?\n      entry[1].map(v => translateMilliPercentageDetail(entry[0], v, t)) :\n      translateMilliPercentageDetail(entry[0], entry[1], t);\n  default: {\n    return translateMilliPercentageDetail(entry[0], entry[1], t);\n  }\n  }\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Badge } from 'react-bootstrap';\nimport { SkillEffectDetailsEntry, translateSkillEffectDetails } from './SkillEffectsTranslator';\n\nimport { AroundSkillEffectValue, SkillEffect, SkillEffectValue } from '../../domain/skill/UnitSkills';\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\n\nimport { ifNonNullable } from '../../util/react';\nimport { typedEntries } from '../../util/object';\nimport { Keyof } from '../../util/type';\n\nconst EffectDetailRow: React.FC<{\n  tag?: string,\n  detail: string,\n  term?: string\n}> = ({ tag, detail, term }) => {\n  const { t } = useTranslation();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        fontWeight: 'bold',\n        borderRadius: 3,\n        backgroundColor: '#1c3042',\n        padding: '3px 8px',\n        marginTop: 5\n      }}\n    >\n      <div>\n        {ifNonNullable(tag, v => (<span>{v}{t('effect:tag_separator')}</span>))}\n        <span>{detail}</span>\n      </div>\n      <div\n        css={{\n          marginLeft: 'auto',\n          textAlign: 'right',\n          flexShrink: 0\n        }}>\n        {ifNonNullable(term, v => (<span css={{ marginLeft: 10, color: '#aaa', fontSize: '0.9em' }}>{v}</span>))}\n      </div>\n    </div>\n  );\n};\n\nconst EffectDetail: React.FC<{\n  entry: SkillEffectDetailsEntry\n}> = ({ entry }) => {\n  const { t } = useTranslation();\n  const details = translateSkillEffectDetails(entry, t);\n\n  return 'length' in details ?\n    (<React.Fragment>\n      {details.map(detail => (<EffectDetailRow key={JSON.stringify(detail)} {...detail} />))}\n    </React.Fragment>) :\n    (<EffectDetailRow {...details} />);\n};\n\nconst SkillEffectDetailsView: React.FC<{\n  className?: string,\n  target: Keyof<SkillEffect['details']>,\n  details: NonNullable<SkillEffectValue | AroundSkillEffectValue>,\n  area: SkillAreaType\n}> = ({ className, target, details, area }) => {\n  const { t } = useTranslation();\n  const targetKey =\n    target === 'target' ?\n      area === 'single' ? 'single' : 'area' :\n      target;\n\n  return (\n    <div className={className}>\n      <div><Badge variant=\"light\">{t(`effect:effect.target.${targetKey}`)}</Badge></div>\n      {typedEntries(details).map(entry => (<EffectDetail key={entry[0]} entry={entry} />))}\n    </div>\n  );\n};\n\nexport default SkillEffectDetailsView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\n\nimport SkillEffectConditionView from './SkillEffectConditionView';\nimport SkillEffectDetailsView from './SkillEffectDetailsView';\n\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\nimport { SkillEffect } from '../../domain/skill/UnitSkills';\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo, UnitNumber } from '../../domain/UnitBasicInfo';\n\nimport { useSkillEffects } from '../../state/skill/unitSkillState';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst SkillEffectView: React.FC<{ effect: SkillEffect, unitNumber: UnitNumber, area: SkillAreaType }> = ({ effect, unitNumber, area }) => {\n  const self   = 'self'   in effect.details ? effect.details.self   : undefined;\n  const target = 'target' in effect.details ? effect.details.target : undefined;\n  const around = 'around' in effect.details ? effect.details.around : undefined;\n\n  return (\n    <div\n      css={{\n        border: '1px solid rgba(255, 255, 255, 0.3)',\n        borderRadius: 5,\n        marginTop: 10,\n        padding: 5,\n        '& > .skill-effect-details': {\n          marginTop: 10\n        }\n      }}\n    >\n      <SkillEffectConditionView effect={effect} unitNumber={unitNumber} />\n      {ifNonNullable(self  , v => (<SkillEffectDetailsView className='skill-effect-details' target='self' details={v} area={area} />))}\n      {ifNonNullable(target, v => (<SkillEffectDetailsView className='skill-effect-details' target='target' details={v} area={area} />))}\n      {ifNonNullable(around, v => (<SkillEffectDetailsView className='skill-effect-details' target='around' details={v} area={area} />))}\n    </div>\n  );\n};\n\nconst SkillEffectsView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const values = useSkillEffects(skillType, unit);\n\n  return (\n    ifNonNullable(\n      values,\n      ([effects, area, unitNumber]) => (\n        <div css={{ color: '#ccc', fontSize: '0.8em' }}>\n          {effects.map(effect => (<SkillEffectView key={JSON.stringify(effect)} effect={effect} unitNumber={unitNumber} area={area} />))}\n        </div>\n      )\n    )\n  );\n};\n\nexport default SkillEffectsView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { CSSObject, Theme, jsx } from '@emotion/react';\nimport React, { ReactNode } from 'react';\nimport { Interpolation } from '@emotion/serialize';\nimport { useTranslation } from 'react-i18next';\n\nimport AreaOfEffectGrid from './AreaOfEffectGrid';\nimport { Badge, Col, Container, Row, Tab } from 'react-bootstrap';\nimport DamageDealView from './DamageDealView';\nimport EffectsAsEquipmentDescriptionView from './EffectsAsEquipmentDescriptionView';\nimport NumberValueDropdown from '../common/NumberValueDropdown';\nimport SkillEffectsView from './SkillEffectsView';\n\nimport { SkillLv } from '../../domain/skill/UnitSkillLvValue';\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\n\nimport {\n  useFormChangeSkillBadge,\n  useRankUpSkillBadge,\n  useSkillCost,\n  useSkillLvState,\n  useSkillName,\n  useSkillRange\n} from '../../state/skill/unitSkillState';\nimport { useSelectedUnit } from '../../state/selector/unitSelectorState';\n\nimport { ifNonNullable, ifTruthy } from '../../util/react';\n\nimport './RankUpSkillBadge.css';\n\nconst skillLabelFontStyle: CSSObject = {\n  fontSize: '1.2em',\n  color: '#ccc'\n};\nconst skillValueFontSizeStyle: CSSObject = {\n  fontSize: '1.2em',\n  fontWeight: 'bold'\n};\nconst skillLabelStyle: CSSObject = {\n  ...skillLabelFontStyle,\n  display: 'inline-block',\n  width: '4em'\n};\nconst skillBadgeStyle: CSSObject = {\n  fontSize: '1.2em'\n};\n\nconst NestedContainer: React.FC<{ css?: Interpolation<Theme>, children: ReactNode }> = ({ children, ...rest }) => (\n  <Container\n    {...rest}\n    fluid\n    css={{ padding: 0 }}\n  >\n    {children}\n  </Container>\n);\n\nconst SkillNameView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const name = useSkillName(skillType, unit);\n\n  return (\n    <div\n      css={{\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n      }}\n      title={name}\n    >\n      {name}\n    </div>\n  );\n};\n\nconst SkillCostView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const cost = useSkillCost(skillType, unit);\n\n  return (<span css={{ ...skillValueFontSizeStyle, color: '#0af' }}>{cost}</span>);\n};\n\nconst SkillRangeView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const range = useSkillRange(skillType, unit);\n\n  return (<span css={{ ...skillValueFontSizeStyle, color: '#cc0' }}>{range}</span>);\n};\n\nconst RankUpSkillBadge: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const isRankUpSkill = useRankUpSkillBadge(skillType, unit);\n\n  return (\n    ifTruthy(\n      isRankUpSkill,\n      (<div css={skillBadgeStyle}><Badge variant=\"rank-up-skill\">{t('skill.rank_up')}</Badge></div>)\n    )\n  );\n};\n\nconst FormChangeSkillBadge: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const form = useFormChangeSkillBadge(skillType, unit);\n\n  return (\n    ifNonNullable(\n      form,\n      v => (<div css={skillBadgeStyle}><Badge variant=\"secondary\">{t(`effect:form.${v}`)}</Badge></div>)\n    )\n  );\n};\n\nconst skillLvItems = [...Array(10)].map((v, i) => 10 - i) as ReadonlyArray<SkillLv>;\n\nconst SkillLvDropdown: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const [skillLv, setSkillLv] = useSkillLvState(skillType, unit);\n\n  return (\n    <div css={{\n      display: 'flex',\n      userSelect: 'none'\n    }}>\n      <span css={{ marginRight: 5 }}>{t('lv')}</span>\n      <NumberValueDropdown\n        css={{ flexShrink: 0 }}\n        id=\"skill-lv-dropdown\"\n        items={skillLvItems}\n        value={skillLv}\n        onChange={setSkillLv}\n      />\n    </div>\n  );\n};\n\nconst SkillPane: React.FC<{ eventKey: SkillType }> = ({ eventKey }) => {\n  const { t } = useTranslation();\n  const selectedUnit = useSelectedUnit();\n\n  return (\n    <Tab.Pane eventKey={eventKey}>\n      {ifNonNullable(\n        selectedUnit,\n        unit => (\n          <Container\n            fluid\n            css={{ paddingTop: 5 }}\n          >\n            <Row css={{ fontSize: '1.4em', color: '#eee' }}>\n              <Col xs={8} sm={9}>\n                <SkillNameView skillType={eventKey} unit={unit} />\n              </Col>\n              <Col xs={4} sm={3}>\n                <SkillLvDropdown skillType={eventKey} unit={unit} />\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={{ order: 'last', span: 12 }} sm={{ order: 'first', span: 9 }}>\n                <DamageDealView skillType={eventKey} unit={unit} />\n                <EffectsAsEquipmentDescriptionView skillType={eventKey} unit={unit} />\n                <SkillEffectsView skillType={eventKey} unit={unit} />\n              </Col>\n              <Col xs={{ order: 'first', span: 12 }} sm={{ order: 'last', span: 3 }}>\n                <NestedContainer css={{ userSelect: 'none' }}>\n                  <Row>\n                    <Col xs={8} sm={12}>\n                      <NestedContainer>\n                        <Row css={{ '& > div': { marginTop: 5 } }}>\n                          <Col xs={{ order: 1, span: 12 }} sm={{ order: 2, span: 12 }}>\n                            <span css={skillLabelStyle}>{t('skill.ap')}</span>\n                            <SkillCostView skillType={eventKey} unit={unit} />\n                          </Col>\n                          <Col xs={{ order: 2, span: 12 }} sm={{ order: 3, span: 12 }}>\n                            <span css={skillLabelStyle}>{t('skill.range')}</span>\n                            <SkillRangeView skillType={eventKey} unit={unit} />\n                          </Col>\n                          <Col xs={{ order: 3, span: 12 }} sm={{ order: 1, span: 12 }}>\n                            <FormChangeSkillBadge skillType={eventKey} unit={unit} />\n                            <RankUpSkillBadge skillType={eventKey} unit={unit} />\n                          </Col>\n                        </Row>\n                      </NestedContainer>\n                    </Col>\n                    <Col xs={4} sm={12} css={{ '& > div': { marginTop: 5 } }}>\n                      <div>\n                        <span css={{ color: '#ccc' }}>{t('skill.area')}</span>\n                      </div>\n                      <AreaOfEffectGrid css={{ width: 100 }} skillType={eventKey} unit={unit} />\n                    </Col>\n                  </Row>\n                </NestedContainer>\n              </Col>\n            </Row>\n          </Container>\n        )\n      )}\n    </Tab.Pane>\n  );\n};\n\nexport default SkillPane;\n"],"sourceRoot":""}