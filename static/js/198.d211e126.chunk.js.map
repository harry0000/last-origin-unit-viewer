{"version":3,"file":"static/js/198.d211e126.chunk.js","mappings":"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","sources":["component/status/SlotUnavailableOverlay.tsx","component/status/equipment/EquipmentItemView.tsx","component/status/equipment/EquipmentPlaceholder.tsx","component/status/equipment/EquipmentRankToggleButton.tsx","state/equipment/availableEquipment.ts","component/status/equipment/EquipmentSelector.tsx"],"sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport SVGIcon from '../icon/SVGIcon';\nimport { LockClosed } from '../icon/FluentIcons';\n\nimport { CoreLinkSlotAvailableLv } from '../../domain/UnitCoreLink';\nimport { EquipmentSlotAvailableLv } from '../../domain/equipment/UnitEquipment';\n\nimport { ifTruthy } from '../../util/react';\n\nconst SlotUnavailableOverlay: React.FC<{\n  show: boolean,\n  availableLv: CoreLinkSlotAvailableLv | EquipmentSlotAvailableLv\n}> = React.memo(({ show, availableLv }) => {\n  const { t } = useTranslation();\n\n  return (\n    ifTruthy(\n      show,\n      (<span\n        css={{\n          display: 'inline-flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          position: 'absolute',\n          inset: 0,\n          backgroundColor: 'rgba(0, 0, 0, 0.75)'\n        }}>\n        <SVGIcon css={{ height: 24, width: 24 }}>\n          <LockClosed/>\n        </SVGIcon>\n        <span css={{ color: '#ccc', fontWeight: 'bold' }}>\n          {t('lv')}&nbsp;{availableLv}\n        </span>\n      </span>)\n    )\n  );\n});\n\nexport default SlotUnavailableOverlay;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Image } from 'react-bootstrap';\n\nimport { EquipmentEnhancementLevel, EquipmentId, EquipmentRank, EquipmentType } from '../../../domain/equipment/EquipmentData';\n\nconst EquipmentItemView: React.FC<{\n  equipmentId: EquipmentId,\n  equipmentType: EquipmentType,\n  equipmentRank: EquipmentRank,\n  enhancementLv: EquipmentEnhancementLevel\n}> = ({ equipmentId, equipmentType, equipmentRank, enhancementLv }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span css={{ position: 'relative', display: 'inline-block' }}>\n      <Image\n        fluid\n        rounded\n        draggable=\"false\"\n        sizes=\"(max-width: 480px) 47px, (min-width: 480px) 62px\"\n        alt={t(`equipment:${equipmentId}`)}\n        src={`${process.env.PUBLIC_URL}/equip_icon/${equipmentType}_${equipmentId}_${equipmentRank}.webp`}\n      />\n      <Image\n        draggable=\"false\"\n        css={{ position: 'absolute', top: -10, left: -5 }}\n        height={28}\n        width={28}\n        alt={`${t(`equipment:rank.${equipmentRank}`)} ${t(`equipment:type.${equipmentType}`)}`}\n        src={`${process.env.PUBLIC_URL}/icon/${equipmentType}_${equipmentRank}.webp`}\n      />\n      <span\n        css={{\n          position: 'absolute',\n          top: -5,\n          right: 0,\n          color: '#fff',\n          fontSize: '0.9em',\n          fontWeight: 'bold',\n          textShadow: [\n            '1px 1px 0px #000, -1px -1px 0px #000',\n            '-1px 1px 0px #000,  1px -1px 0px #000',\n            '1px 0px 0px #000, -1px  0px 0px #000',\n            '0px 1px 0px #000,  0px -1px 0px #000'\n          ].join()\n        }}\n      >\n        +{enhancementLv}\n      </span>\n    </span>\n  );\n};\n\nexport default EquipmentItemView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Image } from 'react-bootstrap';\n\nimport { EquipmentType } from '../../../domain/equipment/EquipmentData';\n\nconst EquipmentPlaceholder: React.FC<{ type: EquipmentType }> = React.memo(({ type }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span\n      css={{\n        display: 'inline-flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        opacity: 0.5\n      }}\n    >\n      <Image\n        rounded\n        draggable=\"false\"\n        height={32}\n        width={32}\n        alt={t(`equipment:type.${type}`)}\n        src={`${process.env.PUBLIC_URL}/icon/placeholder_${type}.webp`}\n      />\n    </span>\n  );\n});\n\nexport default EquipmentPlaceholder;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap';\n\nimport { EquipmentSlotRank } from '../../../state/equipment/UnitEquipmentState';\nimport { useEquipmentRankSelector } from '../../../state/equipment/UnitEquipmentHook';\n\nimport './EquipmentRankToggleButton.css';\n\ntype EquipmentRankToggleButtonProps =\n  { slot: 'chip1', rank: EquipmentSlotRank<'chip1'> } |\n  { slot: 'chip2', rank: EquipmentSlotRank<'chip2'> } |\n  { slot: 'os',    rank: EquipmentSlotRank<'os'> } |\n  { slot: 'gear',  rank: EquipmentSlotRank<'gear'> }\n\nconst EquipmentRankToggleButton: React.FC<EquipmentRankToggleButtonProps> = ({ slot, rank }) => {\n  const { t } = useTranslation();\n  const [selected, select] = useEquipmentRankSelector(slot, rank);\n\n  return (\n    <ButtonGroup toggle>\n      <ToggleButton\n        type='checkbox'\n        variant=\"equipment-rank\"\n        className={rank}\n        value={1}\n        checked={selected}\n        onChange={select}\n      >\n        {t(`equipment.rank.${rank}`)}\n      </ToggleButton>\n    </ButtonGroup>\n  );\n};\n\nexport default EquipmentRankToggleButton;\n","import { selectorFamily, useRecoilValue } from 'recoil';\n\nimport {\n  availableRank,\n  Chip,\n  EquipmentData,\n  EquipmentRank,\n  Gear,\n  isChipEquipment,\n  isGearEquipment,\n  isOsEquipment,\n  matchExclusive,\n  Os\n} from '../../domain/equipment/EquipmentData';\nimport { UnitBasicInfo, UnitNumber } from '../../domain/UnitBasicInfo';\n\nimport { equipmentData } from '../../data/equipmentData';\n\nimport { EquipmentSlot, selectedEquipmentRankState } from './UnitEquipmentState';\n\nfunction pickEquipment(unit: UnitNumber, rank: EquipmentRank) {\n  return function<T extends EquipmentData>(equipment: T) {\n    return matchExclusive(unit, equipment) && availableRank(equipment, rank);\n  };\n}\n\nconst chipEquipment = Object.values(equipmentData).filter(isChipEquipment);\nconst osEquipment   = Object.values(equipmentData).filter(isOsEquipment);\nconst gearEquipment = Object.values(equipmentData).filter(isGearEquipment);\n\nconst availableChipEquipmentState = selectorFamily<ReadonlyArray<Chip>, [unit: UnitNumber, slot: 'chip1' | 'chip2']>({\n  key: 'availableChipEquipmentState',\n  get: ([unit, slot]) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState(slot));\n    return chipEquipment.filter(pickEquipment(unit, rank));\n  }\n});\n\nconst availableOsEquipmentState = selectorFamily<ReadonlyArray<Os>, UnitNumber>({\n  key: 'availableOsEquipmentState',\n  get: (unit) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState('os'));\n    return osEquipment.filter(pickEquipment(unit, rank));\n  }\n});\n\nconst availableGearEquipmentState = selectorFamily<ReadonlyArray<Gear>, UnitNumber>({\n  key: 'availableGearEquipmentState',\n  get: (unit) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState('gear'));\n    return gearEquipment.filter(pickEquipment(unit, rank));\n  }\n});\n\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'chip1' | 'chip2'): ReadonlyArray<Chip>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'os'): ReadonlyArray<Os>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'gear'): ReadonlyArray<Gear>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: EquipmentSlot): ReadonlyArray<Chip | Os | Gear> {\n  switch (slot) {\n  case 'chip1':\n  case 'chip2':\n    return useRecoilValue(availableChipEquipmentState([unit.no, slot]));\n  case 'os':\n    return useRecoilValue(availableOsEquipmentState(unit.no));\n  case 'gear':\n    return useRecoilValue(availableGearEquipmentState(unit.no));\n  }\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { MouseEventHandler, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Badge, Dropdown, Image } from 'react-bootstrap';\nimport EquipmentItemView from './EquipmentItemView';\nimport EquipmentPlaceholder from './EquipmentPlaceholder';\nimport EquipmentRankToggleButton from './EquipmentRankToggleButton';\nimport RoundedToggleButton from '../../common/RoundedToggleButton';\nimport SlotUnavailableOverlay from '../SlotUnavailableOverlay';\n\nimport {\n  Chip,\n  ChipEquipmentRanks,\n  EquipmentEnhancementLevel,\n  EquipmentId,\n  EquipmentType,\n  Gear,\n  GearEquipmentRanks,\n  Os,\n  OsEquipmentRanks\n} from '../../../domain/equipment/EquipmentData';\nimport { ChipEquipment, GearEquipment, OsEquipment } from '../../../domain/equipment/UnitEquipment';\nimport { UnitBasicInfo, UnitNumber } from '../../../domain/UnitBasicInfo';\n\nimport { EquipmentSlot } from '../../../state/equipment/UnitEquipmentState';\nimport {\n  useEquipmentAvailable,\n  useEquipmentEffects,\n  useEquipmentEffectsAsSkill,\n  useEquipmentEnhanceLvSelector,\n  useEquipmentRank,\n  useEquipmentStatusEffects,\n  useUnitEquipment\n} from '../../../state/equipment/UnitEquipmentHook';\nimport {\n  TranslatedEquipmentEffect,\n  TranslatedEquipmentEffectAsSkill\n} from '../../../state/equipment/EquipmentEffectsTranslator';\nimport { useAvailableEquipment } from '../../../state/equipment/availableEquipment';\nimport { useSelectedUnit } from '../../../state/selector/UnitSelectorHook';\n\nimport { ifNonNullable } from '../../../util/react';\n\nimport './EquipmentSelector.css';\n\ntype SlotEquipment<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? Chip :\n  S extends 'os' ? Os :\n  S extends 'gear' ? Gear :\n    never\n\ntype SlotEquipmentType<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? typeof EquipmentType.Chip :\n  S extends 'os' ? typeof EquipmentType.Os :\n  S extends 'gear' ? typeof EquipmentType.Gear :\n    never\n\ntype CurrentEquipment<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? ChipEquipment :\n  S extends 'os' ? OsEquipment :\n  S extends 'gear' ? GearEquipment :\n    never\n\ntype Props<S extends EquipmentSlot> = {\n  unit: UnitBasicInfo,\n  id: string,\n  slot: S,\n  type: SlotEquipmentType<S>,\n  value?: CurrentEquipment<S>,\n  items: ReadonlyArray<SlotEquipment<S>>,\n  onSelect: (equipment: SlotEquipment<S> | undefined) => void\n}\n\nconst EffectTypeHeader: React.FC<{ children: string }> = ({ children }) => {\n  return (<div className=\"header\">{children}</div>);\n};\n\nconst EquipmentEnhancementLvSelector: React.FC<{ slot: EquipmentSlot, unit: UnitNumber }> = ({ slot, unit }) => {\n  const SelectorButton = ({ enhanceLv }: { enhanceLv: EquipmentEnhancementLevel }) => {\n    const [selected, select] = useEquipmentEnhanceLvSelector(slot, unit, enhanceLv);\n\n    return (<RoundedToggleButton selected={selected} onChange={select}>+&nbsp;{enhanceLv}</RoundedToggleButton>);\n  };\n\n  return (\n    <div className=\"equipment-enhancement\">\n      {([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] as const).map(n => (\n        <SelectorButton key={n} enhanceLv={n} />\n      ))}\n    </div>\n  );\n};\n\nconst EquipmentRankSelector: React.FC<{ slot: EquipmentSlot }> = ({ slot }) => {\n  const rankToggleButtons = () => {\n    switch (slot) {\n    case 'chip1':\n    case 'chip2':\n      return ChipEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    case 'os':\n      return OsEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    case 'gear':\n      return GearEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    }\n  };\n\n  return (\n    <div className=\"equipment-rank\">\n      {rankToggleButtons()}\n    </div>\n  );\n};\n\nconst EquipmentStatusEffects: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentStatusEffects(slot, equipment);\n\n  return (\n    <div className=\"status-effects\">\n      <EffectTypeHeader>{t('status.equipment_status_effect')}</EffectTypeHeader>\n      <div className=\"details\">{effects}</div>\n    </div>\n  );\n};\n\nconst EffectDetailList: React.FC<{\n  effects: ReadonlyArray<TranslatedEquipmentEffect> | ReadonlyArray<TranslatedEquipmentEffectAsSkill>\n}> = ({ effects }) => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      {effects.map(e => {\n        const { condition, details } = e;\n        return (\n          <div key={JSON.stringify(e)}>\n            {ifNonNullable(condition, cond => (<div className=\"condition\">{cond}</div>))}\n            {\n              'self' in details ?\n                (<React.Fragment>\n                  <Badge variant=\"light\">{t('effect:effect.target.self')}</Badge>\n                  <EffectDetailRows details={details.self} />\n                  {ifNonNullable(\n                    'target' in details ? details.target : undefined,\n                    target => (\n                      <React.Fragment>\n                        <Badge variant=\"light\">{t('effect:effect.target.target')}</Badge>\n                        <EffectDetailRows details={target} />\n                      </React.Fragment>\n                    )\n                  )}\n                </React.Fragment>) :\n                (<EffectDetailRows details={details} />)\n            }\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst EffectDetailRows: React.FC<{\n  details: TranslatedEquipmentEffect['details']\n}> = ({ details }) => {\n  return (\n    <React.Fragment>\n      {details.map(({ detail, term }) => (\n        <div key={detail} className=\"detail\">\n          <div>{detail}</div>\n          {ifNonNullable(term, v => (\n            <div className=\"term\"><span css={{ color: '#aaa', fontSize: '0.9em' }}>{v}</span></div>\n          ))}\n        </div>\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst EquipmentEffects: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentEffects(slot, equipment);\n\n  return ifNonNullable(\n    effects,\n    e => (\n      <div className=\"effects\">\n        <EffectTypeHeader>{t('status.equipment_effect')}</EffectTypeHeader>\n        <EffectDetailList effects={e} />\n      </div>\n    )\n  );\n};\n\nconst EquipmentEffectsAsSkill: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentEffectsAsSkill(slot, equipment);\n\n  return ifNonNullable(\n    effects,\n    e => (\n      <div className=\"effects\">\n        <EffectTypeHeader>{t('status.equipment_effect_as_skill')}</EffectTypeHeader>\n        <EffectDetailList effects={e} />\n      </div>\n    )\n  );\n};\n\nconst EquipmentItem: React.FC<{\n  slot: EquipmentSlot,\n  eventKey: EquipmentId,\n  active: boolean,\n  label: string,\n  src: string\n}> = ({ slot, eventKey, active, label, src, ...rest }) => {\n  return (\n    <Dropdown.Item\n      {...rest}\n      className=\"equipment\"\n      eventKey={eventKey}\n      active={active}\n    >\n      <div className=\"icon\">\n        <Image\n          draggable=\"false\"\n          height={48}\n          width={48}\n          alt={label}\n          src={src}\n        />\n        <span className=\"label\">{label}</span>\n      </div>\n      <div className=\"details\">\n        <EquipmentStatusEffects slot={slot} equipment={eventKey} />\n        <EquipmentEffects slot={slot} equipment={eventKey} />\n        <EquipmentEffectsAsSkill slot={slot} equipment={eventKey} />\n      </div>\n    </Dropdown.Item>\n  );\n};\n\nconst RemoveEquipmentItem: React.FC<{\n  active: boolean,\n  type: SlotEquipmentType<EquipmentSlot>\n}> = ({ active, type, ...rest }) => {\n  const { t } = useTranslation();\n  const label = t('status.remove_equipment');\n\n  return (\n    <Dropdown.Item\n      {...rest}\n      className=\"equipment remove\"\n      active={active}\n    >\n      <div className=\"icon\">\n        <Image\n          draggable=\"false\"\n          height={48}\n          width={48}\n          alt={label}\n          src={`${process.env.PUBLIC_URL}/icon/placeholder_${type}.webp`}\n        />\n      </div>\n      <div className=\"details\">{label}</div>\n    </Dropdown.Item>\n  );\n};\n\nconst EquipmentSelectorMenu = <T extends EquipmentSlot>(\n  { unit, slot, type, value, items, ...rest }: Omit<Props<T>, 'id' | 'onSelect'>\n): ReturnType<React.FC<Omit<Props<T>, 'id' | 'onSelect'>>> => {\n  const { t } = useTranslation();\n  const rank = useEquipmentRank(slot);\n\n  return (\n    <Dropdown.Menu {...rest} className=\"equipment\">\n      <EquipmentEnhancementLvSelector slot={slot} unit={unit.no} />\n      <EquipmentRankSelector slot={slot} />\n      <div className=\"equipment-list\">\n        <RemoveEquipmentItem type={type} active={!value?.id} />\n        {items.map(item => (\n          <EquipmentItem\n            key={item.id}\n            slot={slot}\n            eventKey={item.id}\n            active={item.id === value?.id && rank === value?.rank}\n            label={t(`equipment:${item.id}`)}\n            src={`${process.env.PUBLIC_URL}/equip_icon/${item.type}_${item.id}_${rank}.webp`}\n          />\n        ))}\n      </div>\n    </Dropdown.Menu>\n  );\n};\n\nconst EquipmentSlotUnavailableOverlay: React.FC<{ unit: UnitBasicInfo, slot: EquipmentSlot }> = ({ unit, slot }) => {\n  const [available, availableLv] = useEquipmentAvailable(unit, slot);\n  return (<SlotUnavailableOverlay show={!available} availableLv={availableLv} />);\n};\n\nconst EquipmentToggle = React.forwardRef<\n  HTMLAnchorElement,\n  {\n    onClick: MouseEventHandler<HTMLAnchorElement>,\n    id: string,\n    children: ReactNode\n  }\n>(({ onClick, id, children }, ref) => (\n  <a\n    href=\"\"\n    ref={ref}\n    id={id}\n    onClick={(e) => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n  </a>\n));\n\nconst EquipmentDropdown = <T extends EquipmentSlot>(\n  { id, unit, slot, type, value, onSelect, items }: Props<T>\n): ReturnType<React.FC<Props<T>>> => {\n  return (\n    <Dropdown\n      className=\"slot equipment\"\n      onSelect={(eventKey) => {\n        if (eventKey) {\n          const item = items.find((item: SlotEquipment<T>) => item.id === eventKey);\n          item && onSelect(item);\n        } else {\n          onSelect(undefined);\n        }\n      }}\n    >\n      <Dropdown.Toggle as={EquipmentToggle} id={id}>\n        <span className=\"equipment-toggle-view\">\n          {value ?\n            (<EquipmentItemView\n              equipmentId={value.id}\n              equipmentType={type}\n              equipmentRank={value.rank}\n              enhancementLv={value.enhanceLv}\n            />) :\n            <EquipmentPlaceholder type={type} />}\n          <EquipmentSlotUnavailableOverlay unit={unit} slot={slot} />\n        </span>\n      </Dropdown.Toggle>\n      <EquipmentSelectorMenu unit={unit} slot={slot} type={type} value={value} items={items} />\n    </Dropdown>\n  );\n};\n\nconst Chip1EquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'chip1');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'chip1');\n  return (\n    <EquipmentDropdown\n      id=\"chip1-equipment-dropdown\"\n      unit={unit}\n      slot=\"chip1\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst Chip2EquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'chip2');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'chip2');\n  return (\n    <EquipmentDropdown\n      id=\"chip2-equipment-dropdown\"\n      unit={unit}\n      slot=\"chip2\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst OsEquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'os');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'os');\n  return (\n    <EquipmentDropdown\n      id=\"os-equipment-dropdown\"\n      unit={unit}\n      slot=\"os\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst GearEquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'gear');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'gear');\n  return (\n    <EquipmentDropdown\n      id=\"gear-equipment-dropdown\"\n      unit={unit}\n      slot=\"gear\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst EquipmentSelector: React.FC<{ slot: EquipmentSlot }> = ({ slot }) => {\n  const selected = useSelectedUnit();\n\n  return ifNonNullable(\n    selected,\n    unit => {\n      switch (slot) {\n      case 'chip1': return (<Chip1EquipmentDropdown unit={unit} />);\n      case 'chip2': return (<Chip2EquipmentDropdown unit={unit} />);\n      case 'os':    return (<OsEquipmentDropdown unit={unit} />);\n      case 'gear':  return (<GearEquipmentDropdown unit={unit} />);\n      }\n    }\n  );\n};\n\nexport default EquipmentSelector;\n"],"names":["SlotUnavailableOverlay","React","show","availableLv","t","useTranslation","ifTruthy","css","display","flexDirection","alignItems","justifyContent","position","inset","backgroundColor","height","width","color","fontWeight","equipmentId","equipmentType","equipmentRank","enhancementLv","Image","fluid","rounded","draggable","sizes","alt","src","process","top","left","right","fontSize","textShadow","join","type","opacity","slot","rank","useEquipmentRankSelector","selected","select","ButtonGroup","toggle","ToggleButton","variant","className","value","checked","onChange","pickEquipment","unit","equipment","matchExclusive","availableRank","chipEquipment","Object","values","equipmentData","filter","isChipEquipment","osEquipment","isOsEquipment","gearEquipment","isGearEquipment","availableChipEquipmentState","selectorFamily","key","get","selectedEquipmentRankState","availableOsEquipmentState","availableGearEquipmentState","useAvailableEquipment","useRecoilValue","no","EffectTypeHeader","children","EquipmentEnhancementLvSelector","SelectorButton","enhanceLv","useEquipmentEnhanceLvSelector","RoundedToggleButton","map","n","EquipmentRankSelector","ChipEquipmentRanks","OsEquipmentRanks","GearEquipmentRanks","rankToggleButtons","EquipmentStatusEffects","effects","useEquipmentStatusEffects","EffectDetailList","e","condition","details","JSON","stringify","ifNonNullable","cond","Badge","EffectDetailRows","self","target","undefined","detail","term","v","EquipmentEffects","useEquipmentEffects","EquipmentEffectsAsSkill","useEquipmentEffectsAsSkill","EquipmentItem","eventKey","active","label","rest","Dropdown","RemoveEquipmentItem","EquipmentSelectorMenu","items","useEquipmentRank","id","item","EquipmentSlotUnavailableOverlay","useEquipmentAvailable","available","EquipmentToggle","ref","onClick","href","preventDefault","EquipmentDropdown","onSelect","find","as","Chip1EquipmentDropdown","useUnitEquipment","equip","Chip2EquipmentDropdown","OsEquipmentDropdown","GearEquipmentDropdown","useSelectedUnit"],"sourceRoot":""}