{"version":3,"file":"static/js/43.df51b3d7.chunk.js","mappings":"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","sources":["component/status/corelink/FullLinkBonusDropdown.tsx"],"sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { MouseEventHandler, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Dropdown } from 'react-bootstrap';\n\nimport { UnitBasicInfo } from '../../../domain/UnitBasicInfo';\nimport { FullLinkBonus } from '../../../domain/UnitCoreLinkBonusData';\nimport { calcMicroValue, calcMilliPercentageValue } from '../../../domain/ValueUnit';\n\nimport { useAvailableFullLinkBonus, useFullLinkBonus } from '../../../state/corelink/UnitCoreLinkHook';\n\nimport { ifTruthy } from '../../../util/react';\n\nimport '../dropdown.css';\n\nconst FullLinkBonusLabel: React.FC<{ bonus: FullLinkBonus | undefined }> = ({ bonus }) => {\n  const { t } = useTranslation();\n\n  let label: string;\n  if (!bonus) {\n    label = '\\u00A0';\n  } else if ('sortie_cost' in bonus) {\n    label = t('form.full_link_bonus.sortie_cost', { value: calcMilliPercentageValue(bonus.sortie_cost) });\n  } else if ('damage_multiplier' in bonus) {\n    label = t('form.full_link_bonus.damage_multiplier', { value: calcMilliPercentageValue(bonus.damage_multiplier) });\n  } else if ('buff_debuff_lv_up' in bonus) {\n    label = t('form.full_link_bonus.buff_debuff_lv_up', { value: bonus.buff_debuff_lv_up.value });\n  } else if ('hp_up' in bonus) {\n    label = t('form.full_link_bonus.hp_up', { value: calcMilliPercentageValue(bonus.hp_up) });\n  } else if ('atk_up' in bonus) {\n    label = t('form.full_link_bonus.atk_up', { value: calcMilliPercentageValue(bonus.atk_up) });\n  } else if ('def_up' in bonus) {\n    label = t('form.full_link_bonus.def_up', { value: calcMilliPercentageValue(bonus.def_up) });\n  } else if ('acc_up' in bonus) {\n    label = t('form.full_link_bonus.acc_up', { value: calcMilliPercentageValue(bonus.acc_up) });\n  } else if ('eva_up' in bonus) {\n    label = t('form.full_link_bonus.eva_up', { value: calcMilliPercentageValue(bonus.eva_up) });\n  } else if ('cri_up' in bonus) {\n    label = t('form.full_link_bonus.cri_up', { value: calcMilliPercentageValue(bonus.cri_up) });\n  } else if ('spd_up' in bonus) {\n    label = t('form.full_link_bonus.spd_up', { value: calcMicroValue(bonus.spd_up) });\n  } else {\n    label = t('form.full_link_bonus.range_up', { value: bonus.range_up.value });\n  }\n\n  return (<span>{label}</span>);\n};\n\nconst UnselectBonusItem: React.FC<{ active: boolean }> = ({ active }) => {\n  return (<Dropdown.Item active={active}>&nbsp;</Dropdown.Item>);\n};\n\nconst FullLinkBonusItem: React.FC<{\n  bonus: FullLinkBonus,\n  eventKey: number,\n  active: boolean\n}> = ({ bonus, eventKey, active }) => {\n  return (\n    <Dropdown.Item eventKey={eventKey} active={active}>\n      <FullLinkBonusLabel bonus={bonus}/>\n    </Dropdown.Item>\n  );\n};\n\nconst FullLinkBonusToggle = React.forwardRef<\n  HTMLAnchorElement,\n  {\n    id: string,\n    onClick: MouseEventHandler<HTMLAnchorElement>,\n    available: boolean,\n    children: ReactNode\n  }\n>(({ id, onClick, available, children }, ref) => (\n  <a\n    href=\"\"\n    ref={ref}\n    id={id}\n    onClick={(e) => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n    <span className=\"toggle\" />\n    {ifTruthy(!available, (<span className=\"unavailable\" />))}\n  </a>\n));\n\nconst FullLinkBonusDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableFullLinkBonus(unit);\n  const [selectedBonus, selectBonus, available] = useFullLinkBonus(unit);\n\n  return (\n    <Dropdown\n      className=\"unit-state\"\n      onSelect={eventKey => {\n        selectBonus(eventKey ? items[+eventKey] : undefined);\n      }}\n    >\n      <Dropdown.Toggle as={FullLinkBonusToggle} id=\"full-link-bonus-dropdown\" available={available}>\n        <FullLinkBonusLabel bonus={selectedBonus}/>\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        <UnselectBonusItem active={!selectedBonus}/>\n        {items.map((bonus, i) => (\n          <FullLinkBonusItem\n            key={JSON.stringify(bonus)}\n            bonus={bonus}\n            eventKey={i}\n            active={bonus === selectedBonus}\n          />\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default FullLinkBonusDropdown;\n"],"names":["FullLinkBonusLabel","_ref","label","bonus","t","useTranslation","value","calcMilliPercentageValue","sortie_cost","damage_multiplier","buff_debuff_lv_up","hp_up","atk_up","def_up","acc_up","eva_up","cri_up","calcMicroValue","spd_up","range_up","jsx","UnselectBonusItem","_ref2","active","Dropdown","FullLinkBonusItem","_ref3","eventKey","FullLinkBonusToggle","React","_ref4","ref","id","onClick","available","children","href","e","preventDefault","className","ifTruthy","_ref5","unit","items","useAvailableFullLinkBonus","_useFullLinkBonus","useFullLinkBonus","_useFullLinkBonus2","_slicedToArray","selectedBonus","selectBonus","onSelect","undefined","as","map","i","key","JSON","stringify"],"sourceRoot":""}