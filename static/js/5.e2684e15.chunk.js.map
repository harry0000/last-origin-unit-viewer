{"version":3,"sources":["component/skill/AreaOfEffectGrid.tsx","component/skill/AttributeColorStyle.ts","component/skill/DamageDealView.tsx","component/skill/EffectsAsEquipmentDescriptionView.tsx","domain/UnitAlias.ts","component/skill/UnitAliasView.tsx","component/skill/SkillEffectConditionView.tsx","component/skill/SkillEffectsTranslator.ts","component/skill/SkillEffectDetailsView.tsx","component/skill/SkillEffectsView.tsx","component/skill/SkillPane.tsx"],"names":["cellColorStyle","AreaOfEffectCellType","Effective","High","Middle","Weak","None","overlayStyle","type","borderRadius","position","top","bottom","left","right","opacity","backgroundColor","AreaOfEffectCell","selected","others","t","useTranslation","css","border","width","content","display","marginTop","inset","OverlayTrigger","placement","overlay","Tooltip","id","AreaOfEffectGrid","skillType","unit","cellType","useSkillArea","ifNonNullable","cell","borderCollapse","transform","select","area","color","AttributeColorStyle","DamageAttribute","Fire","Ice","Electric","DamageDealView","props","useDamageDeal","damage_deal","SkillAreaType","Single","effective","margin","fontWeight","calcValue","attribute","EffectsAsEquipmentDescriptionView","show","useEffectsAsEquipmentDescription","ifTruthy","fontSize","cursor","textDecoration","UnitAlias","unitNumbersForAlias","Set","UnitAliasView","unitAlias","exceptUnit","popover","Popover","Content","filter","n","map","key","textAlign","number","isNeedSeparator","array","index","length","unitStateView","selfUnitNumber","value","Fragment","except","alias","target","role","not_alias","typeAndRole","UnitKind","AGS","Bioroid","UnitType","Light","Heavy","Flying","UnitRole","Attacker","Defender","Supporter","EffectActivationState","InSquad","undefined","stateValuesPerTargetView","values","unitNumber","v","i","JSON","stringify","Object","entries","entry","effect","tag","form","greater_or_equal","equipment","equipments","e","join","stateValuesView","StateView","state","statePerTarget","node","SkillEffectConditionRow","condition","trigger","round","at","from","until","buildSkillEffectTriggerView","SkillEffectConditionView","conditions","scale_factor","conds","per_stack","num_of_enemies","arg","exceptSelf","num_of_units","keys","some","getDetail","body","rate","additions","times","count","max_stack","cannot_be_dispelled","s","getTerm","term","for_rounds","getTag","translateMilliPercentageDetail","detail","translateTagStackDetail","EffectDetailRow","padding","marginLeft","flexShrink","EffectDetail","details","Effect","MinimizeDamage","NullifyDamage","AllBuffRemoval","AllDebuffRemoval","ColumnProtect","RowProtect","TargetProtect","ReAttack","FollowUpAttack","IgnoreBarrierDr","IgnoreDr","IgnoreProtect","Reconnaissance","Marked","Provoked","Immovable","Silenced","Stunned","RefundAp","AttackCritical","CounterattackCritical","DeployDefensiveWall","AMG11Construction","DeployRabbitDField","SummonHologramTiger","GoldenFactoryConstruction","CooperativeAttack","active","isFormChangeUnitNumber","no","UnitForms","default","Push","Pull","RangeUp","RangeDown","FixedDamageOverTime","FixedFireDamageOverTime","FixedIceDamageOverTime","FixedElectricDamageOverTime","Barrier","BattleContinuation","ApUp","ApDown","SetAp","EffectRemoval","effects","PreventsEffect","ActivationRatePercentageUp","FormChange","FormRelease","TagStack","TagRelease","TagUnstack","DefDown","AccDown","CriDown","EvaUp","StatusResistUp","translateSkillEffectDetails","SkillEffectDetailsView","className","targetKey","Badge","variant","SkillEffectView","self","around","SkillEffectsView","useSkillEffects","skillValueFontSizeStyle","skillLabelStyle","skillBadgeStyle","NestedContainer","children","Container","fluid","SkillNameView","name","useSkillName","textOverflow","overflow","whiteSpace","title","SkillCostView","cost","useSkillCost","SkillRangeView","range","useSkillRange","RankUpSkillBadge","isRankUpSkill","useRankUpSkillBadge","FormChangeSkillBadge","useFormChangeSkillBadge","skillLvItems","Array","SkillLvDropdown","useSkillLvState","skillLv","setSkillLv","userSelect","marginRight","NumberValueDropdown","items","onChange","SkillPane","eventKey","selectedUnit","useSelectedUnit","Tab","Pane","paddingTop","Row","Col","xs","sm","order","span"],"mappings":"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","file":"static/js/5.e2684e15.chunk.js","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { CSSObject, Theme, jsx } from '@emotion/react';\nimport React from 'react';\nimport { Interpolation } from '@emotion/serialize';\nimport { useTranslation } from 'react-i18next';\n\nimport { AreaOfEffectCellType } from './AreaOfEffectCellType';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport { SkillType, useSkillArea } from '../../state/skill/unitSkillState';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst cellColorStyle: { [key in AreaOfEffectCellType]: string } = {\n  [AreaOfEffectCellType.Effective]: '#d0191d',\n  [AreaOfEffectCellType.High]:      '#ff8f03',\n  [AreaOfEffectCellType.Middle]:    '#ba5a03',\n  [AreaOfEffectCellType.Weak]:      '#763316',\n  [AreaOfEffectCellType.None]:      '#4b4b4d'\n} as const;\n\nconst overlayStyle: (type: AreaOfEffectCellType) => CSSObject = (type) =>\n  type !== AreaOfEffectCellType.None ?\n    {\n      borderRadius: 2,\n      position: 'absolute',\n      top: -3,\n      bottom: 4,\n      left: -3,\n      right: 4,\n      opacity: 0.8,\n      backgroundColor: cellColorStyle[type]\n    } :\n    {};\n\nconst AreaOfEffectCell: React.FC<{ selected: boolean, type: AreaOfEffectCellType }> = ({ selected, type, ...others }) => {\n  const { t } = useTranslation();\n\n  return (\n    <td\n      css={{\n        border: '5px solid transparent',\n        width: '33%',\n        position: 'relative',\n        '&::after': {\n          content: '\" \"',\n          display: 'block',\n          marginTop: '100%'\n        }\n      }}\n    >\n      <div\n        css={{\n          borderRadius: 2,\n          position: 'absolute',\n          inset: 0,\n          backgroundColor: selected ? '#16d4d4' : cellColorStyle[AreaOfEffectCellType.None]\n        }}\n      />\n      {\n        type === AreaOfEffectCellType.High ||\n        type === AreaOfEffectCellType.Middle ||\n        type === AreaOfEffectCellType.Weak ?\n          (<OverlayTrigger\n            {...others}\n            placement='auto'\n            overlay={<Tooltip id='tooltip-aoe-cell'>{t(`skill.effective_rate.${type}`)}</Tooltip>}\n          >\n            <div css={overlayStyle(type)} />\n          </OverlayTrigger>) :\n          <div css={overlayStyle(type)} />\n      }\n    </td>\n  );\n};\n\nconst AreaOfEffectGrid: React.FC<{\n  css?: Interpolation<Theme>,\n  skillType: SkillType,\n  unit: UnitBasicInfo\n}> = ({ skillType, unit, ...others }) => {\n  const { t } = useTranslation();\n  const cellType = useSkillArea(skillType, unit);\n\n  return (\n    ifNonNullable(\n      cellType,\n      cell => (\n        <div {...others}>\n          <table\n            css={{\n              borderCollapse: 'collapse',\n              width: '100%',\n              transform: 'skewX(-9deg)'\n            }}>\n            <tbody>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 7} type={cell.area[0]} />\n                <AreaOfEffectCell selected={cell.select === 8} type={cell.area[1]} />\n                <AreaOfEffectCell selected={cell.select === 9} type={cell.area[2]} />\n              </tr>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 4} type={cell.area[3]} />\n                <AreaOfEffectCell selected={cell.select === 5} type={cell.area[4]} />\n                <AreaOfEffectCell selected={cell.select === 6} type={cell.area[5]} />\n              </tr>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 1} type={cell.area[6]} />\n                <AreaOfEffectCell selected={cell.select === 2} type={cell.area[7]} />\n                <AreaOfEffectCell selected={cell.select === 3} type={cell.area[8]} />\n              </tr>\n            </tbody>\n          </table>\n          {(<span css={{ color: '#16d4d4' }}>{!cell.select ? t('skill.fixed_area') : '\\u00A0'}</span>)}\n        </div>\n      )\n    )\n  );\n};\n\nexport default AreaOfEffectGrid;\n","import { DamageAttribute } from '../../domain/skill/UnitSkillData';\n\nexport const AttributeColorStyle: { [key in DamageAttribute]: string } = {\n  [DamageAttribute.Fire]: '#c33',\n  [DamageAttribute.Ice]: '#0cf',\n  [DamageAttribute.Electric]: '#fc0'\n};\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\nimport { calcValue } from '../../domain/ValueUnit';\n\nimport { AttributeColorStyle } from './AttributeColorStyle';\n\nimport { SkillType, useDamageDeal } from '../../state/skill/unitSkillState';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst DamageDealView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const props = useDamageDeal(skillType, unit);\n  if (!props[0]) {\n    return null;\n  }\n\n  const [damage_deal, area] = props;\n\n  return (\n    <div css={{ color: '#ccc', marginTop: 10 }}>\n      <span>\n        {area === SkillAreaType.Single ?\n          t('effect:damage_deal.target.single') :\n          t('effect:damage_deal.target.area')}\n      </span>\n      {ifNonNullable(\n        damage_deal.effective,\n        effective => (<span>{t(`effect:effective.${effective}`)}{t('effect:separator')}</span>)\n      )}\n      <span>{t('status.atk')}</span>\n      <span css={{ margin: '0 5px', color: '#fc0', fontWeight: 'bold' }}>\n        {calcValue(damage_deal)}%\n      </span>\n      <span>{t('effect:as_preposition')}</span>\n      {ifNonNullable(\n        damage_deal.attribute,\n        attribute => (\n          <span css={{ margin: '0 5px', color: AttributeColorStyle[attribute], fontWeight: 600 }}>\n            {t(`effect:attribute.${attribute}`)}\n          </span>\n        )\n      )}\n      <span>{t('effect:damage')}</span>\n    </div>\n  );\n};\n\nexport default DamageDealView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\n\nimport { SkillType, useEffectsAsEquipmentDescription } from '../../state/skill/unitSkillState';\n\nimport { ifTruthy } from '../../util/react';\n\nconst EffectsAsEquipmentDescriptionView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const show = useEffectsAsEquipmentDescription(skillType, unit);\n\n  return (\n    ifTruthy(\n      show,\n      (<div css={{\n        color: '#ccc',\n        fontSize: '0.9em',\n        marginTop: 10\n      }}>\n        <span>{t('effect:effects_as_equipment.description.prefix')}</span>\n        <OverlayTrigger\n          placement='auto'\n          overlay={<Tooltip id='tooltip-effects-as-equipment'>{t('effect:effects_as_equipment.annotation')}</Tooltip>}\n        >\n          <span css={{ cursor: 'help', textDecoration: 'underline' }}>\n            {t('effect:effects_as_equipment.description.as_equipment')}\n          </span>\n        </OverlayTrigger>\n        <span>{t('effect:effects_as_equipment.description.suffix')}</span>\n      </div>)\n    )\n  );\n};\n\nexport default EffectsAsEquipmentDescriptionView;\n","import { UnitNumber } from './UnitBasicInfo';\n\nexport const UnitAlias = {\n  ElectricActive: 'electric_active',\n  ArtilleryTypeActive: 'artillery_type_active',\n  Squad21: 'squad_21',\n  CompanionSeries: 'companion_series',\n  SteelLine: 'steel_line',\n  SistersOfValhalla: 'sisters_of_valhalla',\n  AngerOfHorde: 'anger_of_horde',\n  DoomBringer: 'doom_bringer',\n  AACannonier: 'aa_cannonier',\n  ArmoredMaiden: 'armored_maiden',\n  MongooseTeam: 'mongoose_team',\n  Horizon: 'horizon',\n  TomosFriends: 'tomos_friends',\n  CityGuard: 'city_guard',\n  MagicalGirl: 'magical_girl',\n  SpartanSeries: 'spartan_series'\n} as const;\nexport type UnitAlias = typeof UnitAlias[keyof typeof UnitAlias]\n\nexport const unitNumbersForAlias: { [key in UnitAlias]: ReadonlySet<UnitNumber> } = {\n  [UnitAlias.ElectricActive]: new Set([6, 11, 75, 84, 113, 115, 132, 174, 179, 201, 221]),\n  [UnitAlias.ArtilleryTypeActive]: new Set([22, 51, 202]),\n  [UnitAlias.Squad21]: new Set([2, 3, 85, 92, 118, 121, 187]),\n  [UnitAlias.CompanionSeries]: new Set([16, 17, 18, 19, 183]),\n  [UnitAlias.SteelLine]: new Set([21, 22, 23, 24, 25, 26, 27, 28, 29]),\n  [UnitAlias.SistersOfValhalla]: new Set([31, 32, 33, 34, 35, 36, 37, 177]),\n  [UnitAlias.AngerOfHorde]: new Set([41, 42, 43, 44]),\n  [UnitAlias.DoomBringer]: new Set([51, 52, 53, 54, 55, 56, 182]),\n  [UnitAlias.AACannonier]: new Set([60, 67, 68, 69, 70]),\n  [UnitAlias.ArmoredMaiden]: new Set([61, 62, 65, 66]),\n  [UnitAlias.MongooseTeam]: new Set([80, 81, 82, 83, 84]),\n  [UnitAlias.Horizon]: new Set([85, 87, 88, 89, 90]),\n  [UnitAlias.TomosFriends]: new Set([25, 43, 81, 125]),\n  [UnitAlias.CityGuard]: new Set([111, 112, 113, 114, 115, 179, 184]),\n  [UnitAlias.MagicalGirl]: new Set([123, 127]),\n  [UnitAlias.SpartanSeries]: new Set([215, 216, 217])\n} as const;\n\nexport function isUnitAlias(arg: string): arg is UnitAlias {\n  return Object.keys(unitNumbersForAlias).some(alias => alias === arg);\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\n\nimport { UnitAlias, unitNumbersForAlias } from '../../domain/UnitAlias';\nimport { UnitNumber } from '../../domain/UnitBasicInfo';\n\nconst UnitAliasView: React.FC<{\n  unitAlias: UnitAlias,\n  exceptUnit?: UnitNumber\n}> = ({ unitAlias, exceptUnit }) => {\n  const { t } = useTranslation();\n  const popover = (\n    <Popover id=\"popover-unit-alias\" css={{ opacity: '0.9' }}>\n      <Popover.Content>\n        {[...unitNumbersForAlias[unitAlias]]\n          .filter(n => n !== exceptUnit)\n          .map(n => (<div key={n} css={{ textAlign: 'left' }}>{t('unit:display', { number: n })}</div>))}\n      </Popover.Content>\n    </Popover>\n  );\n\n  return (\n    <OverlayTrigger\n      placement='auto'\n      overlay={popover}\n    >\n      <span css={{ cursor: 'help', textDecoration: 'underline' }}>\n        {t(`effect:unit.${unitAlias}`)}\n      </span>\n    </OverlayTrigger>\n  );\n};\n\nexport default UnitAliasView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { ReactElement, ReactNode } from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\n\nimport UnitAliasView from './UnitAliasView';\n\nimport {\n  ActivationSelfState,\n  ActivationSquadState,\n  ActivationTargetState,\n  SkillEffectActivationCondition,\n  SkillEffectActivationState,\n  UnitAliasAndRole,\n  UnitAliasAndType,\n  UnitAliasExceptUnit,\n  UnitTypeAndRole\n} from '../../domain/skill/SkillEffectActivationCondition';\nimport { EffectActivationState } from '../../domain/EffectActivationState';\nimport { SkillEffect } from '../../domain/skill/UnitSkills';\nimport { isUnitAlias, UnitAlias } from '../../domain/UnitAlias';\nimport { UnitKind, UnitNumber, UnitRole, UnitType } from '../../domain/UnitBasicInfo';\n\nimport { NonNullableEntry } from '../../util/object';\nimport { ifNonNullable, ifTruthy } from '../../util/react';\n\ntype SkillEffectActivationStateValues =\n  ReadonlyArray<ActivationSelfState> |\n  ReadonlyArray<ActivationTargetState> |\n  ReadonlyArray<ActivationSquadState>\n\ntype StateValuesEntry =\n  NonNullableEntry<keyof ActivationSelfState, ActivationSelfState> |\n  NonNullableEntry<keyof ActivationTargetState, ActivationTargetState> |\n  NonNullableEntry<keyof ActivationSquadState, ActivationSquadState>\n\nfunction isNeedSeparator(array: ReadonlyArray<unknown>, index: number): boolean {\n  return array.length > 1 && index + 1 < array.length;\n}\n\nfunction stateValuesView(entry: StateValuesEntry, unitNumber: UnitNumber, t: TFunction): ReactNode {\n  switch (entry[0]) {\n  case 'hp_greater_or_equal':\n  case 'hp_less_or_equal':\n  case 'hp_greater_than':\n  case 'hp_less_than':\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { value: entry[1] })}</span>);\n  case 'effected':\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { effect: entry[1] })}</span>);\n  case 'tagged':\n  case 'not_tagged':\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { tag: entry[1] })}</span>);\n  case 'stack_ge':\n    if ('effect' in entry[1]) {\n      return t(\n        'effect:condition.state.tag_effect_stack_ge',\n        {\n          tag: entry[1].tag,\n          effect: entry[1].effect,\n          value: entry[1].value\n        }\n      );\n    } else {\n      return t(\n        'effect:condition.state.tag_stack_ge',\n        { tag: entry[1].tag, value: entry[1].value }\n      );\n    }\n  case 'form':\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { form: entry[1] })}</span>);\n  case 'unit':\n    return unitStateView(entry[0], entry[1], unitNumber, t);\n  case 'num_of_units': {\n    const { unit, greater_or_equal } = entry[1];\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { unit, greater_or_equal })}</span>);\n  }\n  case 'in_squad':\n    return unitStateView(entry[0], entry[1], unitNumber, t);\n  case 'effected_by':\n    return unitStateView(entry[0], entry[1], unitNumber, t);\n  case 'equipped': {\n    const equipment = t(`equipment:${entry[1]}`);\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { equipment })}</span>);\n  }\n  case 'not_equipped': {\n    const equipments = entry[1].map(e => `${t('effect:quote')}${t(`equipment:${e}`)}${t('effect:unquote')}`).join('');\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { equipments })}</span>);\n  }\n  case 'protected':\n  case 'in_front_line':\n  case 'in_mid_line':\n  case 'in_back_line':\n    return (<span>{t(`effect:condition.state.${entry[0]}`)}</span>);\n  default: {\n    const _exhaustiveCheck: never = entry;\n    return _exhaustiveCheck;\n  }\n  }\n}\n\nfunction unitStateView(key: typeof EffectActivationState.Unit, unit: UnitKind | UnitType | UnitRole | UnitTypeAndRole | UnitAliasAndType | UnitAliasAndRole | UnitAliasExceptUnit | UnitNumber | UnitAlias, selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(key: typeof EffectActivationState.EffectedBy, unit: UnitNumber | UnitAlias | UnitAliasExceptUnit, selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(key: typeof EffectActivationState.InSquad, unit: UnitNumber | typeof UnitAlias.ElectricActive | typeof UnitAlias.Horizon | 'golden_factory', selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(\n  key: typeof EffectActivationState['InSquad' | 'Unit' | 'EffectedBy'],\n  unit: UnitNumber | UnitKind | UnitType | UnitRole | UnitTypeAndRole | UnitAliasAndType | UnitAliasAndRole | UnitAliasExceptUnit | UnitAlias | 'golden_factory',\n  selfUnitNumber: UnitNumber,\n  t: TFunction\n): Exclude<ReactNode, undefined> {\n  if (typeof unit === 'number') {\n    return (\n      <span>\n        {t(\n          `effect:condition.state.${key}`,\n          { unit: t('effect:with_quotes', { value: t('unit:display', { number: unit }) }) }\n        )}\n      </span>\n    );\n  } else if (typeof unit === 'string') {\n    switch (unit) {\n    case UnitKind.AGS:\n    case UnitKind.Bioroid:\n    case UnitType.Light:\n    case UnitType.Heavy:\n    case UnitType.Flying:\n    case UnitRole.Attacker:\n    case UnitRole.Defender:\n    case UnitRole.Supporter:\n    case 'golden_factory':\n      return (\n        <span>\n          {t(`effect:condition.state.${key}`, { unit: t(`effect:unit.${unit}`) })}\n        </span>\n      );\n    case UnitAlias.ElectricActive:\n    case UnitAlias.ArtilleryTypeActive:\n    case UnitAlias.Squad21:\n    case UnitAlias.CompanionSeries:\n    case UnitAlias.SteelLine:\n    case UnitAlias.SistersOfValhalla:\n    case UnitAlias.AngerOfHorde:\n    case UnitAlias.DoomBringer:\n    case UnitAlias.AACannonier:\n    case UnitAlias.ArmoredMaiden:\n    case UnitAlias.MongooseTeam:\n    case UnitAlias.Horizon:\n    case UnitAlias.TomosFriends:\n    case UnitAlias.CityGuard:\n    case UnitAlias.MagicalGirl:\n    case UnitAlias.SpartanSeries:\n      // TODO: Move to excepting logic from view.\n      return (\n        <React.Fragment>\n          {ifTruthy(key === EffectActivationState.InSquad, (<span>{t('effect:unit.self')}{t('effect:except_preposition')}</span>))}\n          <UnitAliasView unitAlias={unit} exceptUnit={key === EffectActivationState.InSquad ? selfUnitNumber : undefined} />\n          <span>{t(`effect:condition.state.${key}`, { unit: '' })}</span>\n        </React.Fragment>\n      );\n    default: {\n      const _exhaustiveCheck: never = unit;\n      return _exhaustiveCheck;\n    }\n    }\n  } else {\n    if ('alias' in unit) {\n      if ('except' in unit) {\n        return (\n          <React.Fragment>\n            <span>\n              {t('effect:with_quotes', { value: t('unit:display', { number: unit.except }) })}\n              {t('effect:except_preposition')}\n            </span>\n            <UnitAliasView unitAlias={unit.alias} exceptUnit={unit.except} />\n            <span>{t(`effect:condition.state.${key}`, { unit: '' })}</span>\n          </React.Fragment>\n        );\n      } else {\n        const target = 'type' in unit ? t(`effect:unit.${unit.type}`) : t(`effect:unit.${unit.role}`);\n        return (\n          <React.Fragment>\n            <UnitAliasView unitAlias={unit.alias} />\n            <span>{t('effect:of_preposition')}{t(`effect:condition.state.${key}`, { unit: target })}</span>\n          </React.Fragment>\n        );\n      }\n    } if ('not_alias' in unit) {\n      const target = t(`effect:unit.${unit.type}`);\n      return (\n        <React.Fragment>\n          <UnitAliasView unitAlias={unit.not_alias} />\n          <span>{t('effect:negative_form')}{t(`effect:condition.state.${key}`, { unit: target })}</span>\n        </React.Fragment>\n      );\n    } else {\n      const { type, role } = unit;\n      const typeAndRole = `${t(`effect:unit.${type}`)}${t(`effect:unit.${role}`)}`;\n      return (<span>{t(`effect:condition.state.${key}`, { unit: typeAndRole })}</span>);\n    }\n  }\n}\n\nfunction stateValuesPerTargetView(\n  target: string,\n  values: SkillEffectActivationStateValues,\n  unitNumber: UnitNumber,\n  t: TFunction\n): ReactNode {\n  return values.map((v: SkillEffectActivationStateValues[number], i: number) => (\n    <React.Fragment key={JSON.stringify(v)}>\n      {Object\n        .entries(v)\n        .map((entry, i, entries) => (\n          <React.Fragment key={entry[0]}>\n            {stateValuesView(entry as StateValuesEntry, unitNumber, t)}\n            {ifTruthy(\n              isNeedSeparator(entries, i),\n              (<span>{t('effect:and_separator')}</span>)\n            )}\n          </React.Fragment>\n        ))}\n      {ifTruthy(\n        isNeedSeparator(values, i),\n        (<span>{t('effect:or_separator')}</span>)\n      )}\n    </React.Fragment>\n  ));\n}\n\nconst StateView: React.FC<{\n  state: SkillEffectActivationState,\n  unitNumber: UnitNumber\n}> = ({\n  state,\n  unitNumber\n}) => {\n  const { t } = useTranslation();\n  const statePerTarget =\n    Object\n      .entries(state)\n      .map((entry) => {\n        return { key: entry[0], node: stateValuesPerTargetView(entry[0], entry[1] as SkillEffectActivationStateValues, unitNumber, t) };\n      });\n\n  return (\n    <React.Fragment>\n      {statePerTarget.map(({ key, node }, i) => (\n        <React.Fragment key={key}>\n          <span>{t(`effect:condition.target.${key}`)}</span>\n          {node}\n          {ifTruthy(\n            isNeedSeparator(statePerTarget, i),\n            (<span>{t('effect:and_separator')}</span>)\n          )}\n        </React.Fragment>\n      ))}\n      <span>{t('effect:case')}</span>\n    </React.Fragment>\n  );\n};\n\nconst buildSkillEffectTriggerView = (condition: SkillEffectActivationCondition, t: TFunction): ReactElement | null => {\n  if (!('trigger' in condition)) {\n    return null;\n  }\n\n  return condition.trigger === 'start_round' ?\n    (\n      <span>\n        {ifNonNullable(condition.round, round =>\n          'at' in round ?\n            t('effect:condition.round.at', { round: round.at }) :\n            'from' in round ?\n              t('effect:condition.round.from', { round: round.from }) :\n              t('effect:condition.round.until', { round: round.until })\n        )}\n        {t('effect:condition.trigger.start_round')}\n      </span>\n    ) :\n    (<span>{t(`effect:condition.trigger.${condition.trigger}`)}</span>);\n};\n\nconst SkillEffectConditionRow: React.FC<{\n  condition: SkillEffectActivationCondition,\n  unitNumber: UnitNumber\n}> = ({ condition, unitNumber }) => {\n  const { t } = useTranslation();\n  const trigger = buildSkillEffectTriggerView(condition, t);\n  const state = 'state' in condition ? (<StateView state={condition.state} unitNumber={unitNumber} />) : null;\n\n  return (\n    <div>\n      {trigger}\n      {ifTruthy(!!trigger && !!state, (<span>{t('effect:separator')}</span>))}\n      <span>{state}</span>\n    </div>\n  );\n};\n\nconst SkillEffectConditionView: React.FC<\n  Omit<SkillEffect, 'details'> & { unitNumber: UnitNumber }\n> = ({\n  conditions,\n  effective,\n  scale_factor,\n  unitNumber\n}) => {\n  const { t } = useTranslation();\n  const Conditions = () =>\n    ifNonNullable(\n      conditions,\n      conds => (\n        <div>\n          {conds.length === 1 ?\n            (<SkillEffectConditionRow condition={conds[0]} unitNumber={unitNumber} />) :\n            (\n              <React.Fragment>\n                <SkillEffectConditionRow condition={conds[0]} unitNumber={unitNumber} />\n                <div css={{ fontSize: '0.7em' }}>{t('effect:or_conjunction')}</div>\n                <SkillEffectConditionRow condition={conds[1]} unitNumber={unitNumber} />\n              </React.Fragment>\n            )\n          }\n        </div>\n      )\n    );\n  const Additional = () => {\n    return ifTruthy(\n      !!effective || !!scale_factor,\n      (<div>\n        {ifNonNullable(effective, v => (<span>{t(`effect:effective.${v}`)}{t('effect:separator')}</span>))}\n        {ifNonNullable(\n          scale_factor,\n          v => {\n            if ('per_stack' in v) {\n              return (<span>{t('effect:scale_factor.per_stack', { tag: v.per_stack.tag })}</span>);\n            } else if ('num_of_enemies' in v) {\n              return (<span>{t('effect:unit.enemy')}{t(`effect:scale_factor.${v.num_of_enemies}`)}</span>);\n            } else {\n              const exceptSelf = !!v.except;\n              if (isUnitAlias(v.num_of_units)) {\n                return (\n                  <React.Fragment>\n                    {ifTruthy(exceptSelf, (<span>{t('effect:unit.self')}{t('effect:except_preposition')}</span>))}\n                    <UnitAliasView unitAlias={v.num_of_units} exceptUnit={exceptSelf ? unitNumber : undefined} />\n                    <span>{t('effect:scale_factor.num_of_allies')}</span>\n                  </React.Fragment>\n                );\n              } else {\n                return (\n                  <React.Fragment>\n                    {ifTruthy(exceptSelf, (<span>{t('effect:unit.self')}{t('effect:except_preposition')}</span>))}\n                    <span>{t(`effect:unit.${v.num_of_units}`)}{t('effect:scale_factor.num_of_allies')}</span>\n                  </React.Fragment>\n                );\n              }\n            }\n          }\n        )}\n        <span>{t('effect:below_effects')}</span>\n      </div>)\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <Conditions />\n      <Additional />\n    </React.Fragment>\n  );\n};\n\nexport default SkillEffectConditionView;\n","import { TFunction } from 'i18next';\n\nimport { NonNullableEntry } from '../../util/object';\nimport { AroundSkillEffectValue, SkillEffectValue } from '../../domain/skill/UnitSkills';\nimport { Effect } from '../../domain/Effect';\nimport { calcValue, MilliPercentageValue } from '../../domain/ValueUnit';\nimport { isFormChangeUnitNumber, UnitForms } from '../../domain/UnitFormValue';\n\nexport type SkillEffectDetailsEntry =\n  NonNullableEntry<keyof SkillEffectValue, SkillEffectValue> |\n  NonNullableEntry<keyof AroundSkillEffectValue, AroundSkillEffectValue>\n\ntype SkillEffectDetailsProps = { tag?: string, detail: string, term?: string }\n\nfunction getDetail(body: string, value: SkillEffectDetailsEntry[1], t: TFunction): string {\n  const rate = 'rate' in value && value.rate ?\n    typeof value.rate === 'string' ?\n      `${t(`effect:rate.${value.rate}`)}${t('effect:separator')}` :\n      `${t('effect:rate.percentage', { value: calcValue(value.rate) })}${t('effect:separator')}` :\n    '';\n  const additions = [\n    'times' in value && value.times ?\n      t('effect:times', { count: value.times }) : undefined,\n    'max_stack' in value && typeof value.max_stack === 'number' ?\n      value.max_stack === 1 ?\n        t('effect:does_not_stack') :\n        t('effect:max_stack', { count: value.max_stack }) :\n      undefined,\n    'cannot_be_dispelled' in value && value.cannot_be_dispelled ?\n      t('effect:cannot_be_dispelled') : undefined\n  ].filter(s => !!s)\n    .join(t('effect:separator'));\n\n  return `${rate}${body}${additions ? ` (${additions})` : '' }`;\n}\n\nfunction getTerm(value: SkillEffectDetailsEntry[1], t: TFunction): string | undefined {\n  return 'term' in value ?\n    typeof value.term === 'string' ?\n      t(`effect:term.${value.term}`) :\n      value.term && t('effect:term.for_rounds', { value: value.term.for_rounds }) :\n    undefined;\n}\n\nfunction getTag(value: SkillEffectDetailsEntry[1], t: TFunction): string | undefined {\n  return 'tag' in value ?\n    value.tag && t(`effect:tag.${value.tag}`) :\n    undefined;\n}\n\nfunction translateMilliPercentageDetail(\n  effect: string,\n  value: SkillEffectDetailsEntry[1] & MilliPercentageValue,\n  t: TFunction\n): SkillEffectDetailsProps {\n  return {\n    tag: getTag(value, t),\n    detail: getDetail(t(`effect:effect.description.${effect}`, { value: calcValue(value) }), value, t),\n    term: getTerm(value, t)\n  };\n}\n\ntype TagStackEffectValue = NonNullable<SkillEffectValue[typeof Effect.TagStack]>\n\nfunction translateTagStackDetail(\n  key: typeof Effect['TagStack' | 'TagRelease'],\n  value: TagStackEffectValue,\n  t: TFunction\n): SkillEffectDetailsProps {\n  return {\n    detail: getDetail(t(`effect:effect.description.${key}`, { tag: value.tag }), value, t),\n    term: getTerm(value, t)\n  };\n}\n\nexport function translateSkillEffectDetails(\n  entry: SkillEffectDetailsEntry,\n  t: TFunction\n): SkillEffectDetailsProps | ReadonlyArray<SkillEffectDetailsProps>{\n  const term = getTerm(entry[1], t);\n\n  switch (entry[0]) {\n  case Effect.MinimizeDamage:\n  case Effect.NullifyDamage:\n  case Effect.AllBuffRemoval:\n  case Effect.AllDebuffRemoval:\n  case Effect.ColumnProtect:\n  case Effect.RowProtect:\n  case Effect.TargetProtect:\n  case Effect.ReAttack:\n  case Effect.FollowUpAttack:\n  case Effect.IgnoreBarrierDr:\n  case Effect.IgnoreDr:\n  case Effect.IgnoreProtect:\n  case Effect.Reconnaissance:\n  case Effect.Marked:\n  case Effect.Provoked:\n  case Effect.Immovable:\n  case Effect.Silenced:\n  case Effect.Stunned:\n  case Effect.RefundAp:\n  case Effect.AttackCritical:\n  case Effect.CounterattackCritical:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`), entry[1], t),\n      term\n    };\n  case Effect.DeployDefensiveWall:\n  case Effect.AMG11Construction:\n  case Effect.DeployRabbitDField:\n  case Effect.SummonHologramTiger:\n  case Effect.GoldenFactoryConstruction:\n    return {\n      tag: getTag(entry[1], t),\n      detail: t(`effect:effect.description.${entry[0]}`, { times: entry[1].times }),\n      term\n    };\n  case Effect.CooperativeAttack: {\n    const { unit, active } = entry[1];\n    return {\n      tag: getTag(entry[1], t),\n      detail:\n        isFormChangeUnitNumber(unit) ?\n          t('effect:effect.description.cooperative_attack_form_active', { unit, no: active, form: UnitForms[unit].default }) :\n          t('effect:effect.description.cooperative_attack', { unit, no: active }),\n      term\n    };\n  }\n  case Effect.Push:\n  case Effect.Pull:\n  case Effect.RangeUp:\n  case Effect.RangeDown:\n  case Effect.FixedDamageOverTime:\n  case Effect.FixedFireDamageOverTime:\n  case Effect.FixedIceDamageOverTime:\n  case Effect.FixedElectricDamageOverTime:\n  case Effect.Barrier:\n  case Effect.BattleContinuation:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { value: entry[1].value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.ApUp:\n  case Effect.ApDown:\n  case Effect.SetAp:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { value: calcValue(entry[1]) }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.EffectRemoval: {\n    const effects =\n      'effect' in entry[1] ?\n        t(`effect:effect.name.${entry[1].effect}`) :\n        entry[1].effects.map(e => t(`effect:effect.name.${e}`)).join(t('effect:separator'));\n\n    return {\n      detail: getDetail(\n        entry[1].tag ?\n          t('effect:effect.description.tagged_effect_removal', { tag: entry[1].tag, effects }) :\n          t('effect:effect.description.effect_removal', { effects }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  }\n  case Effect.PreventsEffect: {\n    const effect = t(`effect:effect.name.${entry[1].effect}`);\n\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`, { effect }), entry[1], t),\n      term\n    };\n  }\n  case Effect.ActivationRatePercentageUp: {\n    const value  = calcValue(entry[1]);\n    const effect = entry[1].effect;\n\n    return {\n      detail: getDetail(\n        entry[1].tag ?\n          t('effect:effect.description.tagged_activation_rate_percentage_up', { tag: entry[1].tag, effect, value }) :\n          t('effect:effect.description.activation_rate_percentage_up', { effect, value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  }\n  case Effect.FormChange:\n  case Effect.FormRelease:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`, { form: entry[1].form }), entry[1], t),\n      term\n    };\n  case Effect.TagStack:\n  case Effect.TagRelease:\n    return 'length' in entry[1] ?\n      entry[1].map(v => translateTagStackDetail(entry[0], v, t)) :\n      translateTagStackDetail(entry[0], entry[1], t);\n  case Effect.TagUnstack:\n    return {\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { tag: entry[1].tag, value: entry[1].value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.DefDown:\n  case Effect.AccDown:\n  case Effect.CriDown:\n  case Effect.EvaUp:\n  case Effect.StatusResistUp:\n    return 'length' in entry[1] ?\n      entry[1].map(v => translateMilliPercentageDetail(entry[0], v, t)) :\n      translateMilliPercentageDetail(entry[0], entry[1], t);\n  default: {\n    return translateMilliPercentageDetail(entry[0], entry[1], t);\n  }\n  }\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Badge } from 'react-bootstrap';\nimport { SkillEffectDetailsEntry, translateSkillEffectDetails } from './SkillEffectsTranslator';\n\nimport { AroundSkillEffectValue, SkillEffect, SkillEffectValue } from '../../domain/skill/UnitSkills';\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst EffectDetailRow: React.FC<{\n  tag?: string,\n  detail: string,\n  term?: string\n}> = ({ tag, detail, term }) => {\n  const { t } = useTranslation();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        fontWeight: 'bold',\n        borderRadius: 3,\n        backgroundColor: '#1c3042',\n        padding: '3px 8px',\n        marginTop: 5\n      }}\n    >\n      <div>\n        {ifNonNullable(tag, v => (<span>{v}{t('effect:tag_separator')}</span>))}\n        <span>{detail}</span>\n      </div>\n      <div\n        css={{\n          marginLeft: 'auto',\n          textAlign: 'right',\n          flexShrink: 0\n        }}>\n        {ifNonNullable(term, v => (<span css={{ marginLeft: 10 }}>{v}</span>))}\n      </div>\n    </div>\n  );\n};\n\nconst EffectDetail: React.FC<{\n  entry: SkillEffectDetailsEntry\n}> = ({ entry }) => {\n  const { t } = useTranslation();\n  const details = translateSkillEffectDetails(entry, t);\n\n  return 'length' in details ?\n    (<React.Fragment>\n      {details.map(detail => (<EffectDetailRow key={JSON.stringify(detail)} {...detail} />))}\n    </React.Fragment>) :\n    (<EffectDetailRow {...details} />);\n};\n\nconst SkillEffectDetailsView: React.FC<{\n  className?: string,\n  target: `${keyof SkillEffect['details']}`,\n  details: NonNullable<SkillEffectValue | AroundSkillEffectValue>,\n  area: SkillAreaType\n}> = ({ className, target, details, area }) => {\n  const { t } = useTranslation();\n  const targetKey =\n    target === 'target' ?\n      area === 'single' ? 'single' : 'area' :\n      target;\n\n  return (\n    <div className={className}>\n      <div><Badge variant=\"light\">{t(`effect:effect.target.${targetKey}`)}</Badge></div>\n      {Object.entries(details).map(entry => (<EffectDetail key={entry[0]} entry={entry as SkillEffectDetailsEntry}/>))}\n    </div>\n  );\n};\n\nexport default SkillEffectDetailsView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\n\nimport SkillEffectConditionView from './SkillEffectConditionView';\nimport SkillEffectDetailsView from './SkillEffectDetailsView';\n\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\nimport { SkillEffect } from '../../domain/skill/UnitSkills';\nimport { UnitBasicInfo, UnitNumber } from '../../domain/UnitBasicInfo';\n\nimport { SkillType, useSkillEffects } from '../../state/skill/unitSkillState';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst SkillEffectView: React.FC<{ effect: SkillEffect, unitNumber: UnitNumber, area: SkillAreaType }> = ({ effect, unitNumber, area }) => {\n  return (\n    <div\n      css={{\n        border: '1px solid rgba(255, 255, 255, 0.3)',\n        borderRadius: 5,\n        marginTop: 10,\n        padding: 5,\n        '& > .skill-effect-details:not(:first-of-type)': {\n          marginTop: 10\n        }\n      }}\n    >\n      <SkillEffectConditionView {...effect} unitNumber={unitNumber} />\n      {ifNonNullable(effect.details.self, self => (<SkillEffectDetailsView className='skill-effect-details' target='self' details={self} area={area} />))}\n      {ifNonNullable(effect.details.target, target => (<SkillEffectDetailsView className='skill-effect-details' target='target' details={target} area={area} />))}\n      {ifNonNullable(effect.details.around, around => (<SkillEffectDetailsView className='skill-effect-details' target='around' details={around} area={area} />))}\n    </div>\n  );\n};\n\nconst SkillEffectsView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const values = useSkillEffects(skillType, unit);\n\n  return (\n    ifNonNullable(\n      values,\n      ([effects, area, unitNumber]) => (\n        <div css={{ color: '#ccc', fontSize: '0.8em' }}>\n          {effects.map(effect => (<SkillEffectView key={JSON.stringify(effect)} effect={effect} unitNumber={unitNumber} area={area} />))}\n        </div>\n      )\n    )\n  );\n};\n\nexport default SkillEffectsView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { CSSObject, Theme, jsx } from '@emotion/react';\nimport React, { ReactNode } from 'react';\nimport { Interpolation } from '@emotion/serialize';\nimport { useTranslation } from 'react-i18next';\n\nimport AreaOfEffectGrid from './AreaOfEffectGrid';\nimport { Badge, Col, Container, Row, Tab } from 'react-bootstrap';\nimport DamageDealView from './DamageDealView';\nimport EffectsAsEquipmentDescriptionView from './EffectsAsEquipmentDescriptionView';\nimport NumberValueDropdown from '../common/NumberValueDropdown';\nimport SkillEffectsView from './SkillEffectsView';\n\nimport { SkillLv } from '../../domain/skill/UnitSkillLvValue';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\n\nimport {\n  SkillType,\n  useFormChangeSkillBadge,\n  useRankUpSkillBadge,\n  useSkillCost,\n  useSkillLvState,\n  useSkillName,\n  useSkillRange\n} from '../../state/skill/unitSkillState';\nimport { useSelectedUnit } from '../../state/selector/unitSelectorState';\n\nimport { ifNonNullable, ifTruthy } from '../../util/react';\n\nimport './RankUpSkillBadge.css';\n\nconst skillLabelFontStyle: CSSObject = {\n  fontSize: '1.2em',\n  color: '#ccc'\n};\nconst skillValueFontSizeStyle: CSSObject = {\n  fontSize: '1.2em',\n  fontWeight: 'bold'\n};\nconst skillLabelStyle: CSSObject = {\n  ...skillLabelFontStyle,\n  display: 'inline-block',\n  width: '4em'\n};\nconst skillBadgeStyle: CSSObject = {\n  fontSize: '1.2em'\n};\n\nconst NestedContainer: React.FC<{ css?: Interpolation<Theme>, children: ReactNode }> = ({ children, ...others }) => (\n  <Container\n    {...others}\n    fluid\n    css={{ padding: 0 }}\n  >\n    {children}\n  </Container>\n);\n\nconst SkillNameView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const name = useSkillName(skillType, unit);\n\n  return (\n    <div\n      css={{\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n      }}\n      title={name}\n    >\n      {name}\n    </div>\n  );\n};\n\nconst SkillCostView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const cost = useSkillCost(skillType, unit);\n\n  return (<span css={{ ...skillValueFontSizeStyle, color: '#0af' }}>{cost}</span>);\n};\n\nconst SkillRangeView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const range = useSkillRange(skillType, unit);\n\n  return (<span css={{ ...skillValueFontSizeStyle, color: '#cc0' }}>{range}</span>);\n};\n\nconst RankUpSkillBadge: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const isRankUpSkill = useRankUpSkillBadge(skillType, unit);\n\n  return (\n    ifTruthy(\n      isRankUpSkill,\n      (<div css={skillBadgeStyle}><Badge variant=\"rank-up-skill\">{t('skill.rank_up')}</Badge></div>)\n    )\n  );\n};\n\nconst FormChangeSkillBadge: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const form = useFormChangeSkillBadge(skillType, unit);\n\n  return (\n    ifNonNullable(\n      form,\n      v => (<div css={skillBadgeStyle}><Badge variant=\"secondary\">{t(`effect:form.${v}`)}</Badge></div>)\n    )\n  );\n};\n\nconst skillLvItems = [...Array(10)].map((v, i) => 10 - i) as ReadonlyArray<SkillLv>;\n\nconst SkillLvDropdown: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const [skillLv, setSkillLv] = useSkillLvState(skillType, unit);\n\n  return (\n    <div css={{\n      display: 'flex',\n      userSelect: 'none'\n    }}>\n      <span css={{ marginRight: 5 }}>{t('lv')}</span>\n      <NumberValueDropdown\n        css={{ flexShrink: 0 }}\n        id=\"skill-lv-dropdown\"\n        items={skillLvItems}\n        value={skillLv}\n        onChange={setSkillLv}\n      />\n    </div>\n  );\n};\n\nconst SkillPane: React.FC<{ eventKey: SkillType }> = ({ eventKey }) => {\n  const { t } = useTranslation();\n  const selectedUnit = useSelectedUnit();\n\n  return (\n    <Tab.Pane eventKey={eventKey}>\n      {ifNonNullable(\n        selectedUnit,\n        unit => (\n          <Container\n            fluid\n            css={{ paddingTop: 5 }}\n          >\n            <Row css={{ fontSize: '1.4em', color: '#eee' }}>\n              <Col xs={8} sm={9}>\n                <SkillNameView skillType={eventKey} unit={unit} />\n              </Col>\n              <Col xs={4} sm={3}>\n                <SkillLvDropdown skillType={eventKey} unit={unit} />\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={{ order: 'last', span: 12 }} sm={{ order: 'first', span: 9 }}>\n                <DamageDealView skillType={eventKey} unit={unit} />\n                <EffectsAsEquipmentDescriptionView skillType={eventKey} unit={unit} />\n                <SkillEffectsView skillType={eventKey} unit={unit} />\n              </Col>\n              <Col xs={{ order: 'first', span: 12 }} sm={{ order: 'last', span: 3 }}>\n                <NestedContainer css={{ userSelect: 'none' }}>\n                  <Row>\n                    <Col xs={8} sm={12}>\n                      <NestedContainer>\n                        <Row css={{ '& > div': { marginTop: 5 } }}>\n                          <Col xs={{ order: 1, span: 12 }} sm={{ order: 2, span: 12 }}>\n                            <span css={skillLabelStyle}>{t('skill.ap')}</span>\n                            <SkillCostView skillType={eventKey} unit={unit} />\n                          </Col>\n                          <Col xs={{ order: 2, span: 12 }} sm={{ order: 3, span: 12 }}>\n                            <span css={skillLabelStyle}>{t('skill.range')}</span>\n                            <SkillRangeView skillType={eventKey} unit={unit} />\n                          </Col>\n                          <Col xs={{ order: 3, span: 12 }} sm={{ order: 1, span: 12 }}>\n                            <FormChangeSkillBadge skillType={eventKey} unit={unit} />\n                            <RankUpSkillBadge skillType={eventKey} unit={unit} />\n                          </Col>\n                        </Row>\n                      </NestedContainer>\n                    </Col>\n                    <Col xs={4} sm={12} css={{ '& > div': { marginTop: 5 } }}>\n                      <div>\n                        <span css={{ color: '#ccc' }}>{t('skill.area')}</span>\n                      </div>\n                      <AreaOfEffectGrid css={{ width: 100 }} skillType={eventKey} unit={unit} />\n                    </Col>\n                  </Row>\n                </NestedContainer>\n              </Col>\n            </Row>\n          </Container>\n        )\n      )}\n    </Tab.Pane>\n  );\n};\n\nexport default SkillPane;\n"],"sourceRoot":""}