{"version":3,"file":"static/js/198.f07612a2.chunk.js","mappings":"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","sources":["component/status/SlotUnavailableOverlay.tsx","component/status/equipment/EquipmentItemView.tsx","component/status/equipment/EquipmentPlaceholder.tsx","component/status/equipment/EquipmentRankToggleButton.tsx","state/equipment/availableEquipment.ts","component/status/equipment/EquipmentSelector.tsx"],"sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport SVGIcon from '../icon/SVGIcon';\nimport { LockClosed } from '../icon/FluentIcons';\n\nimport { CoreLinkSlotAvailableLv } from '../../domain/UnitCoreLink';\nimport { EquipmentSlotAvailableLv } from '../../domain/equipment/UnitEquipment';\n\nimport { ifTruthy } from '../../util/react';\n\nconst SlotUnavailableOverlay: React.FC<{\n  show: boolean,\n  availableLv: CoreLinkSlotAvailableLv | EquipmentSlotAvailableLv\n}> = React.memo(({ show, availableLv }) => {\n  const { t } = useTranslation();\n\n  return (\n    ifTruthy(\n      show,\n      (<span\n        css={{\n          display: 'inline-flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          position: 'absolute',\n          inset: 0,\n          backgroundColor: 'rgba(0, 0, 0, 0.75)'\n        }}>\n        <SVGIcon css={{ height: 24, width: 24 }}>\n          <LockClosed/>\n        </SVGIcon>\n        <span css={{ color: '#ccc', fontWeight: 'bold' }}>\n          {t('lv')}&nbsp;{availableLv}\n        </span>\n      </span>)\n    )\n  );\n});\n\nexport default SlotUnavailableOverlay;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Image } from 'react-bootstrap';\n\nimport { EquipmentEnhancementLevel, EquipmentId, EquipmentRank, EquipmentType } from '../../../domain/equipment/EquipmentData';\n\nconst EquipmentItemView: React.FC<{\n  equipmentId: EquipmentId,\n  equipmentType: EquipmentType,\n  equipmentRank: EquipmentRank,\n  enhancementLv: EquipmentEnhancementLevel\n}> = ({ equipmentId, equipmentType, equipmentRank, enhancementLv }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span css={{ position: 'relative', display: 'inline-block' }}>\n      <Image\n        fluid\n        rounded\n        draggable=\"false\"\n        sizes=\"(max-width: 480px) 47px, (min-width: 480px) 62px\"\n        alt={t(`equipment:${equipmentId}`)}\n        src={`${process.env.PUBLIC_URL}/equip_icon/${equipmentType}_${equipmentId}_${equipmentRank}.webp`}\n      />\n      <Image\n        draggable=\"false\"\n        css={{ position: 'absolute', top: -10, left: -5 }}\n        height={28}\n        width={28}\n        alt={`${t(`equipment:rank.${equipmentRank}`)} ${t(`equipment:type.${equipmentType}`)}`}\n        src={`${process.env.PUBLIC_URL}/icon/${equipmentType}_${equipmentRank}.webp`}\n      />\n      <span\n        css={{\n          position: 'absolute',\n          top: -5,\n          right: 0,\n          color: '#fff',\n          fontSize: '0.9em',\n          fontWeight: 'bold',\n          textShadow: [\n            '1px 1px 0px #000, -1px -1px 0px #000',\n            '-1px 1px 0px #000,  1px -1px 0px #000',\n            '1px 0px 0px #000, -1px  0px 0px #000',\n            '0px 1px 0px #000,  0px -1px 0px #000'\n          ].join()\n        }}\n      >\n        +{enhancementLv}\n      </span>\n    </span>\n  );\n};\n\nexport default EquipmentItemView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Image } from 'react-bootstrap';\n\nimport { EquipmentType } from '../../../domain/equipment/EquipmentData';\n\nconst EquipmentPlaceholder: React.FC<{ type: EquipmentType }> = React.memo(({ type }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span\n      css={{\n        display: 'inline-flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        opacity: 0.5\n      }}\n    >\n      <Image\n        rounded\n        draggable=\"false\"\n        height={32}\n        width={32}\n        alt={t(`equipment:type.${type}`)}\n        src={`${process.env.PUBLIC_URL}/icon/placeholder_${type}.webp`}\n      />\n    </span>\n  );\n});\n\nexport default EquipmentPlaceholder;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap';\n\nimport { EquipmentSlotRank } from '../../../state/equipment/UnitEquipmentState';\nimport { useEquipmentRankSelector } from '../../../state/equipment/UnitEquipmentHook';\n\nimport './EquipmentRankToggleButton.css';\n\ntype EquipmentRankToggleButtonProps =\n  { slot: 'chip1', rank: EquipmentSlotRank<'chip1'> } |\n  { slot: 'chip2', rank: EquipmentSlotRank<'chip2'> } |\n  { slot: 'os',    rank: EquipmentSlotRank<'os'> } |\n  { slot: 'gear',  rank: EquipmentSlotRank<'gear'> }\n\nconst EquipmentRankToggleButton: React.FC<EquipmentRankToggleButtonProps> = ({ slot, rank }) => {\n  const { t } = useTranslation();\n  const [selected, select] = useEquipmentRankSelector(slot, rank);\n\n  return (\n    <ButtonGroup toggle>\n      <ToggleButton\n        type='checkbox'\n        variant=\"equipment-rank\"\n        className={rank}\n        value={1}\n        checked={selected}\n        onChange={select}\n      >\n        {t(`equipment.rank.${rank}`)}\n      </ToggleButton>\n    </ButtonGroup>\n  );\n};\n\nexport default EquipmentRankToggleButton;\n","import { selectorFamily, useRecoilValue } from 'recoil';\n\nimport {\n  availableRank,\n  Chip,\n  EquipmentData,\n  EquipmentRank,\n  Gear,\n  isChipEquipment,\n  isGearEquipment,\n  isOsEquipment,\n  matchExclusive,\n  Os\n} from '../../domain/equipment/EquipmentData';\nimport { UnitBasicInfo, UnitNumber } from '../../domain/UnitBasicInfo';\n\nimport { equipmentData } from '../../data/equipmentData';\n\nimport { EquipmentSlot, selectedEquipmentRankState } from './UnitEquipmentState';\n\nfunction pickEquipment(unit: UnitNumber, rank: EquipmentRank) {\n  return function<T extends EquipmentData>(equipment: T) {\n    return matchExclusive(unit, equipment) && availableRank(equipment, rank);\n  };\n}\n\nconst chipEquipment = Object.values(equipmentData).filter(isChipEquipment);\nconst osEquipment   = Object.values(equipmentData).filter(isOsEquipment);\nconst gearEquipment = Object.values(equipmentData).filter(isGearEquipment);\n\nconst availableChipEquipmentState = selectorFamily<ReadonlyArray<Chip>, [unit: UnitNumber, slot: 'chip1' | 'chip2']>({\n  key: 'availableChipEquipmentState',\n  get: ([unit, slot]) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState(slot));\n    return chipEquipment.filter(pickEquipment(unit, rank));\n  }\n});\n\nconst availableOsEquipmentState = selectorFamily<ReadonlyArray<Os>, UnitNumber>({\n  key: 'availableOsEquipmentState',\n  get: (unit) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState('os'));\n    return osEquipment.filter(pickEquipment(unit, rank));\n  }\n});\n\nconst availableGearEquipmentState = selectorFamily<ReadonlyArray<Gear>, UnitNumber>({\n  key: 'availableGearEquipmentState',\n  get: (unit) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState('gear'));\n    return gearEquipment.filter(pickEquipment(unit, rank));\n  }\n});\n\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'chip1' | 'chip2'): ReadonlyArray<Chip>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'os'): ReadonlyArray<Os>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'gear'): ReadonlyArray<Gear>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: EquipmentSlot): ReadonlyArray<Chip | Os | Gear> {\n  switch (slot) {\n  case 'chip1':\n  case 'chip2':\n    return useRecoilValue(availableChipEquipmentState([unit.no, slot]));\n  case 'os':\n    return useRecoilValue(availableOsEquipmentState(unit.no));\n  case 'gear':\n    return useRecoilValue(availableGearEquipmentState(unit.no));\n  }\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { MouseEventHandler, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Badge, Dropdown, Image } from 'react-bootstrap';\nimport EquipmentItemView from './EquipmentItemView';\nimport EquipmentPlaceholder from './EquipmentPlaceholder';\nimport EquipmentRankToggleButton from './EquipmentRankToggleButton';\nimport RoundedToggleButton from '../../common/RoundedToggleButton';\nimport SlotUnavailableOverlay from '../SlotUnavailableOverlay';\n\nimport {\n  Chip,\n  ChipEquipmentRanks,\n  EquipmentEnhancementLevel,\n  EquipmentId,\n  EquipmentType,\n  Gear,\n  GearEquipmentRanks,\n  Os,\n  OsEquipmentRanks\n} from '../../../domain/equipment/EquipmentData';\nimport { ChipEquipment, GearEquipment, OsEquipment } from '../../../domain/equipment/UnitEquipment';\nimport { UnitBasicInfo, UnitNumber } from '../../../domain/UnitBasicInfo';\n\nimport { EquipmentSlot } from '../../../state/equipment/UnitEquipmentState';\nimport {\n  useEquipmentAvailable,\n  useEquipmentEffects,\n  useEquipmentEffectsAsSkill,\n  useEquipmentEnhanceLvSelector,\n  useEquipmentRank,\n  useEquipmentStatusEffects,\n  useUnitEquipment\n} from '../../../state/equipment/UnitEquipmentHook';\nimport {\n  TranslatedEquipmentEffect,\n  TranslatedEquipmentEffectAsSkill,\n  isTranslatedEquipmentEffectAsSkillDetails\n} from '../../../state/equipment/EquipmentEffectsTranslator';\nimport { useAvailableEquipment } from '../../../state/equipment/availableEquipment';\nimport { useSelectedUnit } from '../../../state/selector/UnitSelectorHook';\n\nimport { ifNonNullable } from '../../../util/react';\n\nimport './EquipmentSelector.css';\n\ntype SlotEquipment<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? Chip :\n  S extends 'os' ? Os :\n  S extends 'gear' ? Gear :\n    never\n\ntype SlotEquipmentType<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? typeof EquipmentType.Chip :\n  S extends 'os' ? typeof EquipmentType.Os :\n  S extends 'gear' ? typeof EquipmentType.Gear :\n    never\n\ntype CurrentEquipment<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? ChipEquipment :\n  S extends 'os' ? OsEquipment :\n  S extends 'gear' ? GearEquipment :\n    never\n\ntype Props<S extends EquipmentSlot> = {\n  unit: UnitBasicInfo,\n  id: string,\n  slot: S,\n  type: SlotEquipmentType<S>,\n  value?: CurrentEquipment<S>,\n  items: ReadonlyArray<SlotEquipment<S>>,\n  onSelect: (equipment: SlotEquipment<S> | undefined) => void\n}\n\nconst EffectTypeHeader: React.FC<{ children: string }> = ({ children }) => {\n  return (<div className=\"header\">{children}</div>);\n};\n\nconst EquipmentEnhancementLvSelector: React.FC<{ slot: EquipmentSlot, unit: UnitNumber }> = ({ slot, unit }) => {\n  const SelectorButton = ({ enhanceLv }: { enhanceLv: EquipmentEnhancementLevel }) => {\n    const [selected, select] = useEquipmentEnhanceLvSelector(slot, unit, enhanceLv);\n\n    return (<RoundedToggleButton selected={selected} onChange={select}>+&nbsp;{enhanceLv}</RoundedToggleButton>);\n  };\n\n  return (\n    <div className=\"equipment-enhancement\">\n      {([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] as const).map(n => (\n        <SelectorButton key={n} enhanceLv={n} />\n      ))}\n    </div>\n  );\n};\n\nconst EquipmentRankSelector: React.FC<{ slot: EquipmentSlot }> = ({ slot }) => {\n  const rankToggleButtons = () => {\n    switch (slot) {\n    case 'chip1':\n    case 'chip2':\n      return ChipEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    case 'os':\n      return OsEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    case 'gear':\n      return GearEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    }\n  };\n\n  return (\n    <div className=\"equipment-rank\">\n      {rankToggleButtons()}\n    </div>\n  );\n};\n\nconst EquipmentStatusEffects: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentStatusEffects(slot, equipment);\n\n  return (\n    <div className=\"status-effects\">\n      <EffectTypeHeader>{t('status.equipment_status_effect')}</EffectTypeHeader>\n      <div className=\"details\">{effects}</div>\n    </div>\n  );\n};\n\nconst EffectDetailList: React.FC<{\n  effects: ReadonlyArray<TranslatedEquipmentEffect> | ReadonlyArray<TranslatedEquipmentEffectAsSkill>\n}> = ({ effects }) => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      {effects.map(e => {\n        const { condition, details } = e;\n        return (\n          <div key={JSON.stringify(e)}>\n            {ifNonNullable(condition, cond => (<div className=\"condition\">{cond}</div>))}\n            {\n              isTranslatedEquipmentEffectAsSkillDetails(details) ?\n                (<React.Fragment>\n                  {ifNonNullable(\n                    'self' in details ? details.self : undefined,\n                    self => (\n                      <React.Fragment>\n                        <Badge variant=\"light\">{t('effect:effect.target.self')}</Badge>\n                        <EffectDetailRows details={self} />\n                      </React.Fragment>\n                    )\n                  )}\n                  {ifNonNullable(\n                    'target' in details ? details.target : undefined,\n                    target => (\n                      <React.Fragment>\n                        <Badge variant=\"light\">{t('effect:effect.target.target')}</Badge>\n                        <EffectDetailRows details={target} />\n                      </React.Fragment>\n                    )\n                  )}\n                </React.Fragment>) :\n                (<EffectDetailRows details={details} />)\n            }\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst EffectDetailRows: React.FC<{\n  details: TranslatedEquipmentEffect['details']\n}> = ({ details }) => {\n  return (\n    <React.Fragment>\n      {details.map(({ detail, term }) => (\n        <div key={detail} className=\"detail\">\n          <div>{detail}</div>\n          {ifNonNullable(term, v => (\n            <div className=\"term\"><span css={{ color: '#aaa', fontSize: '0.9em' }}>{v}</span></div>\n          ))}\n        </div>\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst EquipmentEffects: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentEffects(slot, equipment);\n\n  return ifNonNullable(\n    effects,\n    e => (\n      <div className=\"effects\">\n        <EffectTypeHeader>{t('status.equipment_effect')}</EffectTypeHeader>\n        <EffectDetailList effects={e} />\n      </div>\n    )\n  );\n};\n\nconst EquipmentEffectsAsSkill: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentEffectsAsSkill(slot, equipment);\n\n  return ifNonNullable(\n    effects,\n    e => (\n      <div className=\"effects\">\n        <EffectTypeHeader>{t('status.equipment_effect_as_skill')}</EffectTypeHeader>\n        <EffectDetailList effects={e} />\n      </div>\n    )\n  );\n};\n\nconst EquipmentItem: React.FC<{\n  slot: EquipmentSlot,\n  eventKey: EquipmentId,\n  active: boolean,\n  label: string,\n  src: string\n}> = ({ slot, eventKey, active, label, src, ...rest }) => {\n  return (\n    <Dropdown.Item\n      {...rest}\n      className=\"equipment\"\n      eventKey={eventKey}\n      active={active}\n    >\n      <div className=\"icon\">\n        <Image\n          draggable=\"false\"\n          height={48}\n          width={48}\n          alt={label}\n          src={src}\n        />\n        <span className=\"label\">{label}</span>\n      </div>\n      <div className=\"details\">\n        <EquipmentStatusEffects slot={slot} equipment={eventKey} />\n        <EquipmentEffects slot={slot} equipment={eventKey} />\n        <EquipmentEffectsAsSkill slot={slot} equipment={eventKey} />\n      </div>\n    </Dropdown.Item>\n  );\n};\n\nconst RemoveEquipmentItem: React.FC<{\n  active: boolean,\n  type: SlotEquipmentType<EquipmentSlot>\n}> = ({ active, type, ...rest }) => {\n  const { t } = useTranslation();\n  const label = t('status.remove_equipment');\n\n  return (\n    <Dropdown.Item\n      {...rest}\n      className=\"equipment remove\"\n      active={active}\n    >\n      <div className=\"icon\">\n        <Image\n          draggable=\"false\"\n          height={48}\n          width={48}\n          alt={label}\n          src={`${process.env.PUBLIC_URL}/icon/placeholder_${type}.webp`}\n        />\n      </div>\n      <div className=\"details\">{label}</div>\n    </Dropdown.Item>\n  );\n};\n\nconst EquipmentSelectorMenu = <T extends EquipmentSlot>(\n  { unit, slot, type, value, items, ...rest }: Omit<Props<T>, 'id' | 'onSelect'>\n): ReturnType<React.FC<Omit<Props<T>, 'id' | 'onSelect'>>> => {\n  const { t } = useTranslation();\n  const rank = useEquipmentRank(slot);\n\n  return (\n    <Dropdown.Menu {...rest} className=\"equipment\">\n      <EquipmentEnhancementLvSelector slot={slot} unit={unit.no} />\n      <EquipmentRankSelector slot={slot} />\n      <div className=\"equipment-list\">\n        <RemoveEquipmentItem type={type} active={!value?.id} />\n        {items.map(item => (\n          <EquipmentItem\n            key={item.id}\n            slot={slot}\n            eventKey={item.id}\n            active={item.id === value?.id && rank === value?.rank}\n            label={t(`equipment:${item.id}`)}\n            src={`${process.env.PUBLIC_URL}/equip_icon/${item.type}_${item.id}_${rank}.webp`}\n          />\n        ))}\n      </div>\n    </Dropdown.Menu>\n  );\n};\n\nconst EquipmentSlotUnavailableOverlay: React.FC<{ unit: UnitBasicInfo, slot: EquipmentSlot }> = ({ unit, slot }) => {\n  const [available, availableLv] = useEquipmentAvailable(unit, slot);\n  return (<SlotUnavailableOverlay show={!available} availableLv={availableLv} />);\n};\n\nconst EquipmentToggle = React.forwardRef<\n  HTMLAnchorElement,\n  {\n    onClick: MouseEventHandler<HTMLAnchorElement>,\n    id: string,\n    children: ReactNode\n  }\n>(({ onClick, id, children }, ref) => (\n  <a\n    href=\"\"\n    ref={ref}\n    id={id}\n    onClick={(e) => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n  </a>\n));\n\nconst EquipmentDropdown = <T extends EquipmentSlot>(\n  { id, unit, slot, type, value, onSelect, items }: Props<T>\n): ReturnType<React.FC<Props<T>>> => {\n  return (\n    <Dropdown\n      className=\"slot equipment\"\n      onSelect={(eventKey) => {\n        if (eventKey) {\n          const item = items.find((item: SlotEquipment<T>) => item.id === eventKey);\n          item && onSelect(item);\n        } else {\n          onSelect(undefined);\n        }\n      }}\n    >\n      <Dropdown.Toggle as={EquipmentToggle} id={id}>\n        <span className=\"equipment-toggle-view\">\n          {value ?\n            (<EquipmentItemView\n              equipmentId={value.id}\n              equipmentType={type}\n              equipmentRank={value.rank}\n              enhancementLv={value.enhanceLv}\n            />) :\n            <EquipmentPlaceholder type={type} />}\n          <EquipmentSlotUnavailableOverlay unit={unit} slot={slot} />\n        </span>\n      </Dropdown.Toggle>\n      <EquipmentSelectorMenu unit={unit} slot={slot} type={type} value={value} items={items} />\n    </Dropdown>\n  );\n};\n\nconst Chip1EquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'chip1');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'chip1');\n  return (\n    <EquipmentDropdown\n      id=\"chip1-equipment-dropdown\"\n      unit={unit}\n      slot=\"chip1\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst Chip2EquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'chip2');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'chip2');\n  return (\n    <EquipmentDropdown\n      id=\"chip2-equipment-dropdown\"\n      unit={unit}\n      slot=\"chip2\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst OsEquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'os');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'os');\n  return (\n    <EquipmentDropdown\n      id=\"os-equipment-dropdown\"\n      unit={unit}\n      slot=\"os\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst GearEquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'gear');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'gear');\n  return (\n    <EquipmentDropdown\n      id=\"gear-equipment-dropdown\"\n      unit={unit}\n      slot=\"gear\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst EquipmentSelector: React.FC<{ slot: EquipmentSlot }> = ({ slot }) => {\n  const selected = useSelectedUnit();\n\n  return ifNonNullable(\n    selected,\n    unit => {\n      switch (slot) {\n      case 'chip1': return (<Chip1EquipmentDropdown unit={unit} />);\n      case 'chip2': return (<Chip2EquipmentDropdown unit={unit} />);\n      case 'os':    return (<OsEquipmentDropdown unit={unit} />);\n      case 'gear':  return (<GearEquipmentDropdown unit={unit} />);\n      }\n    }\n  );\n};\n\nexport default EquipmentSelector;\n"],"names":["React","_ref","show","availableLv","t","useTranslation","ifTruthy","jsx","css","display","flexDirection","alignItems","justifyContent","position","inset","backgroundColor","SVGIcon","height","width","LockClosed","color","fontWeight","equipmentId","equipmentType","equipmentRank","enhancementLv","Image","fluid","rounded","draggable","sizes","alt","concat","src","process","top","left","right","fontSize","textShadow","join","type","opacity","slot","rank","selected","select","useEquipmentRankSelector","ButtonGroup","toggle","ToggleButton","variant","className","value","checked","onChange","pickEquipment","unit","equipment","matchExclusive","availableRank","chipEquipment","Object","values","equipmentData","filter","isChipEquipment","osEquipment","isOsEquipment","gearEquipment","isGearEquipment","availableChipEquipmentState","selectorFamily","key","get","_ref2","selectedEquipmentRankState","availableOsEquipmentState","_ref3","availableGearEquipmentState","_ref4","useAvailableEquipment","useRecoilValue","no","EffectTypeHeader","children","EquipmentEnhancementLvSelector","SelectorButton","enhanceLv","useEquipmentEnhanceLvSelector","RoundedToggleButton","map","n","EquipmentRankSelector","rankToggleButtons","ChipEquipmentRanks","EquipmentRankToggleButton","OsEquipmentRanks","GearEquipmentRanks","EquipmentStatusEffects","_ref5","effects","useEquipmentStatusEffects","EffectDetailList","_ref6","e","condition","details","JSON","stringify","ifNonNullable","cond","isTranslatedEquipmentEffectAsSkillDetails","self","undefined","Badge","EffectDetailRows","target","_ref7","_ref8","detail","term","v","EquipmentEffects","_ref9","useEquipmentEffects","EquipmentEffectsAsSkill","_ref10","useEquipmentEffectsAsSkill","EquipmentItem","_ref11","eventKey","active","label","rest","Dropdown","Item","_extends","RemoveEquipmentItem","_ref12","EquipmentSelectorMenu","_ref13","items","useEquipmentRank","Menu","id","item","EquipmentSlotUnavailableOverlay","_ref14","available","useEquipmentAvailable","SlotUnavailableOverlay","EquipmentToggle","_ref15","ref","onClick","href","preventDefault","EquipmentDropdown","_ref16","onSelect","find","Toggle","as","EquipmentItemView","EquipmentPlaceholder","Chip1EquipmentDropdown","_ref17","equip","useUnitEquipment","Chip2EquipmentDropdown","_ref18","OsEquipmentDropdown","_ref19","GearEquipmentDropdown","_ref20","_ref21","useSelectedUnit"],"sourceRoot":""}