{"version":3,"file":"static/js/50.13013f9f.chunk.js","mappings":"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","sources":["service/EffectIconSrcUrlBuilder.ts","component/status/parameters/EffectIcon.tsx","component/status/parameters/SquadUnitStatusParameterTabPane.tsx"],"sourcesContent":["import { Effect } from '../domain/Effect';\n\nfunction buildIconSrcUrl(effect: Effect): string {\n  return `${process.env.PUBLIC_URL}/effect_icon/${effect}.webp`;\n}\n\nexport function buildEffectIconSrcUrl(effect: Effect): string | undefined {\n  switch (effect) {\n  case Effect.DamageMultiplierUpByStatus:\n  case Effect.DamageMultiplierReductionByStatus:\n    return buildIconSrcUrl(Effect.DamageMultiplierUp);\n  case Effect.AdditionalDamageFocusing:\n    return buildIconSrcUrl(Effect.AtkUp);\n  case Effect.FixedDamage:\n    return buildIconSrcUrl(Effect.AdditionalDamage);\n  case Effect.FixedFireDamage:\n    return buildIconSrcUrl(Effect.AdditionalFireDamage);\n  case Effect.AtkValueUp:\n  case Effect.AtkValueUpByUnitValue:\n    return buildIconSrcUrl(Effect.AtkUp);\n  case Effect.DefValueUp:\n    return buildIconSrcUrl(Effect.DefUp);\n  case Effect.SpdUp:\n  case Effect.SetAp:\n  case Effect.RefundAp:\n    return buildIconSrcUrl(Effect.ApUp);\n  case Effect.SpdDown:\n    return buildIconSrcUrl(Effect.ApDown);\n  case Effect.RangeDownActive1:\n    return buildIconSrcUrl(Effect.RangeDown);\n  case Effect.RangeUpActive2:\n    return buildIconSrcUrl(Effect.RangeUp);\n  case Effect.DamageReductionDown:\n  case Effect.MinimizeDamage:\n  case Effect.MinimizeDamageLessThanValue:\n    return buildIconSrcUrl(Effect.DamageReductionUp);\n  case Effect.AreaDamageDispersionUp:\n    return buildIconSrcUrl(Effect.DefUp);\n  case Effect.AreaDamageDispersionDown:\n    return buildIconSrcUrl(Effect.DefDown);\n  case Effect.BuffRemoval:\n    return buildIconSrcUrl(Effect.AllBuffRemoval);\n  case Effect.DebuffRemoval:\n    return buildIconSrcUrl(Effect.AllDebuffRemoval);\n  case Effect.AbsolutelyActivated:\n    return buildIconSrcUrl(Effect.ActivationRatePercentageUp);\n  case Effect.ReAttack:\n    return buildIconSrcUrl(Effect.FollowUpAttack);\n  case Effect.AttackHit:\n    return buildIconSrcUrl(Effect.AccUp);\n  case Effect.CriReductionByStatus:\n  case Effect.AttackCritical:\n    return buildIconSrcUrl(Effect.CriUp);\n  case Effect.IgnoreDef:\n    return buildIconSrcUrl(Effect.DefensePenetration);\n  case Effect.FormRelease:\n    return buildIconSrcUrl(Effect.FormChange);\n  case Effect.HpUp:\n  case Effect.HpDown:\n  case Effect.TagStack:\n  case Effect.TagUnstack:\n  case Effect.TagRelease:\n  case Effect.AMG11Construction:\n  case Effect.DeployRabbitDField:\n  case Effect.SummonHologramTiger:\n  case Effect.GoldenFactoryConstruction:\n    return undefined;\n  default:\n    return buildIconSrcUrl(effect);\n  }\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport { CSSPropertiesWithMultiValues } from '@emotion/serialize/dist/declarations/types';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Image } from 'react-bootstrap';\nimport { ImageSizeProps } from '../../common/ImageSizeProps';\n\nimport { Effect } from '../../../domain/Effect';\n\nimport { buildEffectIconSrcUrl } from '../../../service/EffectIconSrcUrlBuilder';\n\nconst placeHolderStyle: CSSPropertiesWithMultiValues = {\n  width: 24,\n  height: 24\n};\n\nconst PlaceHolder: React.FC = () => {\n  return (<div css={placeHolderStyle} />);\n};\n\nconst EffectIcon: React.FC<\n  { effect: Effect } & ImageSizeProps\n> = ({ effect, ...others }) => {\n  const { t } = useTranslation();\n  const src = buildEffectIconSrcUrl(effect);\n\n  return src ? (\n    <Image\n      {...others}\n      rounded\n      draggable=\"false\"\n      alt={t(`effect:effect.name.${effect}`)}\n      src={src}\n      srcSet={`${src} 48w`}\n    />\n  ) : (\n    <PlaceHolder />\n  );\n};\n\nexport default EffectIcon;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { ReactElement } from 'react';\nimport { StringMap } from 'i18next';\nimport { useTranslation } from 'react-i18next';\nimport { nanoid } from 'nanoid';\n\nimport { Effect } from '../../../domain/Effect';\n\nimport EffectIcon from './EffectIcon';\nimport { Image, OverlayTrigger, Popover, Tab, Tooltip } from 'react-bootstrap';\nimport { SquadUnitElectricResist, SquadUnitFireResist, SquadUnitIceResist } from './AttributeResist';\nimport { SquadUnitApEffectsPopoverView, SquadUnitStatusEffectsView } from './StatusEffectsView';\nimport { SquadUnitApplyingEffectViewModel } from './SquadUnitStatusEffectsViewModel';\nimport UnitStatusIcon from './UnitStatusIcon';\nimport { appendPercentage } from './UnitStatusParameterFormatter';\n\nimport { EnhanceableStatus } from '../../../state/status/parameters/UnitLvStatusState';\nimport {\n  useSquadUnitApplyingEffects,\n  useSquadUnitStatusValue,\n  useSquadUnitApValue,\n  useSquadUnitDamagedState,\n  useSquadUnitHpValues\n} from '../../../state/status/parameters/SquadUnitStatusParameterHook';\n\nimport './StatusParameter.css';\nimport './SquadUnitStatusParameter.css';\n\nconst StatusIconOverlay: React.FC<{ status: EnhanceableStatus | 'spd', children: ReactElement }> = ({ status, children }) => {\n  const { t } = useTranslation();\n\n  return (\n    <OverlayTrigger\n      placement=\"top\"\n      overlay={<Tooltip id={`tooltip-${status}-status-in-squad`}>{t(`status.${status}`)}</Tooltip>}\n    >\n      {children}\n    </OverlayTrigger>\n  );\n};\n\nconst StatusValueView: React.FC<{ status: Exclude<EnhanceableStatus, 'hp'> | 'spd' }> = ({ status }) => {\n  const value = useSquadUnitStatusValue(status);\n  const percentage = status === 'cri' || status === 'acc' || status === 'eva';\n\n  return (<div>{percentage ? appendPercentage(value) : value}</div>);\n};\n\nconst StatusParameterCol: React.FC<{ status: Exclude<EnhanceableStatus, 'hp'> | 'spd' }> = ({ status }) => {\n  return (\n    <div className=\"status-parameter-col\">\n      <StatusIconOverlay status={status}>\n        <UnitStatusIcon height={24} width={24} status={status} />\n      </StatusIconOverlay>\n      <div className=\"status-parameter-body\">\n        <div className=\"status-parameter-value\">\n          <StatusValueView status={status} />\n          <SquadUnitStatusEffectsView className=\"effects\" parameter={status} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst HpParameter: React.FC = () => {\n  const [current, max] = useSquadUnitHpValues();\n\n  return (<div className=\"hp-value\">{current}&nbsp;/&nbsp;{max}</div>);\n};\n\nconst HpBar: React.FC = () => {\n  const damaged = useSquadUnitDamagedState();\n\n  return (<div className={`hp-bar ${damaged ?? 'nope'}`} />);\n};\n\nconst HpCol: React.FC = () => {\n  return (\n    <div className=\"status-parameter-col\">\n      <StatusIconOverlay status=\"hp\">\n        <UnitStatusIcon height={24} width={24} status=\"hp\" />\n      </StatusIconOverlay>\n      <div className=\"status-parameter-body\">\n        <HpParameter />\n        <HpBar />\n      </div>\n    </div>\n  );\n};\n\nconst ApCol: React.FC = () => {\n  const apValue = useSquadUnitApValue();\n\n  return (\n    <div className=\"status-parameter-col\">\n      <span className=\"ap-label\">AP</span>\n      <div className=\"status-parameter-body\">\n        <div className=\"status-parameter-value ap-value\">\n          <SquadUnitApEffectsPopoverView>\n            <span>{apValue}</span>\n          </SquadUnitApEffectsPopoverView>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst EffectLabel: React.FC<{ effect: SquadUnitApplyingEffectViewModel }> = ({ effect: { label } }) => {\n  const { t } = useTranslation();\n  const text = 'tag' in label ? t('effect:tag.format', label) : t(label.key);\n\n  return (<div className=\"effect-label\">{text}{t('effect:tag_separator')}</div>);\n};\n\nconst EffectDetails: React.FC<{ effect: SquadUnitApplyingEffectViewModel }> = ({ effect: { description: { key, options }, additions } }) => {\n  const { t } = useTranslation();\n  const translateEffects = (): string => {\n    return 'effect' in options && options.effect ?\n      t(`effect:effect.name.${options.effect}`) :\n      'effects' in options && options.effects ?\n        options.effects.map(e => t(`effect:effect.name.${e}`)).join(t('effect:separator')) :\n        '';\n  };\n  const translateAddition = (addition: SquadUnitApplyingEffectViewModel['additions'][number]): string  => {\n    switch (addition.type) {\n    case 'rate':\n      return t(`status.effect.rate.${addition.key}`, addition.options as StringMap);\n    case 'times':\n      return t('effect:times', { count: addition.value });\n    case 'cannot_be_dispelled':\n      return t('effect:cannot_be_dispelled');\n    default: {\n      const _exhaustiveCheck: never = addition;\n      return _exhaustiveCheck;\n    }\n    }\n  };\n\n  return (\n    <div className=\"effect-value\">\n      {\n        key === Effect.PreventsEffect ?\n          t(`effect:effect.description.${key}`, { ...options, effects: translateEffects() }) :\n          t(`effect:effect.description.${key}`, options)\n      }\n      {\n        additions.length > 0 ?\n          ` (${additions.map(translateAddition).join(t('effect:separator'))})` :\n          null\n      }\n    </div>\n  );\n};\n\nconst EffectTerm: React.FC<{ effect: SquadUnitApplyingEffectViewModel }> = ({ effect: { term } }) => {\n  const { t } = useTranslation();\n\n  return (<div className=\"effect-term\">{term ? t(term.key, term.options as StringMap) : ''}</div>);\n};\n\nconst EffectSource: React.FC<{ effect: SquadUnitApplyingEffectViewModel }> = ({ effect: { type, affected } }) => {\n  const { t } = useTranslation();\n  const isAllySkill = affected.type === 'ally';\n  const source = t(affected.source.key, affected.source.options);\n  const [src, originalWidth] =\n    isAllySkill ?\n      [`${process.env.PUBLIC_URL}/icon/placeholder_core_link.webp`, '64w'] :\n      [`${process.env.PUBLIC_URL}/icon/placeholder_${affected.type}.webp`, '96w'];\n\n  const popover = (\n    <Popover id=\"popover-effect-source\" className=\"skill-effect-details\">\n      <Popover.Content>\n        <div className=\"skill-effect-details-body\">\n          <div>{source}</div>\n          {isAllySkill ?\n            (<div>\n              {t(\n                'status.effect.source.skill',\n                {\n                  type: t(`skill.type.${affected.skill.type}`),\n                  name: t(affected.skill.name),\n                  lv: affected.skill.lv\n                }\n              )}\n            </div>) :\n            null}\n          <div className=\"skill-effect-type\">{t(`skill.effect.type.${type}`)}</div>\n        </div>\n      </Popover.Content>\n    </Popover>\n  );\n\n  return (\n    <div className=\"effect-source\">\n      <OverlayTrigger\n        placement=\"bottom\"\n        overlay={popover}\n      >\n        <Image\n          width={20}\n          height={20}\n          rounded\n          draggable=\"false\"\n          alt={source}\n          src={src}\n          srcSet={`${src} ${originalWidth}`}\n        />\n      </OverlayTrigger>\n    </div>\n  );\n};\n\nconst EffectRow: React.FC<{ effect: SquadUnitApplyingEffectViewModel }> = ({ effect }) => {\n  return (\n    <div className=\"effect-row-in-squad\">\n      <EffectIcon height={24} width={24} effect={effect.effect} />\n      <EffectLabel effect={effect} />\n      <EffectDetails effect={effect} />\n      <EffectTerm effect={effect} />\n      <EffectSource effect={effect} />\n    </div>\n  );\n};\n\nconst EffectList: React.FC = () => {\n  const effects = useSquadUnitApplyingEffects();\n\n  return (\n    <div className=\"effect-list-in-squad\">\n      {effects.map(e => (<EffectRow key={nanoid()} effect={e} />))}\n    </div>\n  );\n};\n\nconst SquadUnitStatusParameterTabPane: React.FC<{ eventKey: string }> = (props) => {\n  return (\n    <Tab.Pane\n      className=\"status-parameter-container\"\n      {...props}\n    >\n      <div className=\"status-parameter-row\">\n        <HpCol />\n        <ApCol />\n      </div>\n      <div className=\"status-parameter-row\">\n        <StatusParameterCol status=\"atk\" />\n        <StatusParameterCol status=\"cri\" />\n      </div>\n      <div className=\"status-parameter-row\">\n        <StatusParameterCol status=\"def\" />\n        <StatusParameterCol status=\"acc\" />\n      </div>\n      <div className=\"status-parameter-row\">\n        <StatusParameterCol status=\"spd\" />\n        <StatusParameterCol status=\"eva\" />\n      </div>\n      <div className=\"attribute-resist-row\">\n        <SquadUnitFireResist />\n        <SquadUnitIceResist />\n        <SquadUnitElectricResist />\n      </div>\n      <EffectList />\n    </Tab.Pane>\n  );\n};\n\nexport default SquadUnitStatusParameterTabPane;\n"],"names":["buildIconSrcUrl","effect","process","placeHolderStyle","width","height","PlaceHolder","css","others","t","useTranslation","src","Effect","buildEffectIconSrcUrl","Image","rounded","draggable","alt","srcSet","StatusIconOverlay","status","children","OverlayTrigger","placement","overlay","Tooltip","id","StatusValueView","value","useSquadUnitStatusValue","percentage","appendPercentage","StatusParameterCol","className","UnitStatusIcon","parameter","HpParameter","useSquadUnitHpValues","current","max","HpBar","damaged","useSquadUnitDamagedState","HpCol","ApCol","apValue","useSquadUnitApValue","EffectLabel","label","text","key","EffectDetails","description","options","additions","effects","map","e","join","length","addition","type","count","EffectTerm","term","EffectSource","affected","isAllySkill","source","originalWidth","popover","Popover","skill","name","lv","EffectRow","EffectList","useSquadUnitApplyingEffects","nanoid","props","Tab"],"sourceRoot":""}