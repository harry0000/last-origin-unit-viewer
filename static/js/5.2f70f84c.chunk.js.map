{"version":3,"sources":["component/skill/AreaOfEffectGrid.tsx","component/skill/AttributeColorStyle.ts","component/skill/DamageDealView.tsx","component/skill/EffectsAsEquipmentDescriptionView.tsx","domain/UnitAlias.ts","component/skill/UnitAliasView.tsx","component/skill/SkillEffectTargetView.tsx","domain/skill/UnitSkills.ts","component/skill/SkillEffectConditionViewModel.ts","component/skill/SkillEffectConditionView.tsx","component/skill/SkillEffectsTranslator.ts","component/skill/SkillEffectDetailsView.tsx","component/skill/SkillEffectsView.tsx","component/skill/SkillPane.tsx"],"names":["cellColorStyle","AreaOfEffectCellType","Effective","High","Middle","Weak","None","overlayStyle","type","borderRadius","position","top","bottom","left","right","opacity","backgroundColor","AreaOfEffectCell","selected","rest","t","useTranslation","css","border","width","content","display","marginTop","inset","OverlayTrigger","placement","overlay","Tooltip","id","AreaOfEffectGrid","skillType","unit","cellType","useSkillArea","ifNonNullable","cell","borderCollapse","transform","select","area","color","AttributeColorStyle","DamageAttribute","Fire","Ice","Electric","DamageDealView","props","useDamageDeal","damage_deal","SkillAreaType","Single","effective","margin","fontWeight","calcValue","attribute","EffectsAsEquipmentDescriptionView","show","useEffectsAsEquipmentDescription","ifTruthy","fontSize","cursor","textDecoration","UnitAlias","unitNumbersForAlias","Set","isUnitAlias","arg","Object","keys","some","alias","UnitAliasView","unitAlias","exceptUnit","popover","Popover","Content","filter","n","map","key","textAlign","number","SkillEffectTargetView","target","selfUnitNumber","Fragment","kind","conditions","cond","i","arr","separator","length","value","SkillEffectTargetKind","AllyExceptSelf","undefined","role","except","v","not_alias","isTargetSkillEffect","SkillEffectConditionViewModel","effect","this","details","isTargetSkillEffectData","Enemy","enemyTargetConditions","scale_factor","hasSelfEffect","needNotDetails","state","assign","self","around","needSeparator","array","index","unitStateView","unitName","isReadonlyArray","units","u","join","isSquadCond","EffectActivationState","InSquad","NotInSquad","has","SelfAndTargetStateView","unitNumber","JSON","stringify","typedEntries","entry","entries","HpGreaterOrEqual","HpLessOrEqual","HpGreaterThan","HpLessThan","StatusGreaterThanSelf","StatusLessThanSelf","StatusGreaterOrEqualThan","Affected","NotAffected","effects","e","AffectedBy","Tagged","NotTagged","tag","TaggedAffected","StackGe","Form","form","Equipped","equipment","NotEquipped","equipments","Grid","grid","Unit","stateValuesView","SquadStateView","s","in_squad","num_of_units","CrossAdjacent","numOfCrossAdjacent","not_in_squad","EnemyStateView","TriggerView","condition","trigger","EffectTrigger","StartRound","round","at","from","until","UseActive2","HitActive1","HitActive2","SeizeOpportunity","ConditionStateView","Separator","NotTargetStateView","ConditionRow","EnemyConditionRow","EffectiveView","EffectScaleFactorView","scaleFactor","per_stack","per_units","exceptSelf","variation","EffectTargetsView","targets","SkillEffectConditionView","model","OrConjunction","conds","children","onlyAdditional","hasMultipleConditions","effectTargets","getDetail","body","rate","calcMilliPercentageValue","additions","times","count","max_stack","cannot_be_dispelled","notFalsy","getTerm","term","for_rounds","getTag","translateMilliPercentageDetail","detail","translateTagStackDetail","translateEffectNames","EffectDetailRow","padding","marginLeft","flexShrink","EffectDetail","Effect","ActionCountUp","ActionCountDown","MinimizeDamage","NullifyDamage","AllBuffBlocking","AllBuffRemoval","AllDebuffRemoval","ColumnProtect","RowProtect","TargetProtect","ReAttack","FollowUpAttack","IgnoreBarrierDr","IgnoreProtect","IgnoreProtectDeactivate","Reconnaissance","Marked","Provoked","Immovable","Silenced","Stunned","RefundAp","AttackHit","AttackCritical","IgnoreDef","AMG11Construction","DeployRabbitDField","SummonHologramTiger","GoldenFactoryConstruction","CooperativeAttack","active","isFormChangeUnitNumber","no","UnitForms","default","Push","Pull","RangeUp","RangeDown","FixedDamageOverTime","FixedFireDamageOverTime","FixedIceDamageOverTime","FixedElectricDamageOverTime","Barrier","BattleContinuation","AtkValueUp","DefValueUp","calcMilliValue","ApUp","ApDown","SetAp","calcMicroValue","BuffRemoval","DebuffRemoval","PreventsEffect","ActivationRatePercentageUp","AbsolutelyActivated","FormChange","FormRelease","TagStack","TagRelease","TagUnstack","DamageMultiplierUpByStatus","status","DefDown","AccDown","CriDown","EvaUp","StatusResistUp","translateSkillEffectDetails","SkillEffectDetailsView","className","targetKey","Badge","variant","SkillEffectView","SkillEffectsView","values","useSkillEffects","skillValueFontSizeStyle","skillLabelStyle","skillBadgeStyle","whiteSpace","NestedContainer","Container","fluid","SkillNameView","name","useSkillName","textOverflow","overflow","title","SkillCostView","cost","useSkillCost","SkillRangeView","range","useSkillRange","RankUpSkillBadge","isRankUpSkill","useRankUpSkillBadge","FormChangeSkillBadge","useFormChangeSkillBadge","skillLvItems","Array","SkillLvDropdown","useSkillLvState","skillLv","setSkillLv","userSelect","marginRight","NumberValueDropdown","items","onChange","SkillPane","eventKey","selectedUnit","useSelectedUnit","Tab","Pane","paddingTop","Row","Col","xs","sm","order","span"],"mappings":"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","file":"static/js/5.2f70f84c.chunk.js","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { CSSObject, Theme, jsx } from '@emotion/react';\nimport React from 'react';\nimport { Interpolation } from '@emotion/serialize';\nimport { useTranslation } from 'react-i18next';\n\nimport { AreaOfEffectCellType } from './AreaOfEffectCellType';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\nimport { useSkillArea } from '../../state/skill/unitSkillState';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst cellColorStyle: { [key in AreaOfEffectCellType]: string } = {\n  [AreaOfEffectCellType.Effective]: '#d0191d',\n  [AreaOfEffectCellType.High]:      '#ff8f03',\n  [AreaOfEffectCellType.Middle]:    '#ba5a03',\n  [AreaOfEffectCellType.Weak]:      '#763316',\n  [AreaOfEffectCellType.None]:      '#4b4b4d'\n} as const;\n\nconst overlayStyle: (type: AreaOfEffectCellType) => CSSObject = (type) =>\n  type !== AreaOfEffectCellType.None ?\n    {\n      borderRadius: 2,\n      position: 'absolute',\n      top: -3,\n      bottom: 4,\n      left: -3,\n      right: 4,\n      opacity: 0.8,\n      backgroundColor: cellColorStyle[type]\n    } :\n    {};\n\nconst AreaOfEffectCell: React.FC<{ selected: boolean, type: AreaOfEffectCellType }> = ({ selected, type, ...rest }) => {\n  const { t } = useTranslation();\n\n  return (\n    <td\n      css={{\n        border: '5px solid transparent',\n        width: '33%',\n        position: 'relative',\n        '&::after': {\n          content: '\" \"',\n          display: 'block',\n          marginTop: '100%'\n        }\n      }}\n    >\n      <div\n        css={{\n          borderRadius: 2,\n          position: 'absolute',\n          inset: 0,\n          backgroundColor: selected ? '#16d4d4' : cellColorStyle[AreaOfEffectCellType.None]\n        }}\n      />\n      {\n        type === AreaOfEffectCellType.High ||\n        type === AreaOfEffectCellType.Middle ||\n        type === AreaOfEffectCellType.Weak ?\n          (<OverlayTrigger\n            {...rest}\n            placement='auto'\n            overlay={<Tooltip id='tooltip-aoe-cell'>{t(`skill.effective_rate.${type}`)}</Tooltip>}\n          >\n            <div css={overlayStyle(type)} />\n          </OverlayTrigger>) :\n          <div css={overlayStyle(type)} />\n      }\n    </td>\n  );\n};\n\nconst AreaOfEffectGrid: React.FC<{\n  css?: Interpolation<Theme>,\n  skillType: SkillType,\n  unit: UnitBasicInfo\n}> = ({ skillType, unit, ...rest }) => {\n  const { t } = useTranslation();\n  const cellType = useSkillArea(skillType, unit);\n\n  return (\n    ifNonNullable(\n      cellType,\n      cell => (\n        <div {...rest}>\n          <table\n            css={{\n              borderCollapse: 'collapse',\n              width: '100%',\n              transform: 'skewX(-9deg)'\n            }}>\n            <tbody>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 7} type={cell.area[0]} />\n                <AreaOfEffectCell selected={cell.select === 8} type={cell.area[1]} />\n                <AreaOfEffectCell selected={cell.select === 9} type={cell.area[2]} />\n              </tr>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 4} type={cell.area[3]} />\n                <AreaOfEffectCell selected={cell.select === 5} type={cell.area[4]} />\n                <AreaOfEffectCell selected={cell.select === 6} type={cell.area[5]} />\n              </tr>\n              <tr>\n                <AreaOfEffectCell selected={cell.select === 1} type={cell.area[6]} />\n                <AreaOfEffectCell selected={cell.select === 2} type={cell.area[7]} />\n                <AreaOfEffectCell selected={cell.select === 3} type={cell.area[8]} />\n              </tr>\n            </tbody>\n          </table>\n          {(<span css={{ color: '#16d4d4' }}>{!cell.select ? t('skill.fixed_area') : '\\u00A0'}</span>)}\n        </div>\n      )\n    )\n  );\n};\n\nexport default AreaOfEffectGrid;\n","import { DamageAttribute } from '../../domain/skill/UnitSkillData';\n\nexport const AttributeColorStyle: { [key in DamageAttribute]: string } = {\n  [DamageAttribute.Fire]: '#c33',\n  [DamageAttribute.Ice]: '#0cf',\n  [DamageAttribute.Electric]: '#fc0'\n};\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\nimport { calcValue } from '../../domain/ValueUnit';\n\nimport { AttributeColorStyle } from './AttributeColorStyle';\n\nimport { useDamageDeal } from '../../state/skill/unitSkillState';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst DamageDealView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const props = useDamageDeal(skillType, unit);\n  if (!props[0]) {\n    return null;\n  }\n\n  const [damage_deal, area] = props;\n\n  return (\n    <div css={{ color: '#ccc', marginTop: 10 }}>\n      <span>\n        {area === SkillAreaType.Single ?\n          t('effect:damage_deal.target.single') :\n          t('effect:damage_deal.target.area')}\n      </span>\n      {ifNonNullable(\n        damage_deal.effective,\n        effective => (<span>{t(`effect:effective.${effective}`)}{t('effect:separator')}</span>)\n      )}\n      <span>{t('status.atk')}</span>\n      <span css={{ margin: '0 5px', color: '#fc0', fontWeight: 'bold' }}>\n        {calcValue(damage_deal)}%\n      </span>\n      <span>{t('effect:as_preposition')}</span>\n      {ifNonNullable(\n        damage_deal.attribute,\n        attribute => (\n          <span css={{ margin: '0 5px', color: AttributeColorStyle[attribute], fontWeight: 600 }}>\n            {t(`effect:attribute.${attribute}`)}\n          </span>\n        )\n      )}\n      <span>{t('effect:damage')}</span>\n    </div>\n  );\n};\n\nexport default DamageDealView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\n\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\n\nimport { useEffectsAsEquipmentDescription } from '../../state/skill/unitSkillState';\n\nimport { ifTruthy } from '../../util/react';\n\nconst EffectsAsEquipmentDescriptionView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const show = useEffectsAsEquipmentDescription(skillType, unit);\n\n  return (\n    ifTruthy(\n      show,\n      (<div css={{\n        color: '#ccc',\n        fontSize: '0.9em',\n        marginTop: 10\n      }}>\n        <span>{t('effect:effects_as_equipment.description.prefix')}</span>\n        <OverlayTrigger\n          placement='auto'\n          overlay={<Tooltip id='tooltip-effects-as-equipment'>{t('effect:effects_as_equipment.annotation')}</Tooltip>}\n        >\n          <span css={{ cursor: 'help', textDecoration: 'underline' }}>\n            {t('effect:effects_as_equipment.description.as_equipment')}\n          </span>\n        </OverlayTrigger>\n        <span>{t('effect:effects_as_equipment.description.suffix')}</span>\n      </div>)\n    )\n  );\n};\n\nexport default EffectsAsEquipmentDescriptionView;\n","import { UnitNumber } from './UnitBasicInfo';\n\nexport const UnitAlias = {\n  BioroidUnder145cmTall: 'bioroid_under_145cm_tall',\n  ElectricActive: 'electric_active',\n  ArtilleryTypeActive: 'artillery_type_active',\n  Squad21: 'squad_21',\n  CompanionSeries: 'companion_series',\n  SteelLine: 'steel_line',\n  SteelLineExcludingOfficerRanks: 'steel_line_excluding_officer_ranks',\n  SistersOfValhalla: 'sisters_of_valhalla',\n  AngerOfHorde: 'anger_of_horde',\n  ApplicableForSeizeOpportunity: 'applicable_for_seize_opportunity',\n  NotApplicableForSeizeOpportunity: 'not_applicable_for_seize_opportunity',\n  DoomBringer: 'doom_bringer',\n  AACannonier: 'aa_cannonier',\n  ArmoredMaiden: 'armored_maiden',\n  MongooseTeam: 'mongoose_team',\n  Horizon: 'horizon',\n  TomosFriends: 'tomos_friends',\n  CityGuard: 'city_guard',\n  DEntertainment: 'd_entertainment',\n  MagicalGirl: 'magical_girl',\n  KouheiChurch: 'kouhei_church',\n  SmartEnjoy: 'smart_enjoy',\n  SpartanSeries: 'spartan_series'\n} as const;\nexport type UnitAlias = typeof UnitAlias[keyof typeof UnitAlias]\n\nexport const unitNumbersForAlias: { [key in UnitAlias]: ReadonlySet<UnitNumber> } = {\n  [UnitAlias.BioroidUnder145cmTall]: new Set([9, 22, 26, 37, 51, 76, 84, 90, 102, 108, 118, 123, 141, 161, 177, 188, 206]),\n  [UnitAlias.ElectricActive]: new Set([6, 11, 75, 84, 113, 115, 132, 139, 174, 179, 201, 221, 231, 235]),\n  [UnitAlias.ArtilleryTypeActive]: new Set([22, 51, 202]),\n  [UnitAlias.Squad21]: new Set([2, 3, 85, 92, 118, 121, 187]),\n  [UnitAlias.CompanionSeries]: new Set([16, 17, 18, 19, 183]),\n  [UnitAlias.SteelLine]: new Set([21, 22, 23, 24, 25, 26, 27, 28, 29]),\n  [UnitAlias.SteelLineExcludingOfficerRanks]: new Set([22, 23, 24, 25, 26, 27, 28]),\n  [UnitAlias.SistersOfValhalla]: new Set([31, 32, 33, 34, 35, 36, 37, 177]),\n  [UnitAlias.AngerOfHorde]: new Set([40, 41, 42, 43, 44, 192, 193, 194]),\n  [UnitAlias.ApplicableForSeizeOpportunity]: new Set([40, 42, 43, 44, 192, 194]),\n  [UnitAlias.NotApplicableForSeizeOpportunity]: new Set([41, 193]),\n  [UnitAlias.DoomBringer]: new Set([51, 52, 53, 54, 55, 56, 182]),\n  [UnitAlias.AACannonier]: new Set([60, 67, 68, 69, 70]),\n  [UnitAlias.ArmoredMaiden]: new Set([61, 62, 65, 66]),\n  [UnitAlias.MongooseTeam]: new Set([80, 81, 82, 83, 84]),\n  [UnitAlias.Horizon]: new Set([85, 87, 88, 89, 90]),\n  [UnitAlias.TomosFriends]: new Set([25, 43, 81, 125]),\n  [UnitAlias.CityGuard]: new Set([111, 112, 113, 114, 115, 179, 184]),\n  [UnitAlias.DEntertainment]: new Set([121, 123, 124, 125, 127, 128, 129, 171, 174, 178]),\n  [UnitAlias.MagicalGirl]: new Set([123, 127]),\n  [UnitAlias.KouheiChurch]: new Set([126, 138, 139, 140, 236]),\n  [UnitAlias.SmartEnjoy]: new Set([205, 206]),\n  [UnitAlias.SpartanSeries]: new Set([215, 216, 217])\n} as const;\n\nexport function isUnitAlias(arg: string): arg is UnitAlias {\n  return Object.keys(unitNumbersForAlias).some(alias => alias === arg);\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { OverlayTrigger, Popover } from 'react-bootstrap';\n\nimport { UnitAlias, unitNumbersForAlias } from '../../domain/UnitAlias';\nimport { UnitNumber } from '../../domain/UnitBasicInfo';\n\nconst UnitAliasView: React.FC<{\n  unitAlias: UnitAlias,\n  exceptUnit?: UnitNumber\n}> = ({ unitAlias, exceptUnit }) => {\n  const { t } = useTranslation();\n  const popover = (\n    <Popover id=\"popover-unit-alias\" css={{ opacity: '0.9' }}>\n      <Popover.Content>\n        {[...unitNumbersForAlias[unitAlias]]\n          .filter(n => n !== exceptUnit)\n          .map(n => (<div key={n} css={{ textAlign: 'left' }}>{t('unit:display', { number: n })}</div>))}\n      </Popover.Content>\n    </Popover>\n  );\n\n  return (\n    <OverlayTrigger\n      placement='auto'\n      overlay={popover}\n    >\n      <span css={{\n        display: 'inline-block',\n        cursor: 'help',\n        textDecoration: 'underline'\n      }}>\n        {t(`effect:unit.${unitAlias}`)}\n      </span>\n    </OverlayTrigger>\n  );\n};\n\nexport default UnitAliasView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport UnitAliasView from './UnitAliasView';\n\nimport { SkillEffectTarget, SkillEffectTargetKind } from '../../domain/skill/SkillEffectData';\nimport { UnitNumber } from '../../domain/UnitBasicInfo';\nimport { isUnitAlias } from '../../domain/UnitAlias';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst SkillEffectTargetView: React.FC<{\n  target: SkillEffectTarget,\n  selfUnitNumber: UnitNumber\n}> = ({ target, selfUnitNumber }) => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      {t(`effect:effect.target.kind.${target.kind}`)}\n      {'conditions' in target ? t('effect:of_preposition') : null}\n      {\n        'conditions' in target && target.conditions ?\n          target.conditions.map((cond, i, arr ) => {\n            const separator: string = ++i < arr.length ? t('effect:unit_separator') : '';\n\n            if (typeof cond === 'number') {\n              return t('effect:with_quotes', { value: t('unit:display', { number: cond }) }) + separator;\n            } else if (typeof cond === 'string') {\n              return isUnitAlias(cond) ?\n                (\n                  <React.Fragment key={cond}>\n                    <UnitAliasView unitAlias={cond} exceptUnit={target.kind === SkillEffectTargetKind.AllyExceptSelf ? selfUnitNumber : undefined} />\n                    {separator}\n                  </React.Fragment>\n                ) :\n                t(`effect:unit.${cond}`) + separator;\n            } else if ('alias' in cond) {\n              const unit: string | null =\n                'type' in cond ?\n                  t(`effect:unit.${cond.type}`) :\n                  'role' in cond ?\n                    t(`effect:unit.${cond.role}`) :\n                    null;\n              const except = 'except' in cond ? cond.except : undefined;\n\n              return (\n                <React.Fragment key={cond.alias}>\n                  {ifNonNullable(\n                    except,\n                    v => (\n                      <React.Fragment>\n                        {\n                          v === selfUnitNumber ?\n                            t('effect:unit.self') :\n                            t('effect:with_quotes', { value: t('unit:display', { number: v }) })\n                        }\n                        {t('effect:except_preposition')}\n                      </React.Fragment>\n                    )\n                  )}\n                  <UnitAliasView unitAlias={cond.alias} exceptUnit={except} />\n                  {unit ? t('effect:of_preposition') : null}\n                  {unit}\n                  {separator}\n                </React.Fragment>\n              );\n            } else if ('not_alias' in cond) {\n              return (\n                <React.Fragment key={cond.not_alias}>\n                  <UnitAliasView unitAlias={cond.not_alias} />\n                  {t('effect:negative_form')}\n                  {'type' in cond ? t(`effect:unit.${cond.type}`) : t('effect:unit.unit')}\n                  {separator}\n                </React.Fragment>\n              );\n            } else {\n              return t(`effect:unit.${cond.type}`) + t(`effect:unit.${cond.role}`) + separator;\n            }\n          }) :\n          null\n      }\n    </React.Fragment>\n  );\n};\n\nexport default SkillEffectTargetView;\n","import { ActiveSkillEffective, PassiveSkillEffective } from './SkillEffective';\nimport {\n  DamageAttribute,\n  SkillApCostValue,\n  SkillRangeValue\n} from './UnitSkillData';\nimport { Effect } from '../Effect';\nimport {\n  EquipmentEffectOnly,\n  IntegerValueEffectKey,\n  MicroValueEffectKey,\n  MilliPercentageEffectKey,\n  MilliValueEffectKey,\n  MultipleMilliPercentageEffectKey,\n  NoValueEffectKey,\n  PushPullEffectKey,\n  RangeUpDownEffectKey\n} from './SkillEffect';\nimport {\n  IntegerValue,\n  MilliPercentageValue,\n  ValueUnit\n} from '../ValueUnit';\nimport {\n  SelfSkillEffectActivationCondition,\n  SkillEffectActivationTrigger,\n  TargetSkillEffectActivationCondition\n} from './SkillEffectActivationCondition';\nimport { SkillAreaType } from './SkillAreaOfEffect';\nimport { SkillEffectActivationRate } from './SkillEffectActivationRate';\nimport { SkillEffectScaleFactor } from './SkillEffectScaleFactor';\nimport { SkillEffectTag, SkillEffectTagStackValue } from './SkillEffectTag';\nimport { SkillEffectTarget } from './SkillEffectData';\nimport { SkillEffectTerm, SkillEffectTermRoundsValue } from './SkillEffectTerm';\nimport { SkillEffectTimesValue } from './SkillEffectTimesValue';\nimport { UnitForms } from '../UnitFormValue';\nimport { UnitNumber } from '../UnitBasicInfo';\n\ntype SkillEffectAddition = Readonly<{\n  tag?: SkillEffectTag,\n  max_stack?: SkillEffectTagStackValue,\n  term?:\n    typeof SkillEffectTerm['Immediate' | 'Infinite'] |\n    {\n      readonly [SkillEffectTerm.ForRounds]: SkillEffectTermRoundsValue\n    },\n  rate?: SkillEffectActivationRate | MilliPercentageValue,\n  times?: SkillEffectTimesValue,\n  cannot_be_dispelled?: true\n}>\n\ntype ValueWithAddition<T extends ValueUnit> =\n  { readonly [key in T]: number } & SkillEffectAddition\n\ntype TagStackEffectValue = { tag: SkillEffectTag } & Omit<SkillEffectAddition, 'tag'>\n\nexport type SkillEffectValue = Readonly<{\n  [E in Exclude<Effect, EquipmentEffectOnly>]?:\n    E extends NoValueEffectKey ?\n      SkillEffectAddition :\n    E extends typeof Effect.CooperativeAttack ?\n      { unit: UnitNumber, active: 1 | 2 } & SkillEffectAddition :\n    E extends PushPullEffectKey ?\n      IntegerValue<1 | 2> & SkillEffectAddition :\n    E extends RangeUpDownEffectKey ?\n      IntegerValue<1 | 2 | 3> & SkillEffectAddition :\n    E extends IntegerValueEffectKey ?\n      ValueWithAddition<'value'> :\n    E extends MilliValueEffectKey ?\n      ValueWithAddition<'milliValue'> :\n    E extends MicroValueEffectKey ?\n      ValueWithAddition<'microValue'> :\n    E extends typeof Effect.BattleContinuation ?\n      ValueWithAddition<'value'> |\n      ValueWithAddition<'milliPercentage'> :\n    E extends typeof Effect['BuffRemoval' | 'DebuffRemoval' | 'PreventsEffect'] ?\n      ({\n        effect: Effect\n      } | {\n        effects: ReadonlyArray<Effect>\n      }) & SkillEffectAddition :\n    E extends typeof Effect.ActivationRatePercentageUp ?\n      { effect: Effect } & ValueWithAddition<'milliPercentage'> :\n    E extends typeof Effect.AbsolutelyActivated ?\n      {\n        tag: SkillEffectTag,\n        effect: Effect\n      } & Omit<SkillEffectAddition, 'tag'> :\n    E extends typeof Effect.TagStack ?\n      TagStackEffectValue :\n    E extends typeof Effect.TagRelease ?\n      TagStackEffectValue |\n      ReadonlyArray<TagStackEffectValue> :\n    E extends typeof Effect.TagUnstack ?\n      {\n        tag: SkillEffectTag,\n        effect?: Effect,\n        value: number\n      } & Omit<SkillEffectAddition, 'tag'> :\n    E extends typeof Effect['FormChange' | 'FormRelease'] ?\n      { form: UnitForms } & SkillEffectAddition :\n    E extends typeof Effect['DamageMultiplierUpByStatus'] ?\n      ValueWithAddition<'milliPercentage'> & { status: 'eva' } :\n    E extends MultipleMilliPercentageEffectKey ?\n      ValueWithAddition<'milliPercentage'> |\n      ReadonlyArray<ValueWithAddition<'milliPercentage'>> :\n    E extends Exclude<MilliPercentageEffectKey, MultipleMilliPercentageEffectKey> ?\n      ValueWithAddition<'milliPercentage'> :\n      never\n}>\n\nexport type AroundSkillEffectValue = Readonly<{\n  [Effect.FixedDamage]?: ValueWithAddition<'milliPercentage'>\n}>\n\nexport type SelfSkillEffect = Readonly<{\n  conditions?:\n    readonly [SelfSkillEffectActivationCondition] |\n    readonly [SelfSkillEffectActivationCondition, SelfSkillEffectActivationCondition],\n  effective?: PassiveSkillEffective,\n  scale_factor?: SkillEffectScaleFactor,\n  details: { readonly self: SkillEffectValue }\n}>\n\ntype TargetSkillEffect = Readonly<{\n  conditions?:\n    readonly [TargetSkillEffectActivationCondition] |\n    readonly [TargetSkillEffectActivationCondition, TargetSkillEffectActivationCondition],\n  effective?: PassiveSkillEffective,\n  scale_factor?: SkillEffectScaleFactor,\n  target: SkillEffectTarget,\n  details: {\n    readonly self?: SkillEffectValue,\n    readonly target?: SkillEffectValue\n  }\n}>\n\ntype AroundSkillEffect = Readonly<{\n  conditions: readonly [SkillEffectActivationTrigger],\n  details: { readonly around: AroundSkillEffectValue }\n}>\n\nexport function isSelfSkillEffect(arg: SkillEffect): arg is SelfSkillEffect {\n  return !isTargetSkillEffect(arg) && !isAroundSkillEffect(arg);\n}\n\nexport function isTargetSkillEffect(arg: SkillEffect): arg is TargetSkillEffect {\n  return 'target' in arg;\n}\n\nexport function isAroundSkillEffect(arg: SkillEffect): arg is AroundSkillEffect {\n  return 'around' in arg.details;\n}\n\nexport type SkillEffect = SelfSkillEffect | TargetSkillEffect | AroundSkillEffect\n\nexport type DamageDeal = {\n  milliPercentage: number,\n  attribute?: DamageAttribute,\n  effective?: ActiveSkillEffective\n}\n\nexport type ActiveSkill = Readonly<{\n  damage_deal?: DamageDeal,\n  cost: SkillApCostValue,\n  range: SkillRangeValue,\n  area: SkillAreaType,\n  effects: ReadonlyArray<SkillEffect>\n}>\n\nexport type ActiveSkillAsEquipmentEffect = Readonly<{\n  cost: SkillApCostValue,\n  range: SkillRangeValue,\n  area: SkillAreaType,\n  equipment_effects: ReadonlyArray<SkillEffect>\n}>\n\nexport type PassiveSkill = Readonly<{\n  area: SkillAreaType,\n  effects: ReadonlyArray<SkillEffect>\n}>\n\nexport type PassiveSkillAsEquipmentEffect = Readonly<{\n  area: SkillAreaType,\n  equipment_effects: ReadonlyArray<SkillEffect>\n}>\n","import { PassiveSkillEffective } from '../../domain/skill/SkillEffective';\nimport { SkillEffect } from '../../domain/skill/UnitSkills';\nimport { SkillEffectScaleFactor } from '../../domain/skill/SkillEffectScaleFactor';\nimport { isTargetSkillEffectData, SkillEffectTarget, SkillEffectTargetKind } from '../../domain/skill/SkillEffectData';\n\ntype SkillEffectTargets =\n  { self?: true } |\n  { self?: true, target: true } |\n  { self?: true, target: true } & SkillEffectTarget |\n  { around?: true }\n\ntype EnemyTargetConditions<T extends SkillEffectTarget = SkillEffectTarget> =\n  Required<Extract<T, { kind: typeof SkillEffectTargetKind.Enemy }>>\n\nclass SkillEffectConditionViewModel {\n\n  readonly #effect: SkillEffect;\n\n  constructor(effect: SkillEffect) {\n    this.#effect = effect;\n  }\n\n  get enemyTargetConditions(): EnemyTargetConditions | undefined {\n    const needEnemyConditions = !this.#effect.conditions && !('target' in this.#effect.details);\n\n    return (\n      needEnemyConditions &&\n      isTargetSkillEffectData(this.#effect) &&\n      this.#effect.target.kind === SkillEffectTargetKind.Enemy &&\n      'conditions' in this.#effect.target &&\n      this.#effect.target.conditions ?\n        { kind: this.#effect.target.kind, conditions: this.#effect.target.conditions } :\n        undefined\n    );\n  }\n\n  get onlyAdditional(): boolean {\n    return !this.#effect.conditions && !this.enemyTargetConditions;\n  }\n\n  get hasMultipleConditions(): boolean {\n    return (this.#effect.conditions?.length ?? 0) > 1;\n  }\n\n  get effective(): PassiveSkillEffective | undefined {\n    return 'effective' in this.#effect ? this.#effect.effective : undefined;\n  }\n\n  get scaleFactor(): SkillEffectScaleFactor | undefined {\n    return 'scale_factor' in this.#effect ? this.#effect.scale_factor : undefined;\n  }\n\n  get effectTargets(): SkillEffectTargets {\n    const hasSelfEffect   = 'self' in this.#effect.details;\n    const hasTargetEffect = 'target' in this.#effect.details;\n\n    if (hasTargetEffect && isTargetSkillEffectData(this.#effect)) {\n      // target details already shown by condition state\n      const needNotDetails = this.#effect.conditions?.some(cond => 'state' in cond && 'target' in cond.state);\n\n      return Object.assign(\n        hasSelfEffect ? { self: true } as const : {},\n        {\n          target: true,\n          ...(needNotDetails ? {} : this.#effect.target)\n        }\n      );\n    } else {\n      return hasSelfEffect ? { self: true } : { around: true };\n    }\n  }\n\n}\n\nexport default SkillEffectConditionViewModel;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { ReactNode } from 'react';\nimport { TFunction } from 'i18next';\nimport { useTranslation } from 'react-i18next';\n\nimport SkillEffectTargetView from './SkillEffectTargetView';\nimport UnitAliasView from './UnitAliasView';\n\nimport {\n  ActivationEnemyState,\n  ActivationSelfState,\n  ActivationSquadState,\n  ActivationTargetState,\n  NumOfUnitsInSquadState,\n  SelfSkillEffectActivationCondition,\n  SelfSkillEffectActivationState,\n  SkillEffectActivationCondition,\n  SkillEffectActivationState,\n  TargetSkillEffectActivationCondition,\n  UnitAliasExceptUnit\n} from '../../domain/skill/SkillEffectActivationCondition';\nimport { Effect } from '../../domain/Effect';\nimport { EffectActivationState } from '../../domain/EffectActivationState';\nimport { EffectTrigger } from '../../domain/EffectTrigger';\nimport { PassiveSkillEffective } from '../../domain/skill/SkillEffective';\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\nimport { SkillEffect, isTargetSkillEffect } from '../../domain/skill/UnitSkills';\nimport { SkillEffectScaleFactor } from '../../domain/skill/SkillEffectScaleFactor';\nimport { SkillEffectTarget } from '../../domain/skill/SkillEffectData';\nimport { UnitAlias, isUnitAlias, unitNumbersForAlias } from '../../domain/UnitAlias';\nimport { UnitNumber, UnitRole } from '../../domain/UnitBasicInfo';\n\nimport SkillEffectConditionViewModel from './SkillEffectConditionViewModel';\n\nimport { Entry, typedEntries } from '../../util/object';\nimport { ifNonNullable, ifTruthy } from '../../util/react';\nimport { isReadonlyArray, ValueOf } from '../../util/type';\n\nfunction needSeparator(array: ReadonlyArray<unknown>, index: number): boolean {\n  return ++index < array.length;\n}\n\nfunction stateValuesView(\n  entry: Entry<ActivationSelfState> | Entry<ActivationTargetState>,\n  unitNumber: UnitNumber,\n  t: TFunction\n): ReactNode {\n  switch (entry[0]) {\n  case EffectActivationState.HpGreaterOrEqual:\n  case EffectActivationState.HpLessOrEqual:\n  case EffectActivationState.HpGreaterThan:\n  case EffectActivationState.HpLessThan:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { value: entry[1] })}</span>);\n  case EffectActivationState.StatusGreaterThanSelf:\n  case EffectActivationState.StatusLessThanSelf:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, entry[1])}</span>);\n  case EffectActivationState.StatusGreaterOrEqualThan:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, entry[1])}</span>);\n  case EffectActivationState.Affected:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { effect: entry[1] })}</span>);\n  case EffectActivationState.NotAffected: {\n    const effects = entry[1]\n      .map(e => t(`effect:effect.name.${e}`))\n      .join(t('effect:and_symbolic_separator'));\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { effects })}</span>);\n  }\n  case EffectActivationState.AffectedBy:\n    return unitStateView(entry[0], entry[1], unitNumber, t);\n  case EffectActivationState.Tagged:\n  case EffectActivationState.NotTagged:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { tag: entry[1] })}</span>);\n  case EffectActivationState.TaggedAffected:\n    return (\n      <span>\n        {t(\n          `effect:condition.state.${entry[0]}`,\n          {\n            tag: entry[1].tag,\n            effect: entry[1].effects.map(e => t(`effect:effect.name.${e}`)).join(t('effect:and_symbolic_separator'))\n          }\n        )}\n      </span>\n    );\n  case EffectActivationState.StackGe:\n    if ('effect' in entry[1]) {\n      return t(\n        'effect:condition.state.tag_effect_stack_ge',\n        {\n          tag: entry[1].tag,\n          effect: entry[1].effect,\n          value: entry[1].value\n        }\n      );\n    } else {\n      return t(\n        'effect:condition.state.tag_stack_ge',\n        { tag: entry[1].tag, value: entry[1].value }\n      );\n    }\n  case EffectActivationState.Form:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { form: entry[1] })}</span>);\n  case EffectActivationState.Equipped: {\n    const equipment = t(`equipment:${entry[1]}`);\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { equipment })}</span>);\n  }\n  case EffectActivationState.NotEquipped: {\n    const equipments = entry[1]\n      .map(e => `${t('effect:with_quotes', { value: t(`equipment:${e}`) })}`)\n      .join(t('effect:unit_separator'));\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { equipments })}</span>);\n  }\n  case EffectActivationState.Grid:\n    return (<span>{t(`effect:condition.state.${entry[0]}`, { grid: entry[1] })}</span>);\n  case EffectActivationState.Unit:\n    return unitStateView(entry[0], entry[1], unitNumber, t);\n  default: {\n    const _exhaustiveCheck: never = entry;\n    return _exhaustiveCheck;\n  }\n  }\n}\n\nfunction unitStateView(key: typeof EffectActivationState.AffectedBy, unit: ValueOf<ActivationSelfState, typeof EffectActivationState.AffectedBy>, selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(key: typeof EffectActivationState.InSquad, unit: ValueOf<ActivationSquadState, typeof EffectActivationState.InSquad> | ReadonlyArray<UnitNumber>, selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(key: typeof EffectActivationState.NotInSquad, unit: ValueOf<ActivationSquadState, typeof EffectActivationState.NotInSquad> | 41, selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(key: typeof EffectActivationState.Unit, unit: typeof UnitAlias.SteelLine, selfUnitNumber: UnitNumber, t: TFunction): Exclude<ReactNode, undefined>\nfunction unitStateView(\n  key: typeof EffectActivationState['AffectedBy' | 'InSquad' | 'NotInSquad' | 'Unit'],\n  unit:\n    UnitNumber |\n    ReadonlyArray<UnitNumber> |\n    { unit: 23, effect: typeof Effect.FollowUpAttack } |\n    { unit: 83, effect: typeof Effect.TargetProtect } |\n    UnitAliasExceptUnit<typeof UnitAlias.MongooseTeam, 80> |\n    { alias: typeof UnitAlias.SteelLine, role: typeof UnitRole.Supporter } |\n    typeof UnitAlias.ElectricActive |\n    typeof UnitAlias.SteelLine |\n    typeof UnitAlias.SteelLineExcludingOfficerRanks |\n    typeof UnitAlias.Horizon |\n    typeof UnitAlias.KouheiChurch |\n    typeof SkillAreaType.CrossAdjacent |\n    'golden_factory',\n  selfUnitNumber: UnitNumber,\n  t: TFunction\n): Exclude<ReactNode, undefined> {\n  function unitName(unit: UnitNumber): string {\n    return t('effect:with_quotes', { value: t('unit:display', { number: unit }) });\n  }\n\n  if (typeof unit === 'number') {\n    return (\n      <span>{t(`effect:condition.state.${key}`, { unit: unitName(unit) })}</span>\n    );\n  } else if (isReadonlyArray(unit)) {\n    const units = unit.map(u => unitName(u)).join(t('effect:unit_separator'));\n    return (\n      <span>{t(`effect:condition.state.${key}`, { unit: units })}</span>\n    );\n  } else if (typeof unit === 'string') {\n    if (isUnitAlias(unit)) {\n      // TODO: Move excepting logic from view.\n      const isSquadCond = key === EffectActivationState.InSquad || key === EffectActivationState.NotInSquad;\n      return (\n        <React.Fragment>\n          {ifTruthy(\n            isSquadCond && unitNumbersForAlias[unit].has(selfUnitNumber),\n            (<span>{t('effect:unit.self')}{t('effect:except_preposition')}</span>)\n          )}\n          <UnitAliasView unitAlias={unit} exceptUnit={isSquadCond ? selfUnitNumber : undefined} />\n          <span>{t(`effect:condition.state.${key}`, { unit: '' })}</span>\n        </React.Fragment>\n      );\n    } else {\n      return (<span>{t(`effect:condition.state.${key}`, { unit: t(`effect:unit.${unit}`) })}</span>);\n    }\n  } else if ('alias' in unit) {\n    return 'except' in unit ?\n      (\n        <React.Fragment>\n          {t('effect:with_quotes', { value: t('unit:display', { number: unit.except }) })}\n          {t('effect:except_preposition')}\n          <UnitAliasView unitAlias={unit.alias} exceptUnit={unit.except} />\n          {t(`effect:condition.state.${key}`, { unit: '' })}\n        </React.Fragment>\n      ) :\n      (\n        <React.Fragment>\n          <UnitAliasView unitAlias={unit.alias} />\n          {t('effect:of_preposition')}\n          {t(`effect:unit.${unit.role}`)}\n          {t(`effect:condition.state.${key}`, { unit: '' })}\n        </React.Fragment>\n      );\n  } else {\n    return (<span>{t('effect:condition.state.affected_effect_by', unit as Record<string, unknown>)}</span>);\n  }\n}\n\nconst SelfAndTargetStateView: React.FC<{\n  state: ReadonlyArray<ActivationSelfState>,\n  unitNumber: UnitNumber\n} | {\n  state: ReadonlyArray<ActivationTargetState>,\n  target: SkillEffectTarget,\n  unitNumber: UnitNumber\n}> = (props) => {\n  const { t } = useTranslation();\n  const { state, unitNumber } = props;\n\n  return (\n    <React.Fragment>\n      {\n        'target' in props ?\n          (<React.Fragment>\n            <SkillEffectTargetView target={props.target} selfUnitNumber={unitNumber} />\n            {t('effect:case_particle')}\n          </React.Fragment>) :\n          t('effect:condition.target.self')\n      }\n      {state.map((v, i: number) => {\n        return (\n          <React.Fragment key={JSON.stringify(v)}>\n            {typedEntries(v).map((entry, i, entries) => (\n              <React.Fragment key={entry[0]}>\n                {stateValuesView(entry, unitNumber, t)}\n                {ifTruthy(needSeparator(entries, i), (<span>{t('effect:and_symbolic_separator')}</span>))}\n              </React.Fragment>\n            ))}\n            {ifTruthy(needSeparator(state, i), (<span>{t('effect:or_symbolic_separator')}</span>))}\n          </React.Fragment>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\ntype NumOfCrossAdjacent = NumOfUnitsInSquadState['num_of_units'] & { unit: typeof SkillAreaType.CrossAdjacent }\n\nfunction isNumOfCrossAdjacent(arg: NumOfUnitsInSquadState['num_of_units']): arg is NumOfCrossAdjacent {\n  return arg.unit === SkillAreaType.CrossAdjacent;\n}\n\nconst SquadStateView: React.FC<{\n  state: ValueOf<SkillEffectActivationState, 'squad'>,\n  unitNumber: UnitNumber\n}> = ({ state, unitNumber }) => {\n  const { t } = useTranslation();\n\n  const numOfCrossAdjacent = (state: NumOfCrossAdjacent): string => {\n    return 'equal' in state ?\n      t('effect:condition.state.cross_adjacent_eq', state) :\n      t('effect:condition.state.cross_adjacent_ge', state);\n  };\n\n  return (\n    <React.Fragment>\n      {t('effect:condition.target.squad')}\n      {\n        isReadonlyArray(state) ?\n          unitStateView(EffectActivationState.InSquad, state.map(s => s.in_squad), unitNumber, t) :\n          'num_of_units' in state ?\n            isNumOfCrossAdjacent(state.num_of_units) ?\n              numOfCrossAdjacent(state.num_of_units) :\n              'greater_or_equal' in state.num_of_units ?\n                t('effect:condition.state.num_of_units_ge', state.num_of_units as Record<string, unknown>) :\n                t('effect:condition.state.num_of_units_le', state.num_of_units) :\n            'not_in_squad' in state ?\n              unitStateView(EffectActivationState.NotInSquad, state.not_in_squad, unitNumber, t) :\n              unitStateView(EffectActivationState.InSquad, state.in_squad, unitNumber, t)\n      }\n    </React.Fragment>\n  );\n};\n\nconst EnemyStateView: React.FC<{\n  state: ActivationEnemyState\n}> = ({ state }) => {\n  const { t } = useTranslation();\n  const { num_of_units } = state;\n\n  return (\n    <React.Fragment>\n      {\n        'unit' in num_of_units ?\n          t('effect:condition.target.enemy_unit', num_of_units) :\n          t('effect:condition.target.enemy')\n      }\n      {\n        'equal' in num_of_units ?\n          t('effect:condition.state.num_of_enemies_eq', num_of_units) :\n          'less_or_equal' in num_of_units ?\n            t('effect:condition.state.num_of_enemies', num_of_units as Record<string, unknown>) :\n            t('effect:condition.state.num_of_enemies_ge', num_of_units as Record<string, unknown>)\n      }\n    </React.Fragment>\n  );\n};\n\nconst TriggerView: React.FC<{\n  condition: SkillEffectActivationCondition,\n  unitNumber: UnitNumber\n}> = ({ condition, unitNumber }) => {\n  const { t } = useTranslation();\n\n  if (!('trigger' in condition)) {\n    return null;\n  }\n\n  switch (condition.trigger) {\n  case EffectTrigger.StartRound:\n    return condition.round ?\n      'at' in condition.round ?\n        t('effect:condition.trigger.round.at', { round: condition.round.at }) :\n        'from' in condition.round ?\n          t('effect:condition.trigger.round.from', { round: condition.round.from }) :\n          t('effect:condition.trigger.round.until', { round: condition.round.until }) :\n      t('effect:condition.trigger.start_round');\n  case EffectTrigger.UseActive2:\n  case EffectTrigger.HitActive1:\n  case EffectTrigger.HitActive2:\n    return t(`effect:condition.trigger.${condition.trigger}`, { unit: unitNumber });\n  case EffectTrigger.SeizeOpportunity:\n    return (\n      <React.Fragment>\n        {\n          [...unitNumbersForAlias[UnitAlias.NotApplicableForSeizeOpportunity]].map(number =>\n            t('effect:with_quotes', { value: t('unit:display', { number }) })\n          ).join(t('effect:unit_separator'))\n        }\n        {t('effect:except_preposition')}\n        <UnitAliasView unitAlias={UnitAlias.ApplicableForSeizeOpportunity} />\n        {t('effect:case_particle')}\n        {t(`effect:condition.trigger.${condition.trigger}`)}\n      </React.Fragment>\n    );\n  default:\n    return t(`effect:condition.trigger.${condition.trigger}`);\n  }\n};\n\nconst ConditionStateView: React.FC<{\n  condition: SelfSkillEffectActivationCondition,\n  unitNumber: UnitNumber\n} | {\n  condition: TargetSkillEffectActivationCondition,\n  target: SkillEffectTarget,\n  unitNumber: UnitNumber\n}> = (props) => {\n  const { t } = useTranslation();\n  const { unitNumber } = props;\n\n  if (!('state' in props.condition)) {\n    return null;\n  }\n\n  const Separator = ({ show }: { show: boolean }) => ifTruthy(show, t('effect:and_symbolic_separator'));\n  const NotTargetStateView = ({ entry, unitNumber, needSeparator }: {\n    entry: Entry<SelfSkillEffectActivationState>,\n    unitNumber: UnitNumber,\n    needSeparator: boolean\n  }) => {\n    const [key, value] = entry;\n    if (key === 'self') {\n      return (\n        <React.Fragment key={key}>\n          <SelfAndTargetStateView state={value} unitNumber={unitNumber} />\n          <Separator show={needSeparator} />\n        </React.Fragment>\n      );\n    } else if (key === 'squad') {\n      return (\n        <React.Fragment key={key}>\n          <SquadStateView key={key} state={value} unitNumber={unitNumber} />\n          <Separator show={needSeparator} />\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment key={key}>\n          <EnemyStateView state={value}/>\n          <Separator show={needSeparator} />\n        </React.Fragment>\n      );\n    }\n  };\n\n  return (\n    <React.Fragment>\n      {'target' in props ?\n        typedEntries(props.condition.state).map((entry, i, array) =>\n          entry[0] === 'target' ?\n            (\n              <React.Fragment key={entry[0]}>\n                <SelfAndTargetStateView state={entry[1]} target={props.target} unitNumber={unitNumber} />\n                <Separator show={needSeparator(array, i)} />\n              </React.Fragment>\n            ) :\n            entry[0] === 'squad' ?\n              (\n                <React.Fragment key={entry[0]}>\n                  <SquadStateView state={entry[1]} unitNumber={unitNumber} />\n                  <Separator show={needSeparator(array, i)} />\n                </React.Fragment>\n              ) :\n              (<NotTargetStateView key={entry[0]} entry={entry} unitNumber={unitNumber} needSeparator={needSeparator(array, i)} />)\n        ) :\n        typedEntries(props.condition.state).map((entry, i, array) => (\n          <NotTargetStateView key={entry[0]} entry={entry} unitNumber={unitNumber} needSeparator={needSeparator(array, i)} />\n        ))\n      }\n      {t('effect:case')}\n    </React.Fragment>\n  );\n};\n\nconst ConditionRow: React.FC<{\n  condition: SelfSkillEffectActivationCondition,\n  unitNumber: UnitNumber\n} | {\n  condition: TargetSkillEffectActivationCondition,\n  target: SkillEffectTarget,\n  unitNumber: UnitNumber\n}> = (props) => {\n  const { t } = useTranslation();\n  const { condition, unitNumber } = props;\n  const needSeparator = 'trigger' in condition && 'state' in condition;\n\n  return (\n    <span>\n      <TriggerView condition={condition} unitNumber={unitNumber} />\n      {ifTruthy(needSeparator, t('effect:separator'))}\n      {'target' in props ?\n        <ConditionStateView condition={props.condition} target={props.target} unitNumber={unitNumber} /> :\n        <ConditionStateView condition={props.condition} unitNumber={unitNumber} />}\n    </span>\n  );\n};\n\nconst EnemyConditionRow: React.FC<{\n  target: NonNullable<SkillEffectConditionViewModel['enemyTargetConditions']>\n}> = ({ target }) => {\n  const { t } = useTranslation();\n  const unit = target.conditions.map(cond => t(`effect:unit.${cond}`)).join(t('effect:unit_separator'));\n\n  return (\n    <React.Fragment>\n      {t('effect:effect.target.kind.enemy')}\n      {t('effect:case_particle')}\n      {t('effect:condition.state.unit', { unit })}\n      {t('effect:case')}\n    </React.Fragment>\n  );\n};\n\nconst EffectiveView: React.FC<{ effective: PassiveSkillEffective | undefined }> = ({ effective }) => {\n  const { t } = useTranslation();\n\n  return ifNonNullable(effective, v => (<span>{t(`effect:effective.${v}`)}</span>));\n};\n\nconst EffectScaleFactorView: React.FC<{\n  scaleFactor: SkillEffectScaleFactor | undefined,\n  unitNumber: UnitNumber\n}> = ({ scaleFactor, unitNumber }) => {\n  const { t } = useTranslation();\n\n  return ifNonNullable(\n    scaleFactor,\n    v => {\n      if ('per_stack' in v) {\n        return (<span>{t('effect:scale_factor.per_stack', { tag: v.per_stack.tag })}</span>);\n      } else  {\n        switch (v.per_units.type) {\n        case 'all':\n          return (<span>{t('effect:scale_factor.per_units')}</span>);\n        case 'squad': {\n          const { unit = 'ally', except } = v.per_units;\n          const exceptSelf = !!except;\n          return (\n            <React.Fragment>\n              {ifTruthy(exceptSelf, (<span>{t('effect:unit.self')}{t('effect:except_preposition')}</span>))}\n              {\n                isReadonlyArray(unit) ?\n                  (<React.Fragment>\n                    <UnitAliasView unitAlias={unit[0]} exceptUnit={exceptSelf ? unitNumber : undefined} />\n                    <span>&nbsp;{t('effect:unit_separator')}&nbsp;</span>\n                    <UnitAliasView unitAlias={unit[1]} exceptUnit={exceptSelf ? unitNumber : undefined} />\n                  </React.Fragment>) :\n                  isUnitAlias(unit) ?\n                    (<UnitAliasView unitAlias={unit} exceptUnit={exceptSelf ? unitNumber : undefined} />) :\n                    (<span>{t(`effect:unit.${unit}`)}</span>)\n              }\n              <span>{t('effect:scale_factor.num_of_allies')}</span>\n            </React.Fragment>\n          );\n        }\n        case 'enemy':\n          return (\n            <span>\n              {t('effect:unit.enemy')}\n              {ifNonNullable(v.per_units.unit, unit => t(`effect:unit.${unit}`))}\n              {t(`effect:scale_factor.${v.per_units.variation}`)}\n            </span>\n          );\n        }\n      }\n    }\n  );\n};\n\nconst EffectTargetsView: React.FC<{\n  targets: SkillEffectConditionViewModel['effectTargets'],\n  unitNumber: UnitNumber\n}> = ({ targets, unitNumber }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span>\n      {ifTruthy('self' in targets, t('effect:effect.target.self'))}\n      {ifTruthy('self' in targets && 'target' in targets, t('effect:and_separator'))}\n      {\n        'target' in targets ?\n          'kind' in targets ?\n            <SkillEffectTargetView target={targets} selfUnitNumber={unitNumber} /> :\n            t('effect:effect.target.target') :\n          null\n      }\n      {ifTruthy('around' in targets, t('effect:effect.target.around'))}\n      {t('effect:to_preposition')}\n    </span>\n  );\n};\n\nconst SkillEffectConditionView: React.FC<{\n  effect: SkillEffect,\n  unitNumber: UnitNumber\n}> = ({ effect, unitNumber }) => {\n  const { t } = useTranslation();\n  const model = new SkillEffectConditionViewModel(effect);\n\n  const OrConjunction = () => (<div css={{ fontSize: '0.7em' }}>{t('effect:or_conjunction')}</div>);\n  const Conditions = () => {\n    if (isTargetSkillEffect(effect)) {\n      return effect.conditions ?\n        effect.conditions.length === 1 ?\n          (<ConditionRow condition={effect.conditions[0]} target={effect.target} unitNumber={unitNumber} />) :\n          (\n            <React.Fragment>\n              <ConditionRow condition={effect.conditions[0]} target={effect.target} unitNumber={unitNumber} />\n              <OrConjunction />\n              <ConditionRow condition={effect.conditions[1]} target={effect.target} unitNumber={unitNumber} />\n            </React.Fragment>\n          ) :\n        ifNonNullable(model.enemyTargetConditions, conditions => (<EnemyConditionRow target={conditions} />));\n    } else {\n      return ifNonNullable(\n        effect.conditions,\n        conds =>\n          conds.length === 1 ?\n            (<ConditionRow condition={conds[0]} unitNumber={unitNumber} />) :\n            (\n              <React.Fragment>\n                <ConditionRow condition={conds[0]} unitNumber={unitNumber} />\n                <OrConjunction />\n                <ConditionRow condition={conds[1]} unitNumber={unitNumber} />\n              </React.Fragment>\n            )\n      );\n    }\n  };\n  const Additional = ({ children }: { children: ReactNode }) => {\n    return (\n      model.onlyAdditional ?\n        (<span>{children}</span>) :\n        model.hasMultipleConditions ?\n          (<div css={{ marginTop: 5 }}>{children}</div>) :\n          (<span>{t('effect:separator')}{children}</span>)\n    );\n  };\n\n  return (\n    <div>\n      <Conditions />\n      <Additional>\n        <EffectiveView effective={model.effective} />\n        <EffectScaleFactorView scaleFactor={model.scaleFactor} unitNumber={unitNumber} />\n        <EffectTargetsView targets={model.effectTargets} unitNumber={unitNumber} />\n        {t('effect:below_effects')}\n      </Additional>\n    </div>\n  );\n};\n\nexport default SkillEffectConditionView;\n","import { TFunction } from 'i18next';\n\nimport { AroundSkillEffectValue, SkillEffectValue } from '../../domain/skill/UnitSkills';\nimport { Effect } from '../../domain/Effect';\nimport {\n  calcMicroValue,\n  calcMilliPercentageValue,\n  calcMilliValue,\n  MilliPercentageValue\n} from '../../domain/ValueUnit';\nimport { isFormChangeUnitNumber, UnitForms } from '../../domain/UnitFormValue';\n\nimport { Entry } from '../../util/object';\nimport { notFalsy } from '../../util/type';\n\nexport type SkillEffectDetailsEntry =\n  Entry<SkillEffectValue> |\n  Entry<AroundSkillEffectValue>\n\ntype SkillEffectDetailsProps = { tag?: string, detail: string, term?: string }\n\nfunction getDetail(body: string, value: SkillEffectDetailsEntry[1], t: TFunction): string {\n  const rate = 'rate' in value && value.rate ?\n    typeof value.rate === 'string' ?\n      `${t(`effect:rate.${value.rate}`)}${t('effect:separator')}` :\n      `${t('effect:rate.percentage', { value: calcMilliPercentageValue(value.rate) })}${t('effect:separator')}` :\n    '';\n  const additions = [\n    'times' in value && value.times ?\n      t('effect:times', { count: value.times }) : undefined,\n    'max_stack' in value && typeof value.max_stack === 'number' ?\n      value.max_stack === 1 ?\n        t('effect:does_not_stack') :\n        t('effect:max_stack', { count: value.max_stack }) :\n      undefined,\n    'cannot_be_dispelled' in value && value.cannot_be_dispelled ?\n      t('effect:cannot_be_dispelled') : undefined\n  ].filter(notFalsy)\n    .join(t('effect:separator'));\n\n  return `${rate}${body}${additions ? ` (${additions})` : '' }`;\n}\n\nfunction getTerm(value: SkillEffectDetailsEntry[1], t: TFunction): string | undefined {\n  return 'term' in value ?\n    typeof value.term === 'string' ?\n      t(`effect:term.${value.term}`) :\n      value.term && t('effect:term.for_rounds', { value: value.term.for_rounds }) :\n    undefined;\n}\n\nfunction getTag(value: SkillEffectDetailsEntry[1], t: TFunction): string | undefined {\n  return 'tag' in value ?\n    value.tag && t(`effect:tag.${value.tag}`) :\n    undefined;\n}\n\nfunction translateMilliPercentageDetail(\n  effect: string,\n  value: SkillEffectDetailsEntry[1] & MilliPercentageValue,\n  t: TFunction\n): SkillEffectDetailsProps {\n  return {\n    tag: getTag(value, t),\n    detail: getDetail(t(`effect:effect.description.${effect}`, { value: calcMilliPercentageValue(value) }), value, t),\n    term: getTerm(value, t)\n  };\n}\n\ntype TagStackEffectValue = NonNullable<SkillEffectValue[typeof Effect.TagStack]>\n\nfunction translateTagStackDetail(\n  key: typeof Effect['TagStack' | 'TagRelease'],\n  value: TagStackEffectValue,\n  t: TFunction\n): SkillEffectDetailsProps {\n  return {\n    detail: getDetail(t(`effect:effect.description.${key}`, { tag: value.tag }), value, t),\n    term: getTerm(value, t)\n  };\n}\n\nfunction translateEffectNames(value: { effect: Effect } | { effects: ReadonlyArray<Effect> }, t: TFunction): string {\n  return 'effect' in value ?\n    t(`effect:effect.name.${value.effect}`) :\n    value.effects.map(e => t(`effect:effect.name.${e}`)).join(t('effect:separator'));\n}\n\nexport function translateSkillEffectDetails(\n  entry: SkillEffectDetailsEntry,\n  t: TFunction\n): SkillEffectDetailsProps | ReadonlyArray<SkillEffectDetailsProps>{\n  const term = getTerm(entry[1], t);\n\n  switch (entry[0]) {\n  case Effect.ActionCountUp:\n  case Effect.ActionCountDown:\n  case Effect.MinimizeDamage:\n  case Effect.NullifyDamage:\n  case Effect.AllBuffBlocking:\n  case Effect.AllBuffRemoval:\n  case Effect.AllDebuffRemoval:\n  case Effect.ColumnProtect:\n  case Effect.RowProtect:\n  case Effect.TargetProtect:\n  case Effect.ReAttack:\n  case Effect.FollowUpAttack:\n  case Effect.IgnoreBarrierDr:\n  case Effect.IgnoreProtect:\n  case Effect.IgnoreProtectDeactivate:\n  case Effect.Reconnaissance:\n  case Effect.Marked:\n  case Effect.Provoked:\n  case Effect.Immovable:\n  case Effect.Silenced:\n  case Effect.Stunned:\n  case Effect.RefundAp:\n  case Effect.AttackHit:\n  case Effect.AttackCritical:\n  case Effect.IgnoreDef:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`), entry[1], t),\n      term\n    };\n  case Effect.AMG11Construction:\n  case Effect.DeployRabbitDField:\n  case Effect.SummonHologramTiger:\n  case Effect.GoldenFactoryConstruction:\n    return {\n      tag: getTag(entry[1], t),\n      detail: t(`effect:effect.description.${entry[0]}`, { times: entry[1].times }),\n      term\n    };\n  case Effect.CooperativeAttack: {\n    const { unit, active } = entry[1];\n    return {\n      tag: getTag(entry[1], t),\n      detail:\n        isFormChangeUnitNumber(unit) ?\n          t('effect:effect.description.cooperative_attack_form_active', { unit, no: active, form: UnitForms[unit].default }) :\n          t('effect:effect.description.cooperative_attack', { unit, no: active }),\n      term\n    };\n  }\n  case Effect.Push:\n  case Effect.Pull:\n  case Effect.RangeUp:\n  case Effect.RangeDown:\n  case Effect.FixedDamageOverTime:\n  case Effect.FixedFireDamageOverTime:\n  case Effect.FixedIceDamageOverTime:\n  case Effect.FixedElectricDamageOverTime:\n  case Effect.Barrier:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { value: entry[1].value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.BattleContinuation: {\n    const body = 'value' in entry[1] ?\n      t('effect:effect.description.battle_continuation', { value: entry[1].value }) :\n      t('effect:effect.description.battle_continuation_with_hp_rate', { value: calcMilliPercentageValue(entry[1]) });\n\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(body, entry[1], t),\n      term\n    };\n  }\n  case Effect.AtkValueUp:\n  case Effect.DefValueUp:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { value: calcMilliValue(entry[1]) }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.ApUp:\n  case Effect.ApDown:\n  case Effect.SetAp:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { value: calcMicroValue(entry[1]) }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.BuffRemoval:\n  case Effect.DebuffRemoval: {\n    const effects = translateEffectNames(entry[1], t);\n\n    return {\n      detail: getDetail(\n        entry[1].tag ?\n          t(`effect:effect.description.tagged_${entry[0]}`, { tag: entry[1].tag, effects }) :\n          t(`effect:effect.description.${entry[0]}`, { effects }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  }\n  case Effect.PreventsEffect:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { effects: translateEffectNames(entry[1], t) }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.ActivationRatePercentageUp: {\n    const value  = calcMilliPercentageValue(entry[1]);\n    const effect = entry[1].effect;\n\n    return {\n      detail: getDetail(\n        entry[1].tag ?\n          t('effect:effect.description.tagged_activation_rate_percentage_up', { tag: entry[1].tag, effect, value }) :\n          t('effect:effect.description.activation_rate_percentage_up', { effect, value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  }\n  case Effect.AbsolutelyActivated:\n    return {\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`, entry[1]), entry[1], t),\n      term\n    };\n  case Effect.FormChange:\n  case Effect.FormRelease:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(t(`effect:effect.description.${entry[0]}`, { form: entry[1].form }), entry[1], t),\n      term\n    };\n  case Effect.TagStack:\n  case Effect.TagRelease:\n    return 'length' in entry[1] ?\n      entry[1].map(v => translateTagStackDetail(entry[0], v, t)) :\n      translateTagStackDetail(entry[0], entry[1], t);\n  case Effect.TagUnstack:\n    return {\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { tag: entry[1].tag, value: entry[1].value }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.DamageMultiplierUpByStatus:\n    return {\n      tag: getTag(entry[1], t),\n      detail: getDetail(\n        t(`effect:effect.description.${entry[0]}`, { status: entry[1].status, value: calcMilliPercentageValue(entry[1]) }),\n        entry[1],\n        t\n      ),\n      term\n    };\n  case Effect.DefDown:\n  case Effect.AccDown:\n  case Effect.CriDown:\n  case Effect.EvaUp:\n  case Effect.StatusResistUp:\n    return 'length' in entry[1] ?\n      entry[1].map(v => translateMilliPercentageDetail(entry[0], v, t)) :\n      translateMilliPercentageDetail(entry[0], entry[1], t);\n  default: {\n    return translateMilliPercentageDetail(entry[0], entry[1], t);\n  }\n  }\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Badge } from 'react-bootstrap';\nimport { SkillEffectDetailsEntry, translateSkillEffectDetails } from './SkillEffectsTranslator';\n\nimport { AroundSkillEffectValue, SkillEffect, SkillEffectValue } from '../../domain/skill/UnitSkills';\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\n\nimport { ifNonNullable } from '../../util/react';\nimport { typedEntries } from '../../util/object';\nimport { Keyof } from '../../util/type';\n\nconst EffectDetailRow: React.FC<{\n  tag?: string,\n  detail: string,\n  term?: string\n}> = ({ tag, detail, term }) => {\n  const { t } = useTranslation();\n\n  return (\n    <div\n      css={{\n        display: 'flex',\n        fontWeight: 'bold',\n        borderRadius: 3,\n        backgroundColor: '#1c3042',\n        padding: '3px 8px',\n        marginTop: 5\n      }}\n    >\n      <div>\n        {ifNonNullable(tag, v => (<span>{v}{t('effect:tag_separator')}</span>))}\n        <span>{detail}</span>\n      </div>\n      <div\n        css={{\n          marginLeft: 'auto',\n          textAlign: 'right',\n          flexShrink: 0\n        }}>\n        {ifNonNullable(term, v => (<span css={{ marginLeft: 10, color: '#aaa', fontSize: '0.9em' }}>{v}</span>))}\n      </div>\n    </div>\n  );\n};\n\nconst EffectDetail: React.FC<{\n  entry: SkillEffectDetailsEntry\n}> = ({ entry }) => {\n  const { t } = useTranslation();\n  const details = translateSkillEffectDetails(entry, t);\n\n  return 'length' in details ?\n    (<React.Fragment>\n      {details.map(detail => (<EffectDetailRow key={JSON.stringify(detail)} {...detail} />))}\n    </React.Fragment>) :\n    (<EffectDetailRow {...details} />);\n};\n\nconst SkillEffectDetailsView: React.FC<{\n  className?: string,\n  target: Keyof<SkillEffect['details']>,\n  details: NonNullable<SkillEffectValue | AroundSkillEffectValue>,\n  area: SkillAreaType\n}> = ({ className, target, details, area }) => {\n  const { t } = useTranslation();\n  const targetKey =\n    target === 'target' ?\n      area === 'single' ? 'single' : 'area' :\n      target;\n\n  return (\n    <div className={className}>\n      <div><Badge variant=\"light\">{t(`effect:effect.target.${targetKey}`)}</Badge></div>\n      {typedEntries(details).map(entry => (<EffectDetail key={entry[0]} entry={entry} />))}\n    </div>\n  );\n};\n\nexport default SkillEffectDetailsView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\n\nimport SkillEffectConditionView from './SkillEffectConditionView';\nimport SkillEffectDetailsView from './SkillEffectDetailsView';\n\nimport { SkillAreaType } from '../../domain/skill/SkillAreaOfEffect';\nimport { SkillEffect } from '../../domain/skill/UnitSkills';\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo, UnitNumber } from '../../domain/UnitBasicInfo';\n\nimport { useSkillEffects } from '../../state/skill/unitSkillState';\n\nimport { ifNonNullable } from '../../util/react';\n\nconst SkillEffectView: React.FC<{ effect: SkillEffect, unitNumber: UnitNumber, area: SkillAreaType }> = ({ effect, unitNumber, area }) => {\n  const self   = 'self'   in effect.details ? effect.details.self   : undefined;\n  const target = 'target' in effect.details ? effect.details.target : undefined;\n  const around = 'around' in effect.details ? effect.details.around : undefined;\n\n  return (\n    <div\n      css={{\n        border: '1px solid rgba(255, 255, 255, 0.3)',\n        borderRadius: 5,\n        marginTop: 10,\n        padding: 5,\n        '& > .skill-effect-details': {\n          marginTop: 10\n        }\n      }}\n    >\n      <SkillEffectConditionView effect={effect} unitNumber={unitNumber} />\n      {ifNonNullable(self  , v => (<SkillEffectDetailsView className='skill-effect-details' target='self' details={v} area={area} />))}\n      {ifNonNullable(target, v => (<SkillEffectDetailsView className='skill-effect-details' target='target' details={v} area={area} />))}\n      {ifNonNullable(around, v => (<SkillEffectDetailsView className='skill-effect-details' target='around' details={v} area={area} />))}\n    </div>\n  );\n};\n\nconst SkillEffectsView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const values = useSkillEffects(skillType, unit);\n\n  return (\n    ifNonNullable(\n      values,\n      ([effects, area, unitNumber]) => (\n        <div css={{ color: '#ccc', fontSize: '0.8em' }}>\n          {effects.map(effect => (<SkillEffectView key={JSON.stringify(effect)} effect={effect} unitNumber={unitNumber} area={area} />))}\n        </div>\n      )\n    )\n  );\n};\n\nexport default SkillEffectsView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { CSSObject, Theme, jsx } from '@emotion/react';\nimport React, { ReactNode } from 'react';\nimport { Interpolation } from '@emotion/serialize';\nimport { useTranslation } from 'react-i18next';\n\nimport AreaOfEffectGrid from './AreaOfEffectGrid';\nimport { Badge, Col, Container, Row, Tab } from 'react-bootstrap';\nimport DamageDealView from './DamageDealView';\nimport EffectsAsEquipmentDescriptionView from './EffectsAsEquipmentDescriptionView';\nimport NumberValueDropdown from '../common/NumberValueDropdown';\nimport SkillEffectsView from './SkillEffectsView';\n\nimport { SkillLv } from '../../domain/skill/UnitSkillLvValue';\nimport { SkillType } from '../../domain/skill/SkillType';\nimport { UnitBasicInfo } from '../../domain/UnitBasicInfo';\n\nimport {\n  useFormChangeSkillBadge,\n  useRankUpSkillBadge,\n  useSkillCost,\n  useSkillLvState,\n  useSkillName,\n  useSkillRange\n} from '../../state/skill/unitSkillState';\nimport { useSelectedUnit } from '../../state/selector/unitSelectorState';\n\nimport { ifNonNullable, ifTruthy } from '../../util/react';\n\nimport './RankUpSkillBadge.css';\n\nconst skillLabelFontStyle: CSSObject = {\n  fontSize: '1.2em',\n  color: '#ccc'\n};\nconst skillValueFontSizeStyle: CSSObject = {\n  fontSize: '1.2em',\n  fontWeight: 'bold'\n};\nconst skillLabelStyle: CSSObject = {\n  ...skillLabelFontStyle,\n  display: 'inline-block',\n  width: '4em'\n};\nconst skillBadgeStyle: CSSObject = {\n  fontSize: '1.2em',\n  '& > .badge': {\n    whiteSpace: 'normal'\n  }\n};\n\nconst NestedContainer: React.FC<{ css?: Interpolation<Theme>, children: ReactNode }> = ({ children, ...rest }) => (\n  <Container\n    {...rest}\n    fluid\n    css={{ padding: 0 }}\n  >\n    {children}\n  </Container>\n);\n\nconst SkillNameView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const name = useSkillName(skillType, unit);\n\n  return (\n    <div\n      css={{\n        textOverflow: 'ellipsis',\n        overflow: 'hidden',\n        whiteSpace: 'nowrap'\n      }}\n      title={name}\n    >\n      {name}\n    </div>\n  );\n};\n\nconst SkillCostView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const cost = useSkillCost(skillType, unit);\n\n  return (<span css={{ ...skillValueFontSizeStyle, color: '#0af' }}>{cost}</span>);\n};\n\nconst SkillRangeView: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const range = useSkillRange(skillType, unit);\n\n  return (<span css={{ ...skillValueFontSizeStyle, color: '#cc0' }}>{range}</span>);\n};\n\nconst RankUpSkillBadge: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const isRankUpSkill = useRankUpSkillBadge(skillType, unit);\n\n  return (\n    ifTruthy(\n      isRankUpSkill,\n      (<div css={skillBadgeStyle}><Badge variant=\"rank-up-skill\">{t('skill.rank_up')}</Badge></div>)\n    )\n  );\n};\n\nconst FormChangeSkillBadge: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const form = useFormChangeSkillBadge(skillType, unit);\n\n  return (\n    ifNonNullable(\n      form,\n      v => (<div css={skillBadgeStyle}><Badge variant=\"secondary\">{t(`effect:form.${v}`)}</Badge></div>)\n    )\n  );\n};\n\nconst skillLvItems = [...Array(10)].map((v, i) => 10 - i) as ReadonlyArray<SkillLv>;\n\nconst SkillLvDropdown: React.FC<{ skillType: SkillType, unit: UnitBasicInfo }> = ({ skillType, unit }) => {\n  const { t } = useTranslation();\n  const [skillLv, setSkillLv] = useSkillLvState(skillType, unit);\n\n  return (\n    <div css={{\n      display: 'flex',\n      userSelect: 'none'\n    }}>\n      <span css={{ marginRight: 5 }}>{t('lv')}</span>\n      <NumberValueDropdown\n        css={{ flexShrink: 0 }}\n        id=\"skill-lv-dropdown\"\n        items={skillLvItems}\n        value={skillLv}\n        onChange={setSkillLv}\n      />\n    </div>\n  );\n};\n\nconst SkillPane: React.FC<{ eventKey: SkillType }> = ({ eventKey }) => {\n  const { t } = useTranslation();\n  const selectedUnit = useSelectedUnit();\n\n  return (\n    <Tab.Pane eventKey={eventKey}>\n      {ifNonNullable(\n        selectedUnit,\n        unit => (\n          <Container\n            fluid\n            css={{ paddingTop: 5 }}\n          >\n            <Row css={{ fontSize: '1.4em', color: '#eee' }}>\n              <Col xs={8} sm={9}>\n                <SkillNameView skillType={eventKey} unit={unit} />\n              </Col>\n              <Col xs={4} sm={3}>\n                <SkillLvDropdown skillType={eventKey} unit={unit} />\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={{ order: 'last', span: 12 }} sm={{ order: 'first', span: 9 }}>\n                <DamageDealView skillType={eventKey} unit={unit} />\n                <EffectsAsEquipmentDescriptionView skillType={eventKey} unit={unit} />\n                <SkillEffectsView skillType={eventKey} unit={unit} />\n              </Col>\n              <Col xs={{ order: 'first', span: 12 }} sm={{ order: 'last', span: 3 }}>\n                <NestedContainer css={{ userSelect: 'none' }}>\n                  <Row>\n                    <Col xs={8} sm={12}>\n                      <NestedContainer>\n                        <Row css={{ '& > div': { marginTop: 5 } }}>\n                          <Col xs={{ order: 1, span: 12 }} sm={{ order: 2, span: 12 }}>\n                            <span css={skillLabelStyle}>{t('skill.ap')}</span>\n                            <SkillCostView skillType={eventKey} unit={unit} />\n                          </Col>\n                          <Col xs={{ order: 2, span: 12 }} sm={{ order: 3, span: 12 }}>\n                            <span css={skillLabelStyle}>{t('skill.range')}</span>\n                            <SkillRangeView skillType={eventKey} unit={unit} />\n                          </Col>\n                          <Col xs={{ order: 3, span: 12 }} sm={{ order: 1, span: 12 }}>\n                            <FormChangeSkillBadge skillType={eventKey} unit={unit} />\n                            <RankUpSkillBadge skillType={eventKey} unit={unit} />\n                          </Col>\n                        </Row>\n                      </NestedContainer>\n                    </Col>\n                    <Col xs={4} sm={12} css={{ '& > div': { marginTop: 5 } }}>\n                      <div>\n                        <span css={{ color: '#ccc' }}>{t('skill.area')}</span>\n                      </div>\n                      <AreaOfEffectGrid css={{ width: 100 }} skillType={eventKey} unit={unit} />\n                    </Col>\n                  </Row>\n                </NestedContainer>\n              </Col>\n            </Row>\n          </Container>\n        )\n      )}\n    </Tab.Pane>\n  );\n};\n\nexport default SkillPane;\n"],"sourceRoot":""}