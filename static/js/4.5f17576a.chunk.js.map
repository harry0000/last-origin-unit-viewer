{"version":3,"sources":["component/status/SlotUnavailableOverlay.tsx","component/status/equipment/EquipmentItemView.tsx","component/status/equipment/EquipmentPlaceholder.tsx","component/status/equipment/EquipmentRankToggleButton.tsx","state/equipment/availableEquipment.ts","component/status/equipment/EquipmentSelector.tsx"],"names":["SlotUnavailableOverlay","React","memo","show","availableLv","t","useTranslation","ifTruthy","css","display","flexDirection","alignItems","justifyContent","position","inset","backgroundColor","height","width","color","fontWeight","EquipmentItemView","equipmentId","equipmentType","equipmentRank","enhancementLv","Image","fluid","rounded","draggable","sizes","alt","src","process","top","left","right","fontSize","textShadow","join","EquipmentPlaceholder","type","opacity","EquipmentRankToggleButton","slot","rank","useEquipmentRankSelector","selected","select","ButtonGroup","toggle","ToggleButton","variant","className","value","checked","onChange","pickEquipment","unit","equipment","matchExclusive","availableRank","chipEquipment","constSelector","Object","values","equipmentData","filter","isChipEquipment","osEquipment","isOsEquipment","gearEquipment","isGearEquipment","availableChipEquipmentState","selectorFamily","key","get","selectedEquipmentRankState","availableOsEquipmentState","availableGearEquipmentState","useAvailableEquipment","useRecoilValue","no","EffectTypeHeader","children","EquipmentEnhancementLvSelector","SelectorButton","enhanceLv","useEquipmentEnhanceLvSelector","RoundedToggleButton","map","n","EquipmentRankSelector","ChipEquipmentRanks","OsEquipmentRanks","GearEquipmentRanks","rankToggleButtons","EquipmentStatusEffects","effects","useEquipmentStatusEffects","EffectDetailList","Fragment","e","condition","details","JSON","stringify","ifNonNullable","cond","Badge","self","target","undefined","EffectDetailRows","detail","term","v","EquipmentEffects","useEquipmentEffects","EquipmentEffectsAsSkill","useEquipmentEffectsAsSkill","EquipmentItem","eventKey","active","label","rest","Dropdown","Item","RemoveEquipmentItem","EquipmentSelectorMenu","items","useEquipmentRank","Menu","id","item","EquipmentSlotUnavailableOverlay","useEquipmentAvailable","available","EquipmentToggle","forwardRef","ref","onClick","href","preventDefault","EquipmentDropdown","onSelect","find","Toggle","as","Chip1EquipmentDropdown","useUnitEquipment","equip","Chip2EquipmentDropdown","OsEquipmentDropdown","GearEquipmentDropdown","EquipmentSelector","useSelectedUnit"],"mappings":"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","file":"static/js/4.5f17576a.chunk.js","sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport SVGIcon from '../icon/SVGIcon';\nimport { LockClosed } from '../icon/FluentIcons';\n\nimport { CoreLinkSlotAvailableLv } from '../../domain/UnitCoreLink';\nimport { EquipmentSlotAvailableLv } from '../../domain/equipment/UnitEquipment';\n\nimport { ifTruthy } from '../../util/react';\n\nconst SlotUnavailableOverlay: React.FC<{\n  show: boolean,\n  availableLv: CoreLinkSlotAvailableLv | EquipmentSlotAvailableLv\n}> = React.memo(({ show, availableLv }) => {\n  const { t } = useTranslation();\n\n  return (\n    ifTruthy(\n      show,\n      (<span\n        css={{\n          display: 'inline-flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          position: 'absolute',\n          inset: 0,\n          backgroundColor: 'rgba(0, 0, 0, 0.75)'\n        }}>\n        <SVGIcon css={{ height: 24, width: 24 }}>\n          <LockClosed/>\n        </SVGIcon>\n        <span css={{ color: '#ccc', fontWeight: 'bold' }}>\n          {t('lv')}&nbsp;{availableLv}\n        </span>\n      </span>)\n    )\n  );\n});\n\nexport default SlotUnavailableOverlay;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Image } from 'react-bootstrap';\n\nimport { EquipmentEnhancementLevel, EquipmentId, EquipmentRank, EquipmentType } from '../../../domain/equipment/EquipmentData';\n\nconst EquipmentItemView: React.FC<{\n  equipmentId: EquipmentId,\n  equipmentType: EquipmentType,\n  equipmentRank: EquipmentRank,\n  enhancementLv: EquipmentEnhancementLevel\n}> = ({ equipmentId, equipmentType, equipmentRank, enhancementLv }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span css={{ position: 'relative', display: 'inline-block' }}>\n      <Image\n        fluid\n        rounded\n        draggable=\"false\"\n        sizes=\"(max-width: 480px) 47px, (min-width: 480px) 62px\"\n        alt={t(`equipment:${equipmentId}`)}\n        src={`${process.env.PUBLIC_URL}/equip_icon/${equipmentType}_${equipmentId}_${equipmentRank}.webp`}\n      />\n      <Image\n        draggable=\"false\"\n        css={{ position: 'absolute', top: -10, left: -5 }}\n        height={28}\n        width={28}\n        alt={`${t(`equipment:rank.${equipmentRank}`)} ${t(`equipment:type.${equipmentType}`)}`}\n        src={`${process.env.PUBLIC_URL}/icon/${equipmentType}_${equipmentRank}.webp`}\n      />\n      <span\n        css={{\n          position: 'absolute',\n          top: -5,\n          right: 0,\n          color: '#fff',\n          fontSize: '0.9em',\n          fontWeight: 'bold',\n          textShadow: [\n            '1px 1px 0px #000, -1px -1px 0px #000',\n            '-1px 1px 0px #000,  1px -1px 0px #000',\n            '1px 0px 0px #000, -1px  0px 0px #000',\n            '0px 1px 0px #000,  0px -1px 0px #000'\n          ].join()\n        }}\n      >\n        +{enhancementLv}\n      </span>\n    </span>\n  );\n};\n\nexport default EquipmentItemView;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Image } from 'react-bootstrap';\n\nimport { EquipmentType } from '../../../domain/equipment/EquipmentData';\n\nconst EquipmentPlaceholder: React.FC<{ type: EquipmentType }> = React.memo(({ type }) => {\n  const { t } = useTranslation();\n\n  return (\n    <span\n      css={{\n        display: 'inline-flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100%',\n        width: '100%',\n        opacity: 0.5\n      }}\n    >\n      <Image\n        rounded\n        draggable=\"false\"\n        height={32}\n        width={32}\n        alt={t(`equipment:type.${type}`)}\n        src={`${process.env.PUBLIC_URL}/icon/placeholder_${type}.webp`}\n      />\n    </span>\n  );\n});\n\nexport default EquipmentPlaceholder;\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { ButtonGroup, ToggleButton } from 'react-bootstrap';\n\nimport { EquipmentSlotRank } from '../../../state/equipment/UnitEquipmentState';\nimport { useEquipmentRankSelector } from '../../../state/equipment/UnitEquipmentHook';\n\nimport './EquipmentRankToggleButton.css';\n\ntype EquipmentRankToggleButtonProps =\n  { slot: 'chip1', rank: EquipmentSlotRank<'chip1'> } |\n  { slot: 'chip2', rank: EquipmentSlotRank<'chip2'> } |\n  { slot: 'os',    rank: EquipmentSlotRank<'os'> } |\n  { slot: 'gear',  rank: EquipmentSlotRank<'gear'> }\n\nconst EquipmentRankToggleButton: React.FC<EquipmentRankToggleButtonProps> = ({ slot, rank }) => {\n  const { t } = useTranslation();\n  const [selected, select] = useEquipmentRankSelector(slot, rank);\n\n  return (\n    <ButtonGroup toggle>\n      <ToggleButton\n        type='checkbox'\n        variant=\"equipment-rank\"\n        className={rank}\n        value={1}\n        checked={selected}\n        onChange={select}\n      >\n        {t(`equipment.rank.${rank}`)}\n      </ToggleButton>\n    </ButtonGroup>\n  );\n};\n\nexport default EquipmentRankToggleButton;\n","import { constSelector, selectorFamily, useRecoilValue } from 'recoil';\n\nimport {\n  availableRank,\n  Chip,\n  EquipmentData,\n  EquipmentRank,\n  Gear,\n  isChipEquipment,\n  isGearEquipment,\n  isOsEquipment,\n  matchExclusive,\n  Os\n} from '../../domain/equipment/EquipmentData';\nimport { UnitBasicInfo, UnitNumber } from '../../domain/UnitBasicInfo';\n\nimport { equipmentData } from '../../data/equipmentData';\n\nimport { EquipmentSlot, selectedEquipmentRankState } from './UnitEquipmentState';\n\nfunction pickEquipment(unit: UnitNumber, rank: EquipmentRank) {\n  return function<T extends EquipmentData>(equipment: T) {\n    return matchExclusive(unit, equipment) && availableRank(equipment, rank);\n  };\n}\n\nconst chipEquipment = constSelector<ReadonlyArray<Chip>>(Object.values(equipmentData).filter(isChipEquipment));\nconst osEquipment   = constSelector<ReadonlyArray<Os>>(Object.values(equipmentData).filter(isOsEquipment));\nconst gearEquipment = constSelector<ReadonlyArray<Gear>>(Object.values(equipmentData).filter(isGearEquipment));\n\nconst availableChipEquipmentState = selectorFamily<ReadonlyArray<Chip>, [unit: UnitNumber, slot: 'chip1' | 'chip2']>({\n  key: 'availableChipEquipmentState',\n  get: ([unit, slot]) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState(slot));\n    return get(chipEquipment).filter(pickEquipment(unit, rank));\n  }\n});\n\nconst availableOsEquipmentState = selectorFamily<ReadonlyArray<Os>, UnitNumber>({\n  key: 'availableOsEquipmentState',\n  get: (unit) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState('os'));\n    return get(osEquipment).filter(pickEquipment(unit, rank));\n  }\n});\n\nconst availableGearEquipmentState = selectorFamily<ReadonlyArray<Gear>, UnitNumber>({\n  key: 'availableGearEquipmentState',\n  get: (unit) => ({ get }) => {\n    const rank = get(selectedEquipmentRankState('gear'));\n    return get(gearEquipment).filter(pickEquipment(unit, rank));\n  }\n});\n\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'chip1' | 'chip2'): ReadonlyArray<Chip>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'os'): ReadonlyArray<Os>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: 'gear'): ReadonlyArray<Gear>\nexport function useAvailableEquipment(unit: UnitBasicInfo, slot: EquipmentSlot): ReadonlyArray<Chip | Os | Gear> {\n  switch (slot) {\n  case 'chip1':\n  case 'chip2':\n    return useRecoilValue(availableChipEquipmentState([unit.no, slot]));\n  case 'os':\n    return useRecoilValue(availableOsEquipmentState(unit.no));\n  case 'gear':\n    return useRecoilValue(availableGearEquipmentState(unit.no));\n  }\n}\n","/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { MouseEventHandler, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Badge, Dropdown, Image } from 'react-bootstrap';\nimport EquipmentItemView from './EquipmentItemView';\nimport EquipmentPlaceholder from './EquipmentPlaceholder';\nimport EquipmentRankToggleButton from './EquipmentRankToggleButton';\nimport RoundedToggleButton from '../../common/RoundedToggleButton';\nimport SlotUnavailableOverlay from '../SlotUnavailableOverlay';\n\nimport {\n  Chip,\n  ChipEquipmentRanks,\n  EquipmentEnhancementLevel,\n  EquipmentId,\n  EquipmentType,\n  Gear,\n  GearEquipmentRanks,\n  Os,\n  OsEquipmentRanks\n} from '../../../domain/equipment/EquipmentData';\nimport { ChipEquipment, GearEquipment, OsEquipment } from '../../../domain/equipment/UnitEquipment';\nimport { UnitBasicInfo, UnitNumber } from '../../../domain/UnitBasicInfo';\n\nimport { EquipmentSlot } from '../../../state/equipment/UnitEquipmentState';\nimport {\n  useEquipmentAvailable,\n  useEquipmentEffects,\n  useEquipmentEffectsAsSkill,\n  useEquipmentEnhanceLvSelector,\n  useEquipmentRank,\n  useEquipmentStatusEffects,\n  useUnitEquipment\n} from '../../../state/equipment/UnitEquipmentHook';\nimport {\n  TranslatedEquipmentEffect,\n  TranslatedEquipmentEffectAsSkill\n} from '../../../state/equipment/EquipmentEffectsTranslator';\nimport { useAvailableEquipment } from '../../../state/equipment/availableEquipment';\nimport { useSelectedUnit } from '../../../state/selector/UnitSelectorHook';\n\nimport { ifNonNullable } from '../../../util/react';\n\nimport './EquipmentSelector.css';\n\ntype SlotEquipment<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? Chip :\n  S extends 'os' ? Os :\n  S extends 'gear' ? Gear :\n    never\n\ntype SlotEquipmentType<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? typeof EquipmentType.Chip :\n  S extends 'os' ? typeof EquipmentType.Os :\n  S extends 'gear' ? typeof EquipmentType.Gear :\n    never\n\ntype CurrentEquipment<S extends EquipmentSlot> =\n  S extends 'chip1' | 'chip2' ? ChipEquipment :\n  S extends 'os' ? OsEquipment :\n  S extends 'gear' ? GearEquipment :\n    never\n\ntype Props<S extends EquipmentSlot> = {\n  unit: UnitBasicInfo,\n  id: string,\n  slot: S,\n  type: SlotEquipmentType<S>,\n  value?: CurrentEquipment<S>,\n  items: ReadonlyArray<SlotEquipment<S>>,\n  onSelect: (equipment: SlotEquipment<S> | undefined) => void\n}\n\nconst EffectTypeHeader: React.FC<{ children: string }> = ({ children }) => {\n  return (<div className=\"header\">{children}</div>);\n};\n\nconst EquipmentEnhancementLvSelector: React.FC<{ slot: EquipmentSlot, unit: UnitNumber }> = ({ slot, unit }) => {\n  const SelectorButton = ({ enhanceLv }: { enhanceLv: EquipmentEnhancementLevel }) => {\n    const [selected, select] = useEquipmentEnhanceLvSelector(slot, unit, enhanceLv);\n\n    return (<RoundedToggleButton selected={selected} onChange={select}>+&nbsp;{enhanceLv}</RoundedToggleButton>);\n  };\n\n  return (\n    <div className=\"equipment-enhancement\">\n      {([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10] as const).map(n => (\n        <SelectorButton key={n} enhanceLv={n} />\n      ))}\n    </div>\n  );\n};\n\nconst EquipmentRankSelector: React.FC<{ slot: EquipmentSlot }> = ({ slot }) => {\n  const rankToggleButtons = () => {\n    switch (slot) {\n    case 'chip1':\n    case 'chip2':\n      return ChipEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    case 'os':\n      return OsEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    case 'gear':\n      return GearEquipmentRanks.map(rank => (\n        <EquipmentRankToggleButton key={rank} slot={slot} rank={rank} />\n      ));\n    }\n  };\n\n  return (\n    <div className=\"equipment-rank\">\n      {rankToggleButtons()}\n    </div>\n  );\n};\n\nconst EquipmentStatusEffects: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentStatusEffects(slot, equipment);\n\n  return (\n    <div className=\"status-effects\">\n      <EffectTypeHeader>{t('status.equipment_status_effect')}</EffectTypeHeader>\n      <div className=\"details\">{effects}</div>\n    </div>\n  );\n};\n\nconst EffectDetailList: React.FC<{\n  effects: ReadonlyArray<TranslatedEquipmentEffect> | ReadonlyArray<TranslatedEquipmentEffectAsSkill>\n}> = ({ effects }) => {\n  const { t } = useTranslation();\n\n  return (\n    <React.Fragment>\n      {effects.map(e => {\n        const { condition, details } = e;\n        return (\n          <div key={JSON.stringify(e)}>\n            {ifNonNullable(condition, cond => (<div className=\"condition\">{cond}</div>))}\n            {\n              'self' in details ?\n                (<React.Fragment>\n                  <Badge variant=\"light\">{t('effect:effect.target.self')}</Badge>\n                  <EffectDetailRows details={details.self} />\n                  {ifNonNullable(\n                    'target' in details ? details.target : undefined,\n                    target => (\n                      <React.Fragment>\n                        <Badge variant=\"light\">{t('effect:effect.target.target')}</Badge>\n                        <EffectDetailRows details={target} />\n                      </React.Fragment>\n                    )\n                  )}\n                </React.Fragment>) :\n                (<EffectDetailRows details={details} />)\n            }\n          </div>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst EffectDetailRows: React.FC<{\n  details: TranslatedEquipmentEffect['details']\n}> = ({ details }) => {\n  return (\n    <React.Fragment>\n      {details.map(({ detail, term }) => (\n        <div key={detail} className=\"detail\">\n          <div>{detail}</div>\n          {ifNonNullable(term, v => (\n            <div className=\"term\"><span css={{ color: '#aaa', fontSize: '0.9em' }}>{v}</span></div>\n          ))}\n        </div>\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst EquipmentEffects: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentEffects(slot, equipment);\n\n  return ifNonNullable(\n    effects,\n    e => (\n      <div className=\"effects\">\n        <EffectTypeHeader>{t('status.equipment_effect')}</EffectTypeHeader>\n        <EffectDetailList effects={e} />\n      </div>\n    )\n  );\n};\n\nconst EquipmentEffectsAsSkill: React.FC<{ slot: EquipmentSlot, equipment: EquipmentId }> = ({ slot, equipment }) => {\n  const { t } = useTranslation();\n  const effects = useEquipmentEffectsAsSkill(slot, equipment);\n\n  return ifNonNullable(\n    effects,\n    e => (\n      <div className=\"effects\">\n        <EffectTypeHeader>{t('status.equipment_effect_as_skill')}</EffectTypeHeader>\n        <EffectDetailList effects={e} />\n      </div>\n    )\n  );\n};\n\nconst EquipmentItem: React.FC<{\n  slot: EquipmentSlot,\n  eventKey: EquipmentId,\n  active: boolean,\n  label: string,\n  src: string\n}> = ({ slot, eventKey, active, label, src, ...rest }) => {\n  return (\n    <Dropdown.Item\n      {...rest}\n      className=\"equipment\"\n      eventKey={eventKey}\n      active={active}\n    >\n      <div className=\"icon\">\n        <Image\n          draggable=\"false\"\n          height={48}\n          width={48}\n          alt={label}\n          src={src}\n        />\n        <span className=\"label\">{label}</span>\n      </div>\n      <div className=\"details\">\n        <EquipmentStatusEffects slot={slot} equipment={eventKey} />\n        <EquipmentEffects slot={slot} equipment={eventKey} />\n        <EquipmentEffectsAsSkill slot={slot} equipment={eventKey} />\n      </div>\n    </Dropdown.Item>\n  );\n};\n\nconst RemoveEquipmentItem: React.FC<{\n  active: boolean,\n  type: SlotEquipmentType<EquipmentSlot>\n}> = ({ active, type, ...rest }) => {\n  const { t } = useTranslation();\n  const label = t('status.remove_equipment');\n\n  return (\n    <Dropdown.Item\n      {...rest}\n      className=\"equipment remove\"\n      active={active}\n    >\n      <div className=\"icon\">\n        <Image\n          draggable=\"false\"\n          height={48}\n          width={48}\n          alt={label}\n          src={`${process.env.PUBLIC_URL}/icon/placeholder_${type}.webp`}\n        />\n      </div>\n      <div className=\"details\">{label}</div>\n    </Dropdown.Item>\n  );\n};\n\nconst EquipmentSelectorMenu = <T extends EquipmentSlot>(\n  { unit, slot, type, value, items, ...rest }: Omit<Props<T>, 'id' | 'onSelect'>\n): ReturnType<React.FC<Omit<Props<T>, 'id' | 'onSelect'>>> => {\n  const { t } = useTranslation();\n  const rank = useEquipmentRank(slot);\n\n  return (\n    <Dropdown.Menu {...rest} className=\"equipment\">\n      <EquipmentEnhancementLvSelector slot={slot} unit={unit.no} />\n      <EquipmentRankSelector slot={slot} />\n      <div className=\"equipment-list\">\n        <RemoveEquipmentItem type={type} active={!value?.id} />\n        {items.map(item => (\n          <EquipmentItem\n            key={item.id}\n            slot={slot}\n            eventKey={item.id}\n            active={item.id === value?.id && rank === value?.rank}\n            label={t(`equipment:${item.id}`)}\n            src={`${process.env.PUBLIC_URL}/equip_icon/${item.type}_${item.id}_${rank}.webp`}\n          />\n        ))}\n      </div>\n    </Dropdown.Menu>\n  );\n};\n\nconst EquipmentSlotUnavailableOverlay: React.FC<{ unit: UnitBasicInfo, slot: EquipmentSlot }> = ({ unit, slot }) => {\n  const [available, availableLv] = useEquipmentAvailable(unit, slot);\n  return (<SlotUnavailableOverlay show={!available} availableLv={availableLv} />);\n};\n\nconst EquipmentToggle = React.forwardRef<\n  HTMLAnchorElement,\n  {\n    onClick: MouseEventHandler<HTMLAnchorElement>,\n    id: string,\n    children: ReactNode\n  }\n>(({ onClick, id, children }, ref) => (\n  <a\n    href=\"\"\n    ref={ref}\n    id={id}\n    onClick={(e) => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n  </a>\n));\n\nconst EquipmentDropdown = <T extends EquipmentSlot>(\n  { id, unit, slot, type, value, onSelect, items }: Props<T>\n): ReturnType<React.FC<Props<T>>> => {\n  return (\n    <Dropdown\n      className=\"slot equipment\"\n      onSelect={(eventKey) => {\n        if (eventKey) {\n          const item = items.find((item: SlotEquipment<T>) => item.id === eventKey);\n          item && onSelect(item);\n        } else {\n          onSelect(undefined);\n        }\n      }}\n    >\n      <Dropdown.Toggle as={EquipmentToggle} id={id}>\n        <span className=\"equipment-toggle-view\">\n          {value ?\n            (<EquipmentItemView\n              equipmentId={value.id}\n              equipmentType={type}\n              equipmentRank={value.rank}\n              enhancementLv={value.enhanceLv}\n            />) :\n            <EquipmentPlaceholder type={type} />}\n          <EquipmentSlotUnavailableOverlay unit={unit} slot={slot} />\n        </span>\n      </Dropdown.Toggle>\n      <EquipmentSelectorMenu unit={unit} slot={slot} type={type} value={value} items={items} />\n    </Dropdown>\n  );\n};\n\nconst Chip1EquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'chip1');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'chip1');\n  return (\n    <EquipmentDropdown\n      id=\"chip1-equipment-dropdown\"\n      unit={unit}\n      slot=\"chip1\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst Chip2EquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'chip2');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'chip2');\n  return (\n    <EquipmentDropdown\n      id=\"chip2-equipment-dropdown\"\n      unit={unit}\n      slot=\"chip2\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst OsEquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'os');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'os');\n  return (\n    <EquipmentDropdown\n      id=\"os-equipment-dropdown\"\n      unit={unit}\n      slot=\"os\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst GearEquipmentDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableEquipment(unit, 'gear');\n  const [type, equipment, equip] = useUnitEquipment(unit, 'gear');\n  return (\n    <EquipmentDropdown\n      id=\"gear-equipment-dropdown\"\n      unit={unit}\n      slot=\"gear\"\n      type={type}\n      value={equipment}\n      onSelect={equip}\n      items={items}\n    />\n  );\n};\n\nconst EquipmentSelector: React.FC<{ slot: EquipmentSlot }> = ({ slot }) => {\n  const selected = useSelectedUnit();\n\n  return ifNonNullable(\n    selected,\n    unit => {\n      switch (slot) {\n      case 'chip1': return (<Chip1EquipmentDropdown unit={unit} />);\n      case 'chip2': return (<Chip2EquipmentDropdown unit={unit} />);\n      case 'os':    return (<OsEquipmentDropdown unit={unit} />);\n      case 'gear':  return (<GearEquipmentDropdown unit={unit} />);\n      }\n    }\n  );\n};\n\nexport default EquipmentSelector;\n"],"sourceRoot":""}