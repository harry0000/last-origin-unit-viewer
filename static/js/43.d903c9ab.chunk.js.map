{"version":3,"file":"static/js/43.d903c9ab.chunk.js","mappings":"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","sources":["component/status/corelink/FullLinkBonusDropdown.tsx"],"sourcesContent":["/** @jsxRuntime classic */\n/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { MouseEventHandler, ReactNode } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Dropdown } from 'react-bootstrap';\n\nimport { UnitBasicInfo } from '../../../domain/UnitBasicInfo';\nimport { FullLinkBonus } from '../../../domain/UnitCoreLinkBonusData';\nimport { calcMicroValue, calcMilliPercentageValue } from '../../../domain/ValueUnit';\n\nimport { useAvailableFullLinkBonus, useFullLinkBonus } from '../../../state/corelink/UnitCoreLinkHook';\n\nimport { ifTruthy } from '../../../util/react';\n\nimport '../dropdown.css';\n\nconst FullLinkBonusLabel: React.FC<{ bonus: FullLinkBonus | undefined }> = ({ bonus }) => {\n  const { t } = useTranslation();\n\n  let label: string;\n  if (!bonus) {\n    label = '\\u00A0';\n  } else if ('sortie_cost' in bonus) {\n    label = t('form.full_link_bonus.sortie_cost', { value: calcMilliPercentageValue(bonus.sortie_cost) });\n  } else if ('damage_multiplier' in bonus) {\n    label = t('form.full_link_bonus.damage_multiplier', { value: calcMilliPercentageValue(bonus.damage_multiplier) });\n  } else if ('buff_debuff_lv_up' in bonus) {\n    label = t('form.full_link_bonus.buff_debuff_lv_up', { value: bonus.buff_debuff_lv_up.value });\n  } else if ('hp_up' in bonus) {\n    label = t('form.full_link_bonus.hp_up', { value: calcMilliPercentageValue(bonus.hp_up) });\n  } else if ('atk_up' in bonus) {\n    label = t('form.full_link_bonus.atk_up', { value: calcMilliPercentageValue(bonus.atk_up) });\n  } else if ('def_up' in bonus) {\n    label = t('form.full_link_bonus.def_up', { value: calcMilliPercentageValue(bonus.def_up) });\n  } else if ('acc_up' in bonus) {\n    label = t('form.full_link_bonus.acc_up', { value: calcMilliPercentageValue(bonus.acc_up) });\n  } else if ('eva_up' in bonus) {\n    label = t('form.full_link_bonus.eva_up', { value: calcMilliPercentageValue(bonus.eva_up) });\n  } else if ('cri_up' in bonus) {\n    label = t('form.full_link_bonus.cri_up', { value: calcMilliPercentageValue(bonus.cri_up) });\n  } else if ('spd_up' in bonus) {\n    label = t('form.full_link_bonus.spd_up', { value: calcMicroValue(bonus.spd_up) });\n  } else {\n    label = t('form.full_link_bonus.range_up', { value: bonus.range_up.value });\n  }\n\n  return (<span>{label}</span>);\n};\n\nconst UnselectBonusItem: React.FC<{ active: boolean }> = ({ active }) => {\n  return (<Dropdown.Item active={active}>&nbsp;</Dropdown.Item>);\n};\n\nconst FullLinkBonusItem: React.FC<{\n  bonus: FullLinkBonus,\n  eventKey: number,\n  active: boolean\n}> = ({ bonus, eventKey, active }) => {\n  return (\n    <Dropdown.Item eventKey={eventKey} active={active}>\n      <FullLinkBonusLabel bonus={bonus}/>\n    </Dropdown.Item>\n  );\n};\n\nconst FullLinkBonusToggle = React.forwardRef<\n  HTMLAnchorElement,\n  {\n    id: string,\n    onClick: MouseEventHandler<HTMLAnchorElement>,\n    available: boolean,\n    children: ReactNode\n  }\n>(({ id, onClick, available, children }, ref) => (\n  <a\n    href=\"\"\n    ref={ref}\n    id={id}\n    onClick={(e) => {\n      e.preventDefault();\n      onClick(e);\n    }}\n  >\n    {children}\n    <span className=\"toggle\" />\n    {ifTruthy(!available, (<span className=\"unavailable\" />))}\n  </a>\n));\n\nconst FullLinkBonusDropdown: React.FC<{ unit: UnitBasicInfo }> = ({ unit }) => {\n  const items = useAvailableFullLinkBonus(unit);\n  const [selectedBonus, selectBonus, available] = useFullLinkBonus(unit);\n\n  return (\n    <Dropdown\n      className=\"unit-state\"\n      onSelect={eventKey => {\n        selectBonus(eventKey ? items[+eventKey] : undefined);\n      }}\n    >\n      <Dropdown.Toggle as={FullLinkBonusToggle} id=\"full-link-bonus-dropdown\" available={available}>\n        <FullLinkBonusLabel bonus={selectedBonus}/>\n      </Dropdown.Toggle>\n      <Dropdown.Menu>\n        <UnselectBonusItem active={!selectedBonus}/>\n        {items.map((bonus, i) => (\n          <FullLinkBonusItem\n            key={JSON.stringify(bonus)}\n            bonus={bonus}\n            eventKey={i}\n            active={bonus === selectedBonus}\n          />\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\nexport default FullLinkBonusDropdown;\n"],"names":["FullLinkBonusLabel","_ref","bonus","t","useTranslation","label","value","calcMilliPercentageValue","sortie_cost","damage_multiplier","buff_debuff_lv_up","hp_up","atk_up","def_up","acc_up","eva_up","cri_up","calcMicroValue","spd_up","range_up","jsx","UnselectBonusItem","_ref2","active","Dropdown","Item","FullLinkBonusItem","_ref3","eventKey","FullLinkBonusToggle","React","_ref4","ref","id","onClick","available","children","href","e","preventDefault","className","ifTruthy","_ref5","unit","items","useAvailableFullLinkBonus","selectedBonus","selectBonus","useFullLinkBonus","onSelect","undefined","Toggle","as","Menu","map","i","key","JSON","stringify"],"sourceRoot":""}